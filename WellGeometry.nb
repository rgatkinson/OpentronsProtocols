Notebook[{

Cell[CellGroupData[{
Cell["Well & Pipette Tip Geometry", \
"Title",ExpressionUUID->"39796d72-87ca-4320-97ff-a98d4bd016ce"],

Cell["\<\
Robert Atkinson
18 November 2019\
\>", "Author",ExpressionUUID->"05aea015-05f3-4e99-899d-20a8cd5792a1"],

Cell["\<\
This Mathematica notebook explores the geometry and shape of various wells, \
pipettes, and pipette tips. The goal is to create simple, closed-form \
functions for such things as the depth of liquid as a function of liquid \
volume, and the amount of radial clearance available when a given pipette tip \
is mounted on a given pipette and is inserted in a will at a certain depth. \
Applications of these functions include the ability to know where the top of \
liquid is in any given tube, facilitating the best-practice of pipetting at \
the top of liquid rather than the bottom, and the ability to \
\[OpenCurlyQuote]touch-tip\[CloseCurlyQuote] at any depth in a well, not just \
the top, which in turn can lead to better mixing logic.\
\>", "Text",ExpressionUUID->"56cc4ba9-b77c-4512-b3b4-73f00a3c0eee"],

Cell[CellGroupData[{

Cell["Programmatic Utilities", \
"Section",ExpressionUUID->"752773aa-79a8-4543-97a4-9a28a9955492"],

Cell["\<\
This section contains several utilities needed in the sequel.\
\>", "Text",ExpressionUUID->"ab55a4b2-3eb3-4286-8e41-3e96cef3d75d"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"FrontEndExecute", "[", 
    RowBox[{"{", 
     RowBox[{"FrontEndToken", "[", 
      RowBox[{
       RowBox[{"InputNotebook", "[", "]"}], ",", "\"\<SelectAll\>\""}], "]"}],
      "}"}], "]"}], ";", "\n", 
   RowBox[{"FrontEndExecute", "[", 
    RowBox[{"{", 
     RowBox[{"FrontEndToken", "[", 
      RowBox[{
       RowBox[{"InputNotebook", "[", "]"}], ",", 
       "\"\<SelectionOpenAllGroups\>\""}], "]"}], "}"}], "]"}], ";"}], 
  "*)"}]], "Input",ExpressionUUID->"4308b520-54ec-4531-b566-b60a693897e8"],

Cell[BoxData[{
 RowBox[{"On", "[", "Assert", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "assert", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assert", "[", "expr_", "]"}], " ", ":=", " ", 
  RowBox[{"assert", "[", 
   RowBox[{"expr", ",", " ", "\"\<assertion failed\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assert", "[", 
   RowBox[{"expr_", ",", " ", "msg_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"value", "=", 
      RowBox[{"Evaluate", "[", "expr", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"BooleanQ", "[", "value", "]"}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"Assert", "[", 
       RowBox[{"value", ",", " ", 
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{"msg", ",", " ", "\"\<: \>\"", ",", " ", 
           RowBox[{"HoldForm", "[", "expr", "]"}]}], "}"}], "]"}]}], "]"}], 
      "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
      RowBox[{"Assert", "[", 
       RowBox[{"value", ",", " ", 
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{"msg", ",", " ", "\"\<: \>\"", ",", " ", 
           RowBox[{"HoldForm", "[", "expr", "]"}]}], "}"}], "]"}]}], "]"}]}], 
     " ", 
     RowBox[{"(*", " ", 
      RowBox[{"to", " ", 
       RowBox[{"do", ":", " ", 
        RowBox[{"improve", " ", "message"}]}]}], " ", "*)"}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"SetAttributes", "[", 
  RowBox[{"assert", ",", " ", "HoldAll"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"assert", "[", "False", "]"}], "\[IndentingNewLine]", 
 RowBox[{"assert", "[", "3", 
  "]"}]}], "Input",ExpressionUUID->"5325dfb4-04b1-494c-bcbd-e2677b467f94"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"printCell", "[", "cell_", "]"}], " ", ":=", " ", 
  RowBox[{"CellPrint", "[", 
   RowBox[{"ExpressionCell", "[", 
    RowBox[{"cell", ",", " ", "\"\<Output\>\""}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cellPrint", "[", "cell_", "]"}], " ", ":=", " ", 
  RowBox[{"CellPrint", "[", 
   RowBox[{"ExpressionCell", "[", 
    RowBox[{"cell", ",", " ", "\"\<Output\>\""}], "]"}], 
   "]"}]}]}], "Input",ExpressionUUID->"37bb6aae-3724-4681-b762-434c36589e57"],

Cell[BoxData[
 RowBox[{
  RowBox[{"log", "[", "msg_", "]"}], " ", ":=", " ", 
  RowBox[{"CellPrint", "[", 
   RowBox[{"TextCell", "[", 
    RowBox[{"msg", ",", " ", "\"\<Text\>\""}], "]"}], 
   "]"}]}]], "Input",ExpressionUUID->"e7981d16-a332-4bc6-abdf-3a48fc8b52ff"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", "[", "expr_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "evald", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"evald", " ", "=", " ", 
      RowBox[{"Evaluate", "[", "expr", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"printCell", "[", 
      RowBox[{
       RowBox[{"HoldForm", "[", "expr", "]"}], " ", "\[Rule]", " ", "evald"}],
       "]"}], ";", "\[IndentingNewLine]", "evald"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test2", "[", "expr_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "evald", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"printCell", "[", 
      RowBox[{
       RowBox[{"HoldForm", "[", "expr", "]"}], " ", "\[Rule]", " ", 
       "\"\<evaluating...\>\""}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"evald", " ", "=", " ", 
      RowBox[{"Evaluate", "[", "expr", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"printCell", "[", 
      RowBox[{"\"\<...\>\"", " ", "\[Rule]", " ", "evald"}], "]"}], ";", 
     "\[IndentingNewLine]", "evald"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"SetAttributes", "[", 
  RowBox[{"test", ",", " ", "HoldAll"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"SetAttributes", "[", 
  RowBox[{"test2", ",", " ", "HoldAll"}], 
  "]"}]}], "Input",ExpressionUUID->"5aa89327-f38a-4c75-8bc4-5f11f8896fc6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"complement", "[", "angle_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"\[Pi]", "/", "2"}], " ", "-", " ", 
   "angle"}]}]], \
"Input",ExpressionUUID->"78d80425-9321-49ab-b281-593a15d6063e"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "hasImaginary", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"hasImaginary", "[", "expr_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"result", " ", "=", " ", 
       RowBox[{"Reap", "[", 
        RowBox[{"Scan", "[", 
         RowBox[{
          RowBox[{"Function", "[", 
           RowBox[{"ee", ",", " ", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"ee", " ", "\[NotEqual]", " ", 
               RowBox[{"Conjugate", "[", "ee", "]"}]}], ",", " ", 
              RowBox[{"Sow", "[", "True", "]"}]}], "]"}]}], "]"}], ",", 
          RowBox[{"{", "expr", "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "Infinity"}], "}"}]}], "]"}], 
        "]"}]}], ";"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"Scan", "[", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"ee", ",", " ", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"ee", " ", "\[NotEqual]", " ", 
             RowBox[{"Conjugate", "[", "ee", "]"}]}], ",", " ", 
            RowBox[{"Return", "[", "True", "]"}]}], "]"}]}], "]"}], ",", 
        RowBox[{"{", "expr", "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", " ", "Infinity"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Length", " ", "@", " ", 
        RowBox[{"result", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], " ", ">", " ", "0"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"result", " ", "===", " ", "True"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"SetAttributes", "[", 
  RowBox[{"hasImaginary", ",", " ", "HoldAll"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"hasImaginary", "[", 
    RowBox[{"1", " ", "+", " ", 
     RowBox[{"2", "I"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"hasImaginary", "[", 
    RowBox[{"30", "!"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"440d00c8-54b5-4b08-bfe8-ae5feb69d532"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"toDeg", "[", "rad_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"rad", " ", "/", " ", "Pi"}], " ", "*", " ", 
   "180"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toRadian", "[", "deg_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"deg", " ", "/", " ", "180"}], " ", "*", " ", 
   "Pi"}]}]}], "Input",ExpressionUUID->"2bbc42e7-5161-4850-a96b-3fb814745a8d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"variables", ",", " ", "unboundQ"}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"unboundQ", "[", "x_Symbol", "]"}], " ", ":=", " ", "True"}], "\n", 
 RowBox[{
  RowBox[{"unboundQ", "[", "_", "]"}], " ", ":=", " ", "False"}], "\n", 
 RowBox[{
  RowBox[{"unboundQ", "[", "E", "]"}], " ", ":=", " ", "False"}], "\n", 
 RowBox[{
  RowBox[{"unboundQ", "[", "I", "]"}], " ", ":=", " ", "False"}], "\n", 
 RowBox[{
  RowBox[{"unboundQ", "[", "Pi", "]"}], " ", ":=", " ", "False"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"unboundQ", "[", "\[Pi]", "]"}], " ", ":=", " ", "False"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"variables", "[", "expr_", "]"}], " ", ":=", " ", 
  RowBox[{"variables", "[", 
   RowBox[{"expr", ",", " ", 
    RowBox[{"{", "}"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"variables", "[", 
     RowBox[{"expr_", ",", " ", "except_"}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"result", ",", " ", "reaped"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"result", ",", " ", "reaped"}], "}"}], " ", "=", 
        RowBox[{"Reap", "[", 
         RowBox[{"Scan", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"unboundQ", "[", "#", "]"}], ",", 
               RowBox[{"Sow", "[", "#", "]"}]}], "]"}], ")"}], "&"}], ",", 
           "expr", ",", "Infinity"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "reaped", "]"}], " ", "==", " ", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", "}"}], "\[IndentingNewLine]", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Complement", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"reaped", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "//", "Union"}], ",", "except"}],
           "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"variables", "[", 
    RowBox[{"e", " ", "\[Equal]", " ", 
     RowBox[{"m", " ", 
      RowBox[{"c", "^", "2"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"variables", "[", 
    RowBox[{"{", 
     RowBox[{"C", "[", "1", "]"}], "}"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"8fd2fa68-86de-4381-bd21-52f2d089b894"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "genericize", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"genericize", "[", "expr_", "]"}], " ", ":=", " ", 
  RowBox[{"genericize", "[", 
   RowBox[{"expr", ",", " ", "NumberQ", ",", " ", 
    RowBox[{"{", "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"genericize", "[", 
   RowBox[{"expr_", ",", " ", "test_"}], "]"}], " ", ":=", " ", 
  RowBox[{"genericize", "[", 
   RowBox[{"expr", ",", " ", "test", ",", " ", 
    RowBox[{"{", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"genericize", "[", 
     RowBox[{"expr_", ",", " ", "test_", ",", " ", "except_"}], "]"}], " ", ":=",
     " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "result", ",", " ", "reaped", ",", " ", "numbers", ",", " ", "count", 
        ",", " ", "neg", ",", " ", "pos", ",", " ", "zero", ",", " ", 
        "constants", ",", " ", "constraints", ",", " ", "rules"}], "}"}], ",",
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"result", ",", " ", "reaped"}], "}"}], " ", "=", 
        RowBox[{"Reap", "[", 
         RowBox[{"Scan", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"test", "[", "#", "]"}], ",", 
               RowBox[{"Sow", "[", "#", "]"}]}], "]"}], ")"}], "&"}], ",", 
           "expr", ",", "Infinity"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "reaped", "]"}], " ", ">", " ", "0"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"numbers", " ", "=", " ", 
           RowBox[{
            RowBox[{"reaped", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "//", "Union"}]}], ";", " ", 
          RowBox[{"(*", " ", 
           RowBox[{"todo", ":", " ", 
            RowBox[{
             RowBox[{
             "should", " ", "we", " ", "merge", " ", "duplicates", " ", 
              "like", " ", 
              RowBox[{"this", "?", " ", "It"}], " ", "does", " ", "make", " ",
               "the", " ", "logic", " ", "below", " ", "somewhat", " ", 
              "easier"}], " ", "..."}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"numbers", " ", "=", " ", 
           RowBox[{"Complement", "[", 
            RowBox[{"numbers", ",", "except"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"numbers", " ", "=", " ", 
           RowBox[{"Sort", "[", "numbers", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"count", " ", "=", " ", 
           RowBox[{"Length", "[", "numbers", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"constants", " ", "=", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"C", "[", "#", "]"}], "&"}], " ", "/@", " ", 
            RowBox[{"Range", "[", "count", "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"count", " ", ">", " ", "1"}], ",", "\[IndentingNewLine]", 
            RowBox[{"constraints", " ", "=", " ", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"constants", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], "<", " ", 
                RowBox[{"constants", "[", 
                 RowBox[{"[", 
                  RowBox[{"#", "+", "1"}], "]"}], "]"}]}], "&"}], " ", "/@", 
              " ", 
              RowBox[{"Range", "[", 
               RowBox[{"count", "-", "1"}], "]"}]}]}], "\[IndentingNewLine]", 
            ",", "\[IndentingNewLine]", 
            RowBox[{"constraints", "=", " ", 
             RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"pos", " ", "=", " ", 
           RowBox[{"Select", "[", 
            RowBox[{"numbers", ",", " ", 
             RowBox[{
              RowBox[{"#", " ", ">", " ", "0"}], "&"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"neg", "  ", "=", " ", 
           RowBox[{"Select", "[", 
            RowBox[{"numbers", ",", " ", 
             RowBox[{
              RowBox[{"#", " ", "<", " ", "0"}], " ", "&"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"zero", " ", "=", " ", 
           RowBox[{"Select", "[", 
            RowBox[{"numbers", ",", " ", 
             RowBox[{
              RowBox[{"#", " ", "\[Equal]", " ", "0"}], "&"}]}], "]"}]}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "pos", "]"}], " ", ">", " ", "0"}], ",", 
            " ", 
            RowBox[{"constraints", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"constraints", ",", " ", 
               RowBox[{
                RowBox[{"constants", "[", 
                 RowBox[{"[", 
                  RowBox[{"count", " ", "-", " ", 
                   RowBox[{"Length", "[", "pos", "]"}], "+", "1"}], "]"}], 
                 "]"}], " ", ">", " ", "0"}]}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "neg", "]"}], " ", ">", " ", "0"}], ",", 
            " ", 
            RowBox[{"constraints", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"constraints", ",", " ", 
               RowBox[{
                RowBox[{"constants", "[", 
                 RowBox[{"[", 
                  RowBox[{"Length", "[", "neg", "]"}], "]"}], "]"}], " ", "<",
                 " ", "0"}]}], "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "zero", "]"}], " ", ">", " ", "0"}], ",", 
            " ", 
            RowBox[{"constraints", " ", "=", " ", 
             RowBox[{"Append", "[", 
              RowBox[{"constraints", ",", " ", 
               RowBox[{
                RowBox[{"constants", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"Length", "[", "neg", "]"}], "+", "1"}], "]"}], 
                 "]"}], " ", "==", " ", "0"}]}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"constraints", " ", "=", " ", 
           RowBox[{"And", " ", "@@", " ", "constraints"}]}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"rules", " ", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"numbers", "[", 
                RowBox[{"[", "#", "]"}], "]"}], " ", "\[Rule]", " ", 
               RowBox[{"constants", "[", 
                RowBox[{"[", "#", "]"}], "]"}]}], ")"}], "&"}], "/@", " ", 
            RowBox[{"Range", "[", "count", "]"}]}]}]}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"expr", " ", "/.", " ", "rules"}], ",", " ", 
         RowBox[{"Reverse", "[", 
          RowBox[{"rules", ",", " ", 
           RowBox[{"{", "2", "}"}]}], "]"}], ",", " ", "constraints"}], 
        "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"genericize", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"h", ",", "2"}], "]"}], " ", "+", " ", 
     RowBox[{"fred", "[", 
      RowBox[{
      "1.2", ",", " ", "3.14159", ",", " ", "1.2", ",", " ", "seven", ",", 
       " ", 
       RowBox[{"-", "2"}], ",", " ", 
       RowBox[{"-", "3"}], ",", " ", "0"}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"2785b03d-5985-4032-b823-71703b18af08"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "enumerate", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"enumerate", "[", "iterable_", "]"}], " ", ":=", " ", 
  RowBox[{"MapThread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"#1", ",", " ", "#2"}], "}"}], "&"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Range", "[", 
       RowBox[{"Length", "[", "iterable", "]"}], "]"}], ",", " ", 
      "iterable"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"enumerate", "[", 
    RowBox[{"func_", ",", "iterable_"}], "]"}], " ", ":=", " ", 
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"func", "[", 
       RowBox[{"#1", ",", " ", "#2"}], "]"}], "&"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Range", "[", 
        RowBox[{"Length", "[", "iterable", "]"}], "]"}], ",", " ", 
       "iterable"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"enumerate", "[", 
    RowBox[{"{", 
     RowBox[{"a", ",", " ", "b", ",", " ", "c"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"i", ",", " ", "value"}], "}"}], ",", " ", 
      RowBox[{"value", " ", "+", " ", "i"}]}], "]"}], "@@", "#"}], "&"}], " ",
   "/@", " ", 
  RowBox[{"enumerate", "[", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], 
   "]"}]}]}], "Input",ExpressionUUID->"8ec68a9c-2f7a-4b02-a56f-dc20decd0fec"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "pairUp", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pairUp", "[", 
   RowBox[{"a_", ",", " ", "b_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pairUp", "[", 
   RowBox[{"a_", ",", " ", "b_", ",", " ", "c_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", " ", "c"}], "}"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"pairUp", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", " ", "3"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"a", ",", " ", "b", ",", " ", "c"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"do", ",", " ", "re", ",", " ", "mi"}], "}"}]}], 
  "]"}]}], "Input",ExpressionUUID->"f5d937b1-633c-462f-b80a-4b944b3250af"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "qReduce", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"qReduce", "[", 
   RowBox[{"expr_", ",", " ", "vars_", ",", " ", 
    RowBox[{"dom_", " ", ":", " ", "Reals"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Quiet", "[", 
   RowBox[{
    RowBox[{"Reduce", "[", 
     RowBox[{"expr", ",", " ", "vars", ",", " ", "dom"}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"Reduce", "::", "ratnz"}], "}"}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"ae93f216-c13a-4fa8-8c55-51d96176c90a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Geometric Shapes", \
"Section",ExpressionUUID->"74671b0c-3da3-4376-b124-bba07699ac4b"],

Cell["\<\
This section contains definitions of the volume, height, etc of several \
different mathematical shapes\
\>", "Text",ExpressionUUID->"df801ffa-0aed-46ac-96ed-3511fc9f0cb6"],

Cell[CellGroupData[{

Cell["Utilities", \
"Subsection",ExpressionUUID->"826c554f-bde5-4fb3-a2ee-32d50b59d94c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"volumeFromDepthUsingInverse", "[", 
   RowBox[{"shape_", ",", " ", "depth_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"InverseFunction", "[", 
    RowBox[{"Function", "[", 
     RowBox[{"v", ",", " ", 
      RowBox[{"depthFromVolume", "[", 
       RowBox[{"shape", ",", " ", "v"}], "]"}]}], "]"}], "]"}], "[", "depth", 
   "]"}]}]], "Input",ExpressionUUID->"a893b0b4-cc83-4573-a91c-a99d2f96e1b0"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "genericVolumeFromDepthUsingInverse", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
   RowBox[{"genericShape_", ",", " ", "depth_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{
        RowBox[{"volumeFromDepthUsingInverse", "[", 
         RowBox[{"genericShape", ",", " ", "depth"}], "]"}], ",", " ", 
        RowBox[{"assumptions", "[", "genericShape", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
       RowBox[{"genericShape", ",", " ", "depth"}], "]"}], " ", "=", " ", 
      "result"}], ";", "\[IndentingNewLine]", "result"}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"01203d0f-6f73-43d7-a6ac-5d5039ab00cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Cone", \
"Subsection",ExpressionUUID->"ba3070ae-c27c-4d58-875e-e5382c2c77d0"],

Cell["\<\
Here we explore a right circular cone, oriented so that the point of the cone \
is upwards.\
\>", "Text",ExpressionUUID->"07c53af8-aa17-403a-a3ee-c8806af1e042"],

Cell[CellGroupData[{

Cell["Accessing", \
"Subsubsection",ExpressionUUID->"83535e67-e4e6-4dcc-a592-ecdfc718e245"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"cone", "[", 
    RowBox[{"h_", ",", " ", "r_"}], "]"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"h", " ", ">=", " ", "0"}], " ", "&&", " ", 
   RowBox[{"r", " ", ">=", " ", "0"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"cone", "[", 
    RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
    "]"}], "]"}], ":=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"h", " ", ">=", " ", "0"}], " ", "&&", " ", 
    RowBox[{"\[Alpha]", " ", ">", " ", "0"}], " ", "&&", " ", 
    RowBox[{"\[Alpha]", " ", "<", " ", 
     RowBox[{"\[Pi]", " ", "/", " ", "2"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"cone", "[", 
    RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
    "]"}], "]"}], ":=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"assumptions", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", " ", 
      RowBox[{"complement", "[", "\[Beta]", "]"}], ",", " ", 
      "\"\<apexangle\>\""}], "]"}], "]"}], 
   "]"}]}]}], "Input",ExpressionUUID->"dba8de03-9f0f-41dc-8536-c8df1d846200"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"assumptions", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"assumptions", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", " ", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], "]"}],
     "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"421e5ca0-f5f7-4d89-8478-1770f4650170"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"radius", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", "r_"}], "]"}]}], "]"}], " ", ":=", " ", 
  "r"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"radius", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}], 
   "]"}], " ", ":=", " ", 
  RowBox[{"h", " ", 
   RowBox[{"Tan", "[", "\[Alpha]", "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"radius", "[", 
    RowBox[{"c", ":", " ", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
      "]"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"h", " ", 
    RowBox[{"Cot", "[", "\[Beta]", "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", "r_"}], "]"}]}], "]"}], ":=", 
  "h"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}], 
   "]"}], " ", ":=", " ", "h"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", "\[Beta]_", ",", "\"\<baseangle\>\""}], "]"}]}], 
   "]"}], " ", ":=", " ", 
  "h"}]}], "Input",ExpressionUUID->"27077a15-096d-4641-90f1-572aa4a9b801"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"apexangle", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"Assuming", "[", 
   RowBox[{
    RowBox[{"assumptions", "[", "c", "]"}], ",", " ", 
    RowBox[{"ArcTan", "[", 
     RowBox[{"h", ",", " ", "r"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"apexangle", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}],
    "]"}], ":=", " ", "\[Alpha]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"apexangle", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", "\[Beta]_", ",", "\"\<baseangle\>\""}], "]"}]}], 
   "]"}], ":=", 
  RowBox[{"complement", "[", 
   RowBox[{"baseangle", "[", "c", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"baseangle", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"Assuming", "[", 
   RowBox[{
    RowBox[{"assumptions", "[", "c", "]"}], ",", " ", 
    RowBox[{"ArcTan", "[", 
     RowBox[{"r", ",", " ", "h"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"baseangle", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}],
    "]"}], ":=", " ", 
  RowBox[{"complement", "[", "\[Alpha]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"baseangle", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", "\[Beta]_", ",", "\"\<baseangle\>\""}], "]"}]}], 
   "]"}], ":=", 
  "\[Beta]"}]}], \
"Input",ExpressionUUID->"32fbe51b-b998-4851-b75e-41c13eb4174b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"apexangle", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", "r"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"apexangle", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", " ", "\[Alpha]", ",", "\"\<apexangle\>\""}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"apexangle", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", " ", "\[Beta]", ",", "\"\<baseangle\>\""}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"baseangle", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", "r"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"baseangle", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", " ", "\[Alpha]", ",", "\"\<apexangle\>\""}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{
    StyleBox["baseangle",
     FontWeight->"Bold"], "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", " ", "\[Beta]", ",", "\"\<baseangle\>\""}], "]"}], 
    "]"}]}], ";"}]}], \
"Input",ExpressionUUID->"a5350e02-5082-4e9c-a536-f350aaf76110"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conversion", \
"Subsubsection",ExpressionUUID->"d6bf2bfb-41fd-42d1-be93-3cdc6faccb37"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"toCone", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  "c"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCone", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
     "]"}]}], "]"}], ":=", " ", 
  RowBox[{"cone", "[", 
   RowBox[{"h", ",", " ", 
    RowBox[{"radius", "[", "c", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toCone", "[", 
    RowBox[{"c", ":", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
      "]"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"cone", "[", 
    RowBox[{"h", ",", " ", 
     RowBox[{"radius", "[", "c", "]"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"toCone", " ", "@", " ", "c"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
     "]"}]}], "]"}], ":=", " ", 
  RowBox[{"toCone", " ", "@", " ", "c"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toCartesian", "[", 
    RowBox[{"c", ":", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
      "]"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"toCone", " ", "@", " ", "c"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toApexAngled", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"cone", "[", 
   RowBox[{"h", ",", " ", 
    RowBox[{"apexangle", "[", "c", "]"}], ",", " ", "\"\<apexangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toApexAngled", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}], 
   "]"}], ":=", " ", "c"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toApexAngled", "[", 
    RowBox[{"c", ":", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", "\[Beta]_", ",", "\"\<baseangle\>\""}], "]"}]}], 
    "]"}], ":=", " ", 
   RowBox[{"cone", "[", 
    RowBox[{"h", ",", " ", 
     RowBox[{"apexangle", "[", "c", "]"}], ",", " ", "\"\<apexangle\>\""}], 
    "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toBaseAngled", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"cone", "[", 
   RowBox[{"h", ",", " ", 
    RowBox[{"baseangle", "[", "c", "]"}], ",", " ", "\"\<baseangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toBaseAngled", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}], 
   "]"}], ":=", " ", 
  RowBox[{"cone", "[", 
   RowBox[{"h", ",", " ", 
    RowBox[{"baseangle", "[", "c", "]"}], ",", " ", "\"\<baseangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toBaseAngled", "[", 
    RowBox[{"c", ":", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", "\[Beta]_", ",", "\"\<baseangle\>\""}], "]"}]}], 
    "]"}], ":=", " ", "c"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"scaled", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", "r_"}], "]"}]}], ",", " ", "factor_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"cone", "[", 
   RowBox[{
    RowBox[{"h", " ", "*", " ", "factor"}], ",", " ", 
    RowBox[{"r", " ", "*", " ", "factor"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"scaled", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}], 
    ",", " ", "factor_"}], "]"}], ":=", " ", 
  RowBox[{"toApexAngled", " ", "@", " ", 
   RowBox[{"scaled", "[", 
    RowBox[{
     RowBox[{"toCartesian", " ", "@", " ", "c"}], ",", " ", "factor"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"scaled", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", "\[Beta]_", ",", "\"\<baseangle\>\""}], "]"}]}], ",",
     " ", "factor_"}], "]"}], ":=", 
  RowBox[{"toBaseAngled", " ", "@", " ", 
   RowBox[{"scaled", "[", 
    RowBox[{
     RowBox[{"toCartesian", " ", "@", " ", "c"}], ",", " ", "factor"}], 
    "]"}]}]}]}], \
"Input",ExpressionUUID->"841fd25b-121c-4958-a155-ebaff935362d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toCone", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", "r"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toCone", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
     "]"}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toCone", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", " ", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], "]"}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toApexAngled", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", "r"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toApexAngled", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toApexAngled", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", " ", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], "]"}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toBaseAngled", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", "r"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toBaseAngled", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toBaseAngled", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", " ", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], "]"}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"scaled", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"h", ",", "r"}], "]"}], ",", " ", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"scaled", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
      "]"}], ",", "2"}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"scaled", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"h", ",", " ", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], 
      "]"}], ",", "2"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"acb9121b-29fe-4ef3-9296-b193f4c178e0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volume", \
"Subsubsection",ExpressionUUID->"2e392080-fd66-4f28-bc01-4e194deadab6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", "r_"}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Pi", " ", "r", " ", "r", " ", 
   RowBox[{"h", " ", "/", " ", "3"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
     "]"}]}], "]"}], ":=", " ", 
  RowBox[{"volume", " ", "@", " ", 
   RowBox[{"toCartesian", " ", "@", " ", "c"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"volume", " ", "@", " ", 
   RowBox[{"toCartesian", " ", "@", " ", "c"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", "r"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", "\[Alpha]", ",", "\"\<apexangle\>\""}], "]"}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", "[", 
    RowBox[{"cone", "[", 
     RowBox[{"h", ",", "\[Beta]", ",", "\"\<baseangle\>\""}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"ad5b5403-1cf3-477d-a458-a360c2978259"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Height and Depth", \
"Subsubsection",ExpressionUUID->"4e43b5ff-f03a-486d-a8ad-cad8d66886fe"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"genericConeDepthFromVolume", "[", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "c", ",", " ", "cc", ",", " ", "h", ",", " ", "r", ",", " ", "hh", ",", 
      " ", "vol", ",", "a", ",", " ", "eqn", ",", " ", "solns", ",", " ", 
      "soln"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "conjures", " ", "up", " ", "a", " ", "soln", " ", "with", " ", 
      "varaibles", " ", "known", " ", "to", " ", "be", " ", "free"}], " ", 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"c", " ", "=", " ", 
      RowBox[{"cone", "[", 
       RowBox[{"h", ",", "r"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"cc", " ", "=", " ", 
      RowBox[{"scaled", "[", 
       RowBox[{"c", ",", " ", 
        RowBox[{"hh", " ", "/", " ", "h"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"a", " ", "=", " ", 
      RowBox[{
       RowBox[{"assumptions", "[", "c", "]"}], " ", "&&", " ", 
       RowBox[{"assumptions", "[", "cc", "]"}], " ", "&&", " ", 
       RowBox[{"vol", " ", "\[GreaterEqual]", " ", "0"}]}]}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"eqn", " ", "=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{
        RowBox[{"vol", " ", "\[Equal]", " ", 
         RowBox[{
          RowBox[{"volume", "[", "c", "]"}], " ", "-", " ", 
          RowBox[{"volume", "[", "cc", "]"}]}]}], ",", " ", "a"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"solns", " ", "=", " ", 
      RowBox[{"Assuming", "[", 
       RowBox[{"a", ",", " ", 
        RowBox[{"Solve", "[", 
         RowBox[{"eqn", ",", " ", "hh"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"soln", " ", "=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{
        RowBox[{"h", " ", "-", " ", 
         RowBox[{"(", 
          RowBox[{"hh", " ", "/.", " ", 
           RowBox[{"First", " ", "@", " ", "solns"}]}], ")"}]}], ",", " ", 
        "a"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"genericConeDepthFromVolume", "[", "]"}], " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{"h", ",", "r", ",", " ", "vol", ",", " ", "soln"}], 
       "}"}]}]}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"genericConeDepthFromVolume", "[", "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"f2890e37-aabd-4a01-8c34-3868c0e1fa8b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", "r_"}], "]"}]}], ",", " ", "v_"}], "]"}], " ", ":=", 
  " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"hh", ",", " ", "rr", ",", " ", "vol", ",", " ", "soln"}], "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"hh", ",", " ", "rr", ",", " ", "vol", ",", " ", "soln"}], 
       "}"}], " ", "=", " ", 
      RowBox[{"genericConeDepthFromVolume", "[", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"soln", "  ", "/.", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"hh", " ", "\[Rule]", " ", "h"}], ",", " ", 
          RowBox[{"rr", " ", "\[Rule]", " ", "r"}], ",", " ", 
          RowBox[{"vol", " ", "\[Rule]", " ", "v"}]}], "}"}]}], ")"}], " ", "//",
       " ", "FullSimplify"}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
      "]"}]}], ",", " ", "v_"}], "]"}], ":=", " ", 
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"toCartesian", " ", "@", " ", "c"}], ",", " ", "v"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"c", ":", 
      RowBox[{"cone", "[", 
       RowBox[{"h_", ",", " ", "\[Beta]_", ",", "\"\<baseangle\>\""}], 
       "]"}]}], ",", " ", "v_"}], "]"}], ":=", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"toCartesian", " ", "@", " ", "c"}], ",", " ", "v"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"h", ",", "r"}], "]"}], ",", " ", "volume"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
      "]"}], ",", " ", "volume"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"h", ",", " ", "\[Beta]", ",", "\"\<baseangle\>\""}], "]"}], 
     ",", " ", "volume"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"b28a6672-c170-4dc0-b84d-7f97d9cc597f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", " ", "r_"}], "]"}]}], ",", " ", "depth_"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{
   RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"hh", ",", "rr"}], "]"}], ",", " ", "dd"}], "]"}], " ", "/.", 
   " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"hh", "\[Rule]", " ", "h"}], ",", " ", 
     RowBox[{"rr", " ", "\[Rule]", " ", "r"}], ",", " ", 
     RowBox[{"dd", " ", "\[Rule]", " ", "depth"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
      "]"}]}], ",", " ", "v_"}], "]"}], ":=", " ", 
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"toCartesian", " ", "@", " ", "c"}], ",", " ", "v"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"c", ":", 
      RowBox[{"cone", "[", 
       RowBox[{"h_", ",", " ", "\[Beta]_", ",", "\"\<baseangle\>\""}], 
       "]"}]}], ",", " ", "v_"}], "]"}], ":=", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"toCartesian", " ", "@", " ", "c"}], ",", " ", "v"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"h", ",", "r"}], "]"}], ",", "depth"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
      "]"}], ",", " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"h", ",", " ", "\[Beta]", ",", "\"\<baseangle\>\""}], "]"}], 
     ",", " ", "depth"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"3e10e391-98be-41fa-86d7-c2e1b93636da"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
      "]"}]}], ",", " ", "depth_"}], "]"}], ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"hRemaining", ",", " ", "eqn", ",", " ", "result"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"hRemaining", " ", "=", " ", 
       RowBox[{"h", " ", "-", "depth"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"eqn", " ", "=", " ", 
       RowBox[{
        RowBox[{"result", " ", "/", " ", "hRemaining"}], " ", "\[Equal]", " ", 
        RowBox[{"Tan", "[", "\[Alpha]", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"result", " ", "/.", " ", 
       RowBox[{"First", " ", "@", " ", 
        RowBox[{"Solve", "[", 
         RowBox[{"eqn", ",", " ", "result"}], "]"}]}]}]}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"h", " ", "-", " ", "depth"}], ")"}], " ", 
     RowBox[{"Tan", "[", "\[Alpha]", "]"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", " ", "r_"}], "]"}]}], ",", " ", "depth_"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"toApexAngled", "[", "c", "]"}], ",", " ", "depth"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"c", ":", 
      RowBox[{"cone", "[", 
       RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
       "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"toApexAngled", "[", "c", "]"}], ",", " ", "depth"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
      "]"}], ",", " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"h", ",", " ", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], 
      "]"}], ",", " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"cone", "[", 
      RowBox[{"h", ",", " ", "r"}], "]"}], ",", " ", "depth"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"c6636688-b185-4c6a-9d45-4820ebf45d3c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing", \
"Subsubsection",ExpressionUUID->"ae33e579-2122-4f97-ab4d-46f0f3ec832e"],

Cell[BoxData[{
 RowBox[{"example", " ", "=", " ", 
  RowBox[{"cone", "[", 
   RowBox[{"2", ",", " ", 
    RowBox[{"\[Pi]", "/", "6"}], ",", " ", "\"\<apexangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"volume", "[", "example", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"volume", "[", "example", "]"}], " ", "//", " ", "N"}]}], " ", 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"depthFromVolume", "[", 
     RowBox[{"example", ",", "v"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"v", ",", " ", "0", ",", " ", 
     RowBox[{"volume", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volumeFromDepth", "[", 
     RowBox[{"example", ",", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<volume\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"radiusFromDepth", "[", 
     RowBox[{"example", ",", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<radius\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}]}], "Input",ExpressionUUID->"0e3171ab-ef8e-4c05-bf51-94bbc9231f19"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Inverted Cone", \
"Subsection",ExpressionUUID->"a64b90a3-0fb2-4e43-9e60-3cebd9a60c87"],

Cell["\<\
Here we explore an inversion of a right circular cone: the point is \
downwards, as it would be for ice-cream.\
\>", "Text",ExpressionUUID->"680404af-aa3b-405a-a526-0eddee4a0844"],

Cell[CellGroupData[{

Cell["Construction & Conversion", \
"Subsubsection",ExpressionUUID->"429a2e9f-ed22-41e0-9ae9-5749bc72e900"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"toCone", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"invert", " ", "@", " ", "c"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCone", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"invert", " ", "@", " ", "c"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toCone", "[", 
    RowBox[{"c", ":", " ", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
      "]"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"invert", " ", "@", " ", "c"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"invert", " ", "@", " ", 
   RowBox[{"toCartesian", " ", "@", " ", 
    RowBox[{"invert", " ", "@", " ", "c"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
     "]"}]}], "]"}], " ", ":=", 
  RowBox[{"invert", " ", "@", " ", 
   RowBox[{"toCartesian", " ", "@", " ", 
    RowBox[{"invert", " ", "@", " ", "c"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toCartesian", "[", 
    RowBox[{"c", ":", " ", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
      "]"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"invert", " ", "@", " ", 
    RowBox[{"toCartesian", " ", "@", " ", 
     RowBox[{"invert", " ", "@", " ", "c"}]}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"invert", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"cone", "[", 
   RowBox[{"h", ",", " ", "r"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"invert", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"cone", "[", 
   RowBox[{"h", ",", "\[Alpha]", ",", "\"\<apexangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"invert", "[", 
    RowBox[{"c", ":", " ", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
      "]"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"cone", "[", 
    RowBox[{"h", ",", "\[Beta]", ",", "\"\<baseangle\>\""}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"invert", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"invertedCone", "[", 
   RowBox[{"h", ",", " ", "r"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"invert", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"cone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"invertedCone", "[", 
   RowBox[{"h", ",", "\[Alpha]", ",", "\"\<apexangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"invert", "[", 
    RowBox[{"c", ":", " ", 
     RowBox[{"cone", "[", 
      RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
      "]"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"invertedCone", "[", 
    RowBox[{"h", ",", "\[Beta]", ",", "\"\<baseangle\>\""}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"scaled", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", "r_"}], "]"}]}], ",", " ", "factor_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"invertedCone", "[", 
   RowBox[{
    RowBox[{"h", " ", "*", " ", "factor"}], ",", " ", 
    RowBox[{"r", " ", "*", " ", "factor"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"scaled", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}], 
    ",", " ", "factor_"}], "]"}], ":=", " ", 
  RowBox[{"toApexAngled", " ", "@", " ", 
   RowBox[{"scaled", "[", 
    RowBox[{
     RowBox[{"toCartesian", " ", "@", " ", "c"}], ",", " ", "factor"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"scaled", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", "\[Beta]_", ",", "\"\<baseangle\>\""}], "]"}]}], ",",
     " ", "factor_"}], "]"}], ":=", 
  RowBox[{"toBaseAngled", " ", "@", " ", 
   RowBox[{"scaled", "[", 
    RowBox[{
     RowBox[{"toCartesian", " ", "@", " ", "c"}], ",", " ", "factor"}], 
    "]"}]}]}]}], \
"Input",ExpressionUUID->"cb530f5b-57ac-491f-b1d8-9e53e5dc12ab"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"scaled", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"h", ",", "r"}], "]"}], ",", " ", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"scaled", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
      "]"}], ",", "2"}], "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"scaled", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"h", ",", " ", "\[Beta]", ",", " ", "baseangle"}], "]"}], ",", 
     "2"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"f63b996c-cd00-4611-96b8-4f0b551b19ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Accessing", \
"Subsubsection",ExpressionUUID->"489c3c73-b457-411d-9e4c-5c0a8cc7c89c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"assumptions", "[", 
   RowBox[{"toCone", " ", "@", " ", "c"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
     "]"}]}], "]"}], ":=", 
  RowBox[{"assumptions", "[", 
   RowBox[{"toCone", " ", "@", " ", "c"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], "]"}]}], 
   "]"}], ":=", 
  RowBox[{"assumptions", "[", 
   RowBox[{"toCone", " ", "@", " ", "c"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"assumptions", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"assumptions", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", " ", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], "]"}],
     "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"f5542b20-341b-4fd8-9897-6fd8eefccfbf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"radius", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", "r_"}], "]"}]}], "]"}], " ", ":=", " ", 
  "r"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"radius", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}], 
   "]"}], " ", ":=", " ", 
  RowBox[{"radius", " ", "@", " ", 
   RowBox[{"invert", " ", "@", " ", "c"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"radius", "[", 
    RowBox[{"c", ":", " ", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
      "]"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"radius", " ", "@", " ", 
    RowBox[{"invert", " ", "@", " ", "c"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", "r_"}], "]"}]}], "]"}], ":=", 
  "h"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}], 
   "]"}], " ", ":=", " ", "h"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", "\[Beta]_", ",", "\"\<baseangle\>\""}], "]"}]}], 
   "]"}], " ", ":=", " ", 
  "h"}]}], "Input",ExpressionUUID->"dc744b19-e444-4da9-bb19-e15e7676a3fb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"apexangle", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"Assuming", "[", 
   RowBox[{
    RowBox[{"assumptions", "[", "c", "]"}], ",", " ", 
    RowBox[{"ArcTan", "[", 
     RowBox[{"h", ",", " ", "r"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"apexangle", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}],
    "]"}], ":=", " ", "\[Alpha]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"apexangle", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", "\[Beta]_", ",", "\"\<baseangle\>\""}], "]"}]}], 
   "]"}], ":=", 
  RowBox[{"complement", "[", 
   RowBox[{"baseangle", "[", "c", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"baseangle", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"Assuming", "[", 
   RowBox[{
    RowBox[{"assumptions", "[", "c", "]"}], ",", " ", 
    RowBox[{"ArcTan", "[", 
     RowBox[{"r", ",", " ", "h"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"baseangle", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}],
    "]"}], ":=", " ", 
  RowBox[{"complement", "[", "\[Alpha]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"baseangle", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", "\[Beta]_", ",", "\"\<baseangle\>\""}], "]"}]}], 
   "]"}], ":=", 
  "\[Beta]"}]}], \
"Input",ExpressionUUID->"38e3ef7b-a2ba-4a6d-817c-f2902c7ac5a5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"apexangle", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", "r"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"apexangle", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", " ", "\[Alpha]", ",", "\"\<apexangle\>\""}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"apexangle", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", " ", "\[Beta]", ",", "\"\<baseangle\>\""}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"baseangle", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", "r"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"baseangle", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", " ", "\[Alpha]", ",", "\"\<apexangle\>\""}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{
    StyleBox["baseangle",
     FontWeight->"Bold"], "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", " ", "\[Beta]", ",", "\"\<baseangle\>\""}], "]"}], 
    "]"}]}], ";"}]}], \
"Input",ExpressionUUID->"ebe56994-73cb-4b9d-a83f-69ef258c8bd9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conversion Redux", \
"Subsubsection",ExpressionUUID->"e5b719cc-42db-452b-be04-b37ed947966a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"toInvertedCone", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  "c"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toInvertedCone", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
     "]"}]}], "]"}], ":=", " ", 
  RowBox[{"invertedCone", "[", 
   RowBox[{"h", ",", " ", 
    RowBox[{"h", " ", 
     RowBox[{"Tan", "[", "\[Alpha]", "]"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toInvertedCone", "[", 
    RowBox[{"c", ":", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
      "]"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"toInvertedCone", "[", 
    RowBox[{"toApexAngled", "[", "c", "]"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"toInvertedCone", " ", "@", " ", "c"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
     "]"}]}], "]"}], ":=", " ", 
  RowBox[{"toInvertedCone", " ", "@", " ", "c"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toCartesian", "[", 
    RowBox[{"c", ":", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
      "]"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"toInvertedCone", " ", "@", " ", "c"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toApexAngled", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"invertedCone", "[", 
   RowBox[{"h", ",", " ", 
    RowBox[{"apexangle", "[", "c", "]"}], ",", " ", "\"\<apexangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toApexAngled", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}], 
   "]"}], ":=", " ", "c"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toApexAngled", "[", 
    RowBox[{"c", ":", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", "\[Beta]_", ",", "\"\<baseangle\>\""}], "]"}]}], 
    "]"}], ":=", " ", 
   RowBox[{"invertedCone", "[", 
    RowBox[{"h", ",", " ", 
     RowBox[{"apexangle", "[", "c", "]"}], ",", " ", "\"\<apexangle\>\""}], 
    "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toBaseAngled", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"invertedCone", "[", 
   RowBox[{"h", ",", " ", 
    RowBox[{"baseangle", "[", "c", "]"}], ",", " ", "\"\<baseangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toBaseAngled", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", "\[Alpha]_", ",", "\"\<apexangle\>\""}], "]"}]}], 
   "]"}], ":=", " ", 
  RowBox[{"invertedCone", "[", 
   RowBox[{"h", ",", " ", 
    RowBox[{"baseangle", "[", "c", "]"}], ",", " ", "\"\<baseangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toBaseAngled", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", "\[Beta]_", ",", "\"\<baseangle\>\""}], "]"}]}], 
   "]"}], ":=", " ", 
  "c"}]}], "Input",ExpressionUUID->"07fe310a-9462-44f1-ae51-cd16bfb0aad1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toInvertedCone", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", "r"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toInvertedCone", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toInvertedCone", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", " ", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], "]"}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toApexAngled", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", "r"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toApexAngled", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toApexAngled", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", " ", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], "]"}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toBaseAngled", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", "r"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toBaseAngled", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toBaseAngled", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", " ", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], "]"}],
     "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"ad13e60d-0bfa-4d2f-be66-588581c8f521"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volume", \
"Subsubsection",ExpressionUUID->"1ae6326f-9092-46be-9bd8-a9753e254b1b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", "r_"}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"volume", " ", "@", " ", 
   RowBox[{"toCone", " ", "@", " ", "c"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
     "]"}]}], "]"}], ":=", " ", 
  RowBox[{"volume", " ", "@", " ", 
   RowBox[{"toCone", " ", "@", " ", "c"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"volume", " ", "@", " ", 
   RowBox[{"toCone", " ", "@", " ", "c"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", "r"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", "\[Alpha]", ",", "\"\<apexangle\>\""}], "]"}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", "[", 
    RowBox[{"invertedCone", "[", 
     RowBox[{"h", ",", "\[Beta]", ",", "\"\<baseangle\>\""}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"c083abed-8bba-4ffd-a0cc-be61d4b6b296"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Height and Depth", \
"Subsubsection",ExpressionUUID->"ff3f47b6-6b93-4744-af0f-058c0af8c6d3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"genericInvertedConeDepthFromVolume", "[", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "c", ",", " ", "h", ",", " ", "\[Alpha]", ",", " ", "hh", ",", " ", 
      "vol", ",", "a", ",", " ", "eqn", ",", " ", "solns", ",", " ", "soln"}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"c", " ", "=", " ", 
      RowBox[{"invertedCone", "[", 
       RowBox[{"h", ",", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"a", " ", "=", " ", 
      RowBox[{
       RowBox[{"assumptions", "[", "c", "]"}], "  ", "&&", " ", 
       RowBox[{"vol", " ", "\[GreaterEqual]", " ", "0"}]}]}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"eqn", " ", "=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{
        RowBox[{"vol", " ", "\[Equal]", " ", 
         RowBox[{"volume", "[", "c", "]"}]}], ",", " ", "a"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"solns", " ", "=", " ", 
      RowBox[{"Assuming", "[", 
       RowBox[{"a", ",", " ", 
        RowBox[{"Solve", "[", 
         RowBox[{"eqn", ",", " ", "h"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"soln", " ", "=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{
        RowBox[{"h", " ", "/.", " ", 
         RowBox[{"solns", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", "a"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"genericInvertedConeDepthFromVolume", "[", "]"}], " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{"\[Alpha]", ",", "vol", ",", "soln"}], "}"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"genericInvertedConeDepthFromVolume", "[", "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"49b86f54-6ad5-4b88-85c7-baf8182d3050"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"invertedCone", "[", 
      RowBox[{
      "ignored_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
      "]"}]}], ",", " ", "v_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\[Alpha]\[Alpha]", ",", " ", "vol", ",", " ", "soln"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\[Alpha]\[Alpha]", ",", " ", "vol", ",", " ", "soln"}], "}"}],
       " ", "=", " ", 
      RowBox[{"genericInvertedConeDepthFromVolume", "[", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"soln", "  ", "/.", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\[Alpha]\[Alpha]", "\[Rule]", "\[Alpha]"}], ",", " ", 
          RowBox[{"vol", "\[Rule]", "v"}]}], "}"}]}], ")"}], " ", "//", " ", 
      "FullSimplify"}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", "r_"}], "]"}]}], ",", " ", "v_"}], "]"}], " ", ":=", 
  " ", 
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"toApexAngled", " ", "@", " ", "c"}], ",", " ", "v"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"c", ":", " ", 
      RowBox[{"invertedCone", "[", 
       RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
       "]"}]}], ",", " ", "v_"}], "]"}], " ", ":=", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"toApexAngled", " ", "@", " ", "c"}], ",", " ", "v"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{
      "ignored", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], "]"}],
      ",", " ", "volume"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"h", ",", "r"}], "]"}], ",", " ", "volume"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"h", ",", " ", "\[Beta]", ",", "\"\<baseangle\>\""}], "]"}], 
     ",", " ", "volume"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"cf711b47-c540-460b-94b2-5428859d1756"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
      "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"hh", ",", "\[Alpha]\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
      "]"}], ",", " ", "dd"}], "]"}], " ", "/.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"hh", "\[Rule]", " ", "h"}], ",", " ", 
     RowBox[{"\[Alpha]\[Alpha]", " ", "\[Rule]", " ", "\[Alpha]"}], ",", " ", 
     RowBox[{"dd", " ", "\[Rule]", " ", "depth"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
      "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"hh", ",", "\[Beta]\[Beta]", ",", " ", "\"\<baseangle\>\""}], 
      "]"}], ",", " ", "dd"}], "]"}], " ", "/.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"hh", "\[Rule]", " ", "h"}], ",", " ", 
     RowBox[{"\[Beta]\[Beta]", " ", "\[Rule]", " ", "\[Beta]"}], ",", " ", 
     RowBox[{"dd", " ", "\[Rule]", " ", "depth"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", " ", "r_"}], "]"}]}], ",", " ", "depth_"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{
   RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"hh", ",", "rr"}], "]"}], ",", " ", "dd"}], "]"}], " ", "/.", 
   " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"hh", "\[Rule]", " ", "h"}], ",", " ", 
     RowBox[{"rr", " ", "\[Rule]", " ", "r"}], ",", " ", 
     RowBox[{"dd", " ", "\[Rule]", " ", "depth"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
      "]"}], ",", " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"h", ",", " ", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], 
      "]"}], ",", " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"h", ",", "r"}], "]"}], ",", " ", "depth"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"e00202a6-4961-4416-b612-b5b07579dab7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", " ", "\[Alpha]_", ",", " ", "\"\<apexangle\>\""}], 
      "]"}]}], ",", " ", "depth_"}], "]"}], ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"eqn", ",", " ", "result"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"eqn", " ", "=", " ", 
       RowBox[{
        RowBox[{"result", " ", "/", " ", "depth"}], " ", "\[Equal]", " ", 
        RowBox[{"Tan", "[", "\[Alpha]", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"result", " ", "/.", " ", 
       RowBox[{"First", " ", "@", " ", 
        RowBox[{"Solve", "[", 
         RowBox[{"eqn", ",", " ", "result"}], "]"}]}]}]}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"depth", " ", 
     RowBox[{"Tan", "[", "\[Alpha]", "]"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"invertedCone", "[", 
      RowBox[{"h_", ",", " ", "r_"}], "]"}]}], ",", " ", "depth_"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"toApexAngled", "[", "c", "]"}], ",", " ", "depth"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"c", ":", 
      RowBox[{"invertedCone", "[", 
       RowBox[{"h_", ",", " ", "\[Beta]_", ",", " ", "\"\<baseangle\>\""}], 
       "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"toApexAngled", "[", "c", "]"}], ",", " ", "depth"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"h", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
      "]"}], ",", " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"h", ",", " ", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], 
      "]"}], ",", " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedCone", "[", 
      RowBox[{"h", ",", " ", "r"}], "]"}], ",", " ", "depth"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"cda09f6f-ee41-4880-bbc7-749cb340b998"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing", \
"Subsubsection",ExpressionUUID->"08fcd502-ddfb-4f05-b00e-ba204084e2e6"],

Cell[BoxData[{
 RowBox[{"example", " ", "=", " ", 
  RowBox[{"invertedCone", "[", 
   RowBox[{"2", ",", " ", 
    RowBox[{"\[Pi]", "/", "6"}], ",", " ", "\"\<apexangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"volume", "[", "example", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"volume", "[", "example", "]"}], " ", "//", " ", "N"}]}], " ", 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"depthFromVolume", "[", 
     RowBox[{"example", ",", "v"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"v", ",", " ", "0", ",", " ", 
     RowBox[{"volume", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volumeFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<volume\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"radiusFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<radius\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}]}], "Input",ExpressionUUID->"eda28cd1-4ea9-4c41-851c-83ef569ccd57"],

Cell[BoxData[{
 RowBox[{"example", " ", "=", " ", 
  RowBox[{"cone", "[", 
   RowBox[{"2", ",", " ", 
    RowBox[{"\[Pi]", "/", "6"}], ",", " ", "\"\<apexangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"volume", "[", "example", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"volume", "[", "example", "]"}], " ", "//", " ", "N"}]}], " ", 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"depthFromVolume", "[", 
     RowBox[{"example", ",", "v"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"v", ",", " ", "0", ",", " ", 
     RowBox[{"volume", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volumeFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<volume\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"radiusFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<radius\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}]}], "Input",ExpressionUUID->"282eb182-df4b-4463-93e5-fc1a32a32034"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Cylinder", \
"Subsection",ExpressionUUID->"268f996d-601e-4c4d-8349-4b98c2192a1a"],

Cell["Cylinders are easy, simple shapes.", \
"Text",ExpressionUUID->"501ae8e8-293d-44cd-bc84-96f638032126"],

Cell[CellGroupData[{

Cell["Accessing", \
"Subsubsection",ExpressionUUID->"9aa74426-8f97-4e1a-a673-b6c6286c20be"],

Cell[BoxData[
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"cylinder", "[", 
    RowBox[{"h_", ",", " ", "r_"}], "]"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"h", " ", ">=", " ", "0"}], " ", "&&", " ", 
   RowBox[{
   "r", " ", ">=", " ", 
    "0"}]}]}]], \
"Input",ExpressionUUID->"6906adab-d37d-4f82-8859-4884ac5c2862"],

Cell[BoxData[
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"assumptions", "[", 
    RowBox[{"cylinder", "[", 
     RowBox[{"h", ",", " ", "r"}], "]"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"c51dab49-73f5-4c22-999d-f648404a5d1b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"emptyCylinder", "[", "]"}], " ", ":=", " ", 
  RowBox[{"cylinder", "[", 
   RowBox[{"0", ",", "0"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cylinder", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  "h"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"radius", "[", 
   RowBox[{"c", ":", 
    RowBox[{"cylinder", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], ":=", " ", 
  "r"}]}], "Input",ExpressionUUID->"544c155e-c8c3-4072-aef6-30d6d63db032"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"cylinder", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], " ", ":=", " ", 
  "c"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toApexAngled", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"cylinder", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], " ", ":=", " ", 
  "c"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toBaseAngled", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"cylinder", "[", 
     RowBox[{"h_", ",", " ", "r_"}], "]"}]}], "]"}], " ", ":=", " ", 
  "c"}]}], "Input",ExpressionUUID->"595bd3d2-27e3-4067-9937-721bcddff9ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volume", \
"Subsubsection",ExpressionUUID->"ad784929-644a-4b85-bcda-e7c523ca7cea"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"volume", "[", 
    RowBox[{"cylinder", "[", 
     RowBox[{"h_", ",", "r_"}], "]"}], "]"}], " ", ":=", " ", 
   RowBox[{"Pi", " ", "r", " ", "r", " ", "h"}]}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", "[", 
    RowBox[{"cylinder", "[", 
     RowBox[{"h", ",", "r"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", " ", "@", " ", 
    RowBox[{"emptyCylinder", "[", "]"}]}]}], 
  ";"}]}], "Input",ExpressionUUID->"5b3bb265-2276-4272-92b2-e591c51ea43e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Height and Depth", \
"Subsubsection",ExpressionUUID->"30b784b4-6156-43b7-bd50-3cb3552d3a14"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"cylinder", "[", 
      RowBox[{"_", ",", "0"}], "]"}]}], ",", " ", "v_"}], "]"}], " ", ":=", 
  " ", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"cylinder", "[", 
      RowBox[{"0", ",", "_"}], "]"}]}], ",", " ", "v_"}], "]"}], " ", ":=", 
  " ", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"cylinder", "[", 
      RowBox[{"_", ",", "r_"}], "]"}]}], ",", " ", "v_"}], "]"}], " ", ":=", 
  " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "hh", "}"}], ",", " ", 
    RowBox[{"hh", " ", "/.", " ", 
     RowBox[{"First", " ", "@", " ", 
      RowBox[{"Solve", "[", 
       RowBox[{
        RowBox[{"v", " ", "\[Equal]", " ", 
         RowBox[{"volume", "[", 
          RowBox[{"cylinder", "[", 
           RowBox[{"hh", ",", "r"}], "]"}], "]"}]}], ",", " ", "hh"}], 
       "]"}]}]}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"cylinder", "[", 
      RowBox[{"ignored", ",", "r"}], "]"}], ",", " ", "volume"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"cylinder", "[", 
      RowBox[{"1", ",", "2"}], "]"}], ",", " ", "volume"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"emptyCylinder", "[", "]"}], ",", " ", "volume"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"ef46489a-deb5-41fa-888c-f96402496143"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"cylinder", "[", 
      RowBox[{"h_", ",", " ", "r_"}], "]"}]}], ",", " ", "depth_"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{
   RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
    RowBox[{
     RowBox[{"cylinder", "[", 
      RowBox[{"hh", ",", "rr"}], "]"}], ",", " ", "dd"}], "]"}], " ", "/.", 
   " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"hh", "\[Rule]", "h"}], ",", " ", 
     RowBox[{"rr", "\[Rule]", "r"}], ",", " ", 
     RowBox[{"dd", "\[Rule]", " ", "depth"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"cylinder", "[", 
      RowBox[{"h", ",", "r"}], "]"}], ",", " ", "depth"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"dceaf8ec-59ed-4a13-a1a7-e094d2a61301"],

Cell[BoxData[
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"cylinder", "[", 
      RowBox[{"h_", ",", " ", "r_"}], "]"}]}], ",", " ", "depth_"}], "]"}], 
  " ", ":=", " ", 
  "r"}]], "Input",ExpressionUUID->"33af20d4-9438-44d3-bb14-201c11669413"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing", \
"Subsubsection",ExpressionUUID->"05307345-4a74-4a9d-9988-54cf1a0e2b68"],

Cell[BoxData[{
 RowBox[{"example", " ", "=", " ", 
  RowBox[{"cylinder", "[", 
   RowBox[{"4", ",", " ", "2"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"volume", "[", "example", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"volume", "[", "example", "]"}], " ", "//", " ", "N"}]}], " ", 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"depthFromVolume", "[", 
     RowBox[{"example", ",", "v"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"v", ",", " ", "0", ",", " ", 
     RowBox[{"volume", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volumeFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<volume\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"radiusFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<radius\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}]}], "Input",ExpressionUUID->"645760b4-e03e-4f17-9d9a-58f468eb9693"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Right Conical Frustum", \
"Subsection",ExpressionUUID->"e49bc361-322b-49a0-9324-adfcdc3a1faa"],

Cell["\<\
A right conical frustum is a truncated right circular cone, where the plane \
of truncation is parallel to the plane of the cone base (and at right angles \
to the cone axis).\
\>", "Text",ExpressionUUID->"8ad939e1-9a79-403b-9d5c-2deae7d8ac4d"],

Cell[CellGroupData[{

Cell["Accessing", \
"Subsubsection",ExpressionUUID->"43b8a553-f599-44d8-9adb-205ffb2b5cd0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"frustum", "[", 
    RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}], "]"}], " ",
   ":=", " ", 
  RowBox[{
   RowBox[{"h", "\[GreaterEqual]", "0"}], " ", "&&", " ", 
   RowBox[{"rbig", " ", "\[GreaterEqual]", " ", "0"}], " ", "&&", " ", 
   RowBox[{"rsmall", " ", "\[GreaterEqual]", " ", "0"}], " ", "&&", " ", 
   RowBox[{"rbig", " ", ">", " ", "rsmall"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"frustum", "[", 
    RowBox[{
    "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
     "\"\<apexangle\>\""}], "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"FullSimplify", " ", "@", " ", 
   RowBox[{"assumptions", "[", 
    RowBox[{"frustum", "[", 
     RowBox[{"h", ",", " ", "rbig", ",", " ", 
      RowBox[{"complement", "[", "\[Alpha]", "]"}], ",", " ", 
      "\"\<baseangle\>\""}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"frustum", "[", 
    RowBox[{
    "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
     "\"\<baseangle\>\""}], "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"h", "\[GreaterEqual]", "0"}], " ", "&&", " ", 
    RowBox[{"rbig", "\[GreaterEqual]", " ", "0"}], " ", "&&", " ", 
    RowBox[{"\[Beta]", " ", ">", " ", "0"}], " ", "&&", " ", 
    RowBox[{"\[Beta]", " ", "<", " ", 
     RowBox[{"\[Pi]", "/", "2"}]}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"489c2a11-40a4-4d7f-b280-e3eb125ede08"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"assumptions", "[", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h", ",", " ", "rbig", ",", " ", "\[Alpha]", ",", " ", 
      "\"\<apexangle\>\""}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"assumptions", "[", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h", ",", " ", "rbig", ",", " ", "\[Beta]", ",", " ", 
      "\"\<baseangle\>\""}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"3d87902f-589b-49bf-a49a-1a208098175b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"apexangle", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], ":=", " ", 
  "\[Alpha]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"apexangle", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], ":=", 
  RowBox[{"complement", "[", 
   RowBox[{"baseangle", "[", "f", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"apexangle", "[", 
    RowBox[{"f", ":", 
     RowBox[{"frustum", "[", 
      RowBox[{"h_", ",", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], ":=", 
   RowBox[{"Assuming", "[", 
    RowBox[{
     RowBox[{"assumptions", "[", "f", "]"}], ",", " ", 
     RowBox[{"ArcTan", "[", 
      RowBox[{"h", ",", " ", 
       RowBox[{"rbig", "-", "rsmall"}]}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"baseangle", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"complement", "[", " ", 
   RowBox[{"apexangle", "[", "f", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"baseangle", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "\[Beta]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"baseangle", "[", 
    RowBox[{"f", ":", " ", 
     RowBox[{"frustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"Assuming", "[", 
    RowBox[{
     RowBox[{"assumptions", "[", "f", "]"}], ",", " ", 
     RowBox[{"ArcTan", "[", 
      RowBox[{
       RowBox[{"rbig", "-", "rsmall"}], ",", " ", "h"}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"baseangle", "[", 
    RowBox[{"f", ":", " ", 
     RowBox[{"frustum", "[", 
      RowBox[{"h_", ",", "rbig_", ",", 
       RowBox[{"rbig_", "-", 
        RowBox[{"h_", " ", 
         RowBox[{"Cot", "[", "\[Beta]_", "]"}]}]}]}], "]"}]}], "]"}], " ", ":=",
    " ", "\[Beta]"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"apexangle", "[", 
    RowBox[{"frustum", "[", 
     RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"baseangle", "[", 
    RowBox[{"frustum", "[", 
     RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"{", " ", 
    RowBox[{
     RowBox[{"baseangle", "[", 
      RowBox[{"frustum", "[", 
       RowBox[{"1", ",", " ", "3", ",", " ", "2"}], "]"}], "]"}], ",", " ", 
     RowBox[{"baseangle", "[", 
      RowBox[{"frustum", "[", 
       RowBox[{
        RowBox[{"Sqrt", "[", "3", "]"}], ",", " ", "2", ",", " ", "1"}], 
       "]"}], "]"}]}], "}"}]}], 
  ";"}]}], "Input",ExpressionUUID->"6e23e0d6-8580-45d2-85ef-f6dbc1d06acf"],

Cell[BoxData[{
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"rbig", " ", "-", " ", "rsmall"}], ")"}], " ", "/", " ", "h"}], 
    " ", "\[Equal]", " ", 
    RowBox[{"Tan", "[", "\[Alpha]", "]"}]}], ",", " ", "rsmall"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"rbig", " ", "-", " ", "rsmall"}], ")"}], " ", "/", " ", "h"}], 
    " ", "\[Equal]", " ", 
    RowBox[{"Tan", "[", "\[Alpha]", "]"}]}], ",", " ", "rbig"}], 
  "]"}]}], "Input",ExpressionUUID->"4339313c-3074-4176-8abd-0da5c5e63698"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"rbig", "[", 
   RowBox[{
   "h_", ",", " ", "rsmall_", ",", " ", "\[Alpha]_", ",", " ", 
    "\"\<apexangle\>\""}], "]"}], " ", ":=", " ", 
  RowBox[{"rsmall", " ", "+", " ", 
   RowBox[{"h", " ", 
    RowBox[{"Tan", "[", "\[Alpha]", "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rsmall", "[", 
   RowBox[{
   "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
    "\"\<apexangle\>\""}], "]"}], " ", ":=", " ", 
  RowBox[{"rbig", " ", "-", " ", 
   RowBox[{"h", " ", 
    RowBox[{"Tan", "[", "\[Alpha]", "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rbig", "[", 
   RowBox[{
   "h_", ",", " ", "rsmall_", ",", " ", "\[Beta]_", ",", " ", 
    "\"\<baseangle\>\""}], "]"}], " ", ":=", " ", 
  RowBox[{"rbig", "[", 
   RowBox[{"h", ",", " ", "rsmall", ",", " ", 
    RowBox[{"complement", "[", "\[Beta]", "]"}], ",", " ", 
    "\"\<apexangle\>\""}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rsmall", "[", 
   RowBox[{
   "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
    "\"\<baseangle\>\""}], "]"}], " ", ":=", " ", 
  RowBox[{"rsmall", "[", 
   RowBox[{"h", ",", " ", "rsmall", ",", " ", 
    RowBox[{"complement", "[", "\[Beta]", "]"}], ",", " ", 
    "\"\<apexangle\>\""}], 
   "]"}]}]}], "Input",ExpressionUUID->"03506145-093e-4b01-a00b-191b249b78bb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "h"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "h"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", 
  "h"}]}], "Input",ExpressionUUID->"03d53029-ebfc-4a96-b195-601c09f39c4f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"rbig", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "rbig"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rbig", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "rbig"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rbig", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", 
  "rbig"}]}], "Input",ExpressionUUID->"c324bef0-1083-4154-98de-07fd3dbf41ca"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Tan", "[", "\[Alpha]", "]"}], " ", "/", " ", 
   RowBox[{"Cot", "[", 
    RowBox[{"complement", "[", "\[Alpha]", "]"}], "]"}]}], " ", "\[Equal]", 
  " ", "1"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rsmall", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Assuming", "[", 
   RowBox[{
    RowBox[{"assumptions", "[", "f", "]"}], ",", " ", 
    RowBox[{"rsmall", "[", 
     RowBox[{
     "h", ",", " ", "rbig", ",", " ", "\[Alpha]", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rsmall", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Assuming", "[", 
   RowBox[{
    RowBox[{"assumptions", "[", "f", "]"}], ",", " ", 
    RowBox[{"rsmall", "[", 
     RowBox[{
     "h", ",", " ", "rbig", ",", " ", "\[Beta]", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rsmall", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", "rsmall"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rsmall", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{"h_", ",", "rbig_", ",", 
      RowBox[{"ArcTan", "[", 
       RowBox[{
        RowBox[{"rbig_", "-", "rsmall_"}], ",", "h_"}], "]"}], ",", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "rsmall"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"rsmall", "[", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h", ",", "rbig", ",", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"rsmall", "[", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h", ",", "rbig", ",", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], "]"}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"rsmall", "[", 
    RowBox[{"frustum", "[", 
     RowBox[{"h", ",", "rbig", ",", "rsmall"}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"0f0b9eda-12cd-45a1-9f0d-b134567af187"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Construction & Conversion", \
"Subsubsection",ExpressionUUID->"fcff828c-bb16-4164-a190-488e96d7694b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"toFrustum", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"frustum", "[", 
   RowBox[{"h", ",", "rbig", ",", 
    RowBox[{"rsmall", "[", "f", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toFrustum", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"frustum", "[", 
   RowBox[{"h", ",", "rbig", ",", 
    RowBox[{"rsmall", "[", "f", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toFrustum", "[", 
    RowBox[{"f", ":", " ", 
     RowBox[{"frustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
   " ", ":=", " ", "f"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"toFrustum", " ", "@", " ", "f"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"toFrustum", " ", "@", " ", "f"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toCartesian", "[", 
    RowBox[{"f", ":", " ", 
     RowBox[{"frustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"toFrustum", " ", "@", " ", "f"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toApexAngled", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "f"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toApexAngled", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"frustum", "[", 
   RowBox[{"h", ",", " ", "rbig", ",", " ", 
    RowBox[{"complement", "[", "\[Beta]", "]"}], ",", " ", 
    "\"\<apexangle\>\""}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toApexAngled", "[", 
    RowBox[{"f", ":", 
     RowBox[{"frustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"frustum", "[", 
    RowBox[{"h", ",", " ", "rbig", ",", " ", 
     RowBox[{"apexangle", "[", "f", "]"}], ",", " ", "\"\<apexangle\>\""}], 
    "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toBaseAngled", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", 
  RowBox[{"frustum", "[", 
   RowBox[{"h", ",", " ", "rbig", ",", " ", 
    RowBox[{"complement", "[", "\[Alpha]", "]"}], ",", " ", 
    "\"\<baseangle\>\""}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toBaseAngled", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "f"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toBaseAngled", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"frustum", "[", 
   RowBox[{"h", ",", " ", "rbig", ",", " ", 
    RowBox[{"baseangle", "[", "f", "]"}], ",", " ", "\"\<baseangle\>\""}], 
   "]"}]}]}], "Input",ExpressionUUID->"29e42e1e-cb99-4413-b621-03727087be8d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toCartesian", " ", "@", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h", ",", " ", "rbig", ",", " ", "\[Beta]", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toBaseAngled", " ", "@", " ", "%"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toApexAngled", " ", "@", " ", "%%"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toFrustum", " ", "@", "  ", "%"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toBaseAngled", " ", "@", "  ", "%%"}]}], 
  ";"}]}], "Input",ExpressionUUID->"38b7c5a4-e070-416e-ad4c-877c18c50cf9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toBaseAngled", " ", "@", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toCartesian", " ", "@", " ", "%"}]}], 
  ";"}]}], "Input",ExpressionUUID->"368feb84-cda9-4cb8-80f4-ae631e545ed3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volume", \
"Subsubsection",ExpressionUUID->"d54a95d2-c602-4270-b8d7-6cb9baf5c291"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"genericConeHeightCartesianFrustum", "[", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "f", ",", " ", "h", ",", " ", "rbig", ",", " ", "rsmall", ",", " ", 
       "eqn", ",", " ", "ch"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"f", " ", "=", " ", 
       RowBox[{"frustum", "[", 
        RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"eqn", " ", "=", " ", 
       RowBox[{
        RowBox[{"ch", " ", "/", " ", "rbig"}], " ", "\[Equal]", " ", 
        RowBox[{"h", " ", "/", " ", 
         RowBox[{"(", 
          RowBox[{"rbig", " ", "-", " ", "rsmall"}], ")"}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"genericConeHeightCartesianFrustum", "[", "]"}], " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall", ",", " ", 
         RowBox[{"ch", " ", "/.", " ", 
          RowBox[{"First", " ", "@", " ", 
           RowBox[{"Solve", "[", 
            RowBox[{"eqn", ",", " ", "ch"}], "]"}]}]}]}], "}"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coneHeight", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], ":=", 
  RowBox[{"rbig", " ", "/", " ", 
   RowBox[{"Tan", "[", "\[Alpha]", "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coneHeight", "[", 
    RowBox[{"f", ":", 
     RowBox[{"frustum", "[", 
      RowBox[{
      "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
       "\"\<baseangle\>\""}], "]"}]}], "]"}], ":=", 
   RowBox[{"rbig", " ", "/", " ", 
    RowBox[{"Cot", "[", "\[Beta]", "]"}]}]}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coneHeight", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"hh", ",", " ", "rrbig", ",", " ", "rrsmall", ",", " ", "ch"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"hh", ",", " ", "rrbig", ",", " ", "rrsmall", ",", " ", "ch"}],
        "}"}], " ", "=", " ", 
      RowBox[{"genericConeHeightCartesianFrustum", "[", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ch", " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"hh", " ", "\[Rule]", " ", "h"}], ",", " ", 
        RowBox[{"rrbig", " ", "\[Rule]", " ", "rbig"}], ",", " ", 
        RowBox[{"rrsmall", " ", "\[Rule]", " ", "rsmall"}]}], "}"}]}]}]}], 
   " ", "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"coneHeight", "[", 
    RowBox[{"frustum", "[", 
     RowBox[{"h", ",", "rbig", ",", "\[Alpha]", ",", "\"\<apexangle\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"coneHeight", "[", 
    RowBox[{"frustum", "[", 
     RowBox[{"h", ",", "rbig", ",", "\[Beta]", ",", "\"\<baseangle\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toApexAngled", " ", "@", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{"h", ",", "rbig", ",", "\[Beta]", ",", "\"\<baseangle\>\""}], 
     "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"coneHeight", "@", " ", "%"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"coneHeight", "[", 
    RowBox[{"frustum", "[", 
     RowBox[{"h", ",", "rbig", ",", "rsmall"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"coneHeight", "[", 
    RowBox[{"frustum", "[", 
     RowBox[{"1", ",", " ", "3", ",", " ", "2"}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"50ade1b7-e803-4726-a3a1-973d21c77ab6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"fullCone", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"cone", "[", 
   RowBox[{
    RowBox[{"coneHeight", "[", "f", "]"}], ",", " ", "\[Alpha]", ",", 
    "\"\<apexangle\>\""}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fullCone", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"fullCone", " ", "@", " ", 
   RowBox[{"toApexAngled", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fullCone", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"cone", "[", 
   RowBox[{
    RowBox[{"coneHeight", "[", "f", "]"}], ",", " ", "rbig"}], 
   "]"}]}]}], "Input",ExpressionUUID->"cdeea2b3-8dcd-4879-a6a9-e5e868cc1619"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"topCone", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"cone", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"coneHeight", "[", "f", "]"}], "-", "h"}], ",", " ", "\[Alpha]", 
    ",", "\"\<apexangle\>\""}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"topCone", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"topCone", " ", "@", " ", 
   RowBox[{"toApexAngled", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"topCone", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"full", ",", " ", "eqn", ",", " ", "scale", ",", " ", "result"}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"full", " ", "=", " ", 
      RowBox[{"fullCone", "[", "f", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"scaled", "[", 
       RowBox[{"full", ",", " ", "scale"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"eqn", " ", "=", " ", 
      RowBox[{
       RowBox[{"radius", "[", "result", "]"}], " ", "\[Equal]", " ", 
       "rsmall"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"result", " ", "/.", " ", 
      RowBox[{"First", " ", "@", " ", 
       RowBox[{"Solve", "[", 
        RowBox[{"eqn", ",", " ", "scale"}], "]"}]}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"topCone", "[", 
    RowBox[{"frustum", "[", 
     RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"a456ebc9-d20f-41dc-82b2-e6fd224f024c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"volume", "[", 
     RowBox[{"fullCone", "[", "f", "]"}], "]"}], "-", 
    RowBox[{"volume", "[", 
     RowBox[{"topCone", "[", "f", "]"}], "]"}]}], " ", "//", " ", 
   "FullSimplify"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"volume", "[", 
     RowBox[{"fullCone", "[", "f", "]"}], "]"}], "-", 
    RowBox[{"volume", "[", 
     RowBox[{"topCone", "[", "f", "]"}], "]"}]}], " ", "//", " ", 
   "FullSimplify"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"volume", " ", "@", " ", 
   RowBox[{
   "toApexAngled", "[", "f", 
    "]"}]}]}]}], \
"Input",ExpressionUUID->"151660bd-05b9-4f47-bae5-d60eacd767d7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"compare", " ", "to", " ", "textbook", " ", "answer", " ", 
    FractionBox["1", "3"], " ", "h", " ", "\[Pi]", " ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["r1", "2"], "+", 
      RowBox[{"r1", " ", "r2"}], "+", 
      SuperscriptBox["r2", "2"]}], ")"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"test", " ", "@", " ", 
     RowBox[{"volume", "[", 
      RowBox[{"frustum", "[", 
       RowBox[{"h", ",", "r1", ",", "r2"}], "]"}], "]"}]}], ";"}], " ", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"test", " ", "@", " ", 
     RowBox[{"volume", "[", 
      RowBox[{"frustum", "[", 
       RowBox[{"h", ",", "r", ",", "\[Alpha]", ",", "\"\<apexangle\>\""}], 
       "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"test", " ", "@", " ", 
     RowBox[{"volume", "[", 
      RowBox[{"toFrustum", " ", "@", " ", 
       RowBox[{"frustum", "[", 
        RowBox[{"h", ",", "r", ",", "\[Alpha]", ",", "\"\<apexangle\>\""}], 
        "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"%", " ", "/", " ", "%%"}], " ", "//", " ", "FullSimplify"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"test", " ", "@", " ", 
     RowBox[{"volume", "[", 
      RowBox[{"frustum", "[", 
       RowBox[{
       "h", ",", " ", "r", ",", " ", "\[Beta]", ",", "\"\<baseangle\>\""}], 
       "]"}], "]"}]}], 
    ";"}]}]}]], "Input",ExpressionUUID->"20ad7c34-c981-48f0-b1ad-ff0dc60f43d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Height and Depth: Angled", \
"Subsubsection",ExpressionUUID->"44a527b7-05dc-4f7a-b6c8-673330f82736"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"genericFrustumDepthFromVolumeApex", "[", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "f", ",", " ", "h", ",", " ", "rbig", ",", " ", "\[Alpha]", ",", " ", 
      "vol", ",", "a", ",", " ", "eqn", ",", " ", "solns", ",", " ", 
      "depth"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "conjures", " ", "up", " ", "a", " ", "soln", " ", "with", " ", 
      "varaibles", " ", "known", " ", "to", " ", "be", " ", "free"}], " ", 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"f", " ", "=", " ", 
      RowBox[{"frustum", "[", 
       RowBox[{
       "h", ",", "rbig", ",", " ", "\[Alpha]", ",", " ", 
        "\"\<apexangle\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"a", " ", "=", " ", 
      RowBox[{
       RowBox[{"assumptions", "[", "f", "]"}], " ", "&&", " ", 
       RowBox[{"vol", " ", "\[GreaterEqual]", " ", "0"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"eqn", " ", "=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{
        RowBox[{"vol", " ", "\[Equal]", " ", 
         RowBox[{"volume", "[", "f", "]"}]}], ",", " ", "a"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"solns", " ", "=", " ", 
      RowBox[{"Assuming", "[", 
       RowBox[{"a", ",", " ", 
        RowBox[{"Solve", "[", 
         RowBox[{"eqn", ",", " ", "h"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"depth", " ", "=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{
        RowBox[{"h", " ", "/.", " ", 
         RowBox[{"First", " ", "@", " ", "solns"}]}], ",", " ", "a"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"genericFrustumDepthFromVolume1", "[", "]"}], " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
       "h", ",", " ", "rbig", ",", " ", "\[Alpha]", ",", " ", "vol", ",", " ",
         "depth"}], "}"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"genericFrustumDepthFromVolumeApex", "[", "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"5dbfc950-9a56-4971-ba88-d66729d461db"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"frustum", "[", 
      RowBox[{
      "ignored_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
       "\"\<apexangle\>\""}], "]"}]}], ",", " ", "vol_"}], "]"}], " ", ":=", 
  " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "hh", ",", " ", "rr", ",", " ", "\[Alpha]\[Alpha]", ",", " ", "vv", ",", 
      "eqn", ",", " ", "depth"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "hh", ",", " ", "rr", ",", " ", "\[Alpha]\[Alpha]", ",", " ", "vv", 
        ",", " ", "depth"}], "}"}], "=", 
      RowBox[{"genericFrustumDepthFromVolumeApex", "[", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"depth", " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"rr", "\[Rule]", "rbig"}], ",", " ", 
        RowBox[{"\[Alpha]\[Alpha]", "\[Rule]", "\[Alpha]"}], ",", " ", 
        RowBox[{"vv", "\[Rule]", "vol"}]}], "}"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"generalApexFrustum", " ", "=", " ", 
  RowBox[{"frustum", "[", 
   RowBox[{
   "h", ",", " ", "rbig", ",", " ", "\[Alpha]", ",", " ", 
    "\"\<apexangle\>\""}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"generalApexFrustum", ",", " ", "vol"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"74dc6d1d-417f-4e47-ae2a-64864eb276a0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"frustum", "[", 
      RowBox[{
      "ignored_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
       "\"\<baseangle\>\""}], "]"}]}], ",", " ", "vol_"}], "]"}], " ", ":=", 
  "  ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "hh", ",", " ", "rr", ",", " ", "\[Alpha]\[Alpha]", ",", " ", "vv", ",", 
      "eqn", ",", " ", "soln"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "hh", ",", " ", "rr", ",", " ", "\[Alpha]\[Alpha]", ",", " ", "vv", 
        ",", " ", "soln"}], "}"}], "=", 
      RowBox[{"genericFrustumDepthFromVolumeApex", "[", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"soln", " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"rr", "\[Rule]", "rbig"}], ",", " ", 
        RowBox[{"\[Alpha]\[Alpha]", "\[Rule]", 
         RowBox[{"apexangle", "[", "f", "]"}]}], ",", " ", 
        RowBox[{"vv", "\[Rule]", "vol"}]}], "}"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"generalBaseFrustum", " ", "=", " ", 
  RowBox[{"frustum", "[", 
   RowBox[{
   "h", ",", " ", "rbig", ",", " ", "\[Beta]", ",", " ", 
    "\"\<baseangle\>\""}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"generalBaseFrustum", ",", " ", "vol"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"6432cfe7-9db1-4d4b-9570-5ebfb2d1caa9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Height and Depth: Cartesian", \
"Subsubsection",ExpressionUUID->"6fc79875-6565-45e4-b956-17dd1d82f4de"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"genericFrustumDepthFromVolumeCartesian", "[", "]"}], " ", ":=", 
  " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "f", ",", " ", "ch", ",", " ", "fullf", ",", " ", "topf", ",", " ", 
      "scaledTop", ",", " ", "scale", ",", " ", "h", ",", " ", "rbig", ",", 
      " ", "rsmall", ",", " ", "vol", ",", " ", "a", ",", " ", "eqn", ",", 
      " ", "solns", ",", " ", "soln", ",", " ", "depth"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"f", " ", "=", " ", 
      RowBox[{"frustum", "[", 
       RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"fullf", " ", "=", " ", 
      RowBox[{"fullCone", "[", "f", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"topf", " ", "=", " ", 
      RowBox[{"topCone", "[", "f", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"scaledTop", " ", "=", " ", 
      RowBox[{"scaled", "[", 
       RowBox[{"topf", ",", " ", "scale"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"a", " ", "=", " ", 
      RowBox[{
       RowBox[{"assumptions", "[", "fullf", "]"}], " ", "&&", " ", 
       RowBox[{"assumptions", "[", "scaledTop", "]"}], " ", "&&", " ", 
       RowBox[{"vol", " ", "\[GreaterEqual]", " ", "0"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"eqn", " ", "=", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"volume", "[", "fullf", "]"}], " ", "-", " ", 
         RowBox[{"volume", "[", "scaledTop", "]"}]}], ")"}], " ", "\[Equal]", 
       " ", "vol"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"solns", " ", "=", " ", 
      RowBox[{"Assuming", "[", 
       RowBox[{"a", ",", " ", 
        RowBox[{"Solve", "[", 
         RowBox[{"eqn", ",", " ", "scale"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"soln", " ", "=", " ", 
      RowBox[{"solns", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
     RowBox[{"depth", " ", "=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"height", "[", "fullf", "]"}], " ", "-", " ", 
           RowBox[{"height", "[", "scaledTop", "]"}]}], ")"}], " ", "/.", " ",
          "soln"}], " ", ",", " ", "a"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"genericFrustumDepthFromVolumeCartesian", "[", "]"}], " ", "=", 
      " ", 
      RowBox[{"{", " ", 
       RowBox[{
       "h", ",", " ", "rbig", ",", " ", "rsmall", ",", " ", "vol", ",", " ", 
        "depth"}], " ", "}"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"genericFrustumDepthFromVolumeCartesian", "[", "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"f0eed134-b003-4e87-b689-c0ceab30f856"],

Cell["\<\
We compute depth from volume two different ways, then show they\
\[CloseCurlyQuote]re the same. We then choose for use the version that avoids \
trigonometry (in the apex-angled conversion).\
\>", "Text",ExpressionUUID->"1a18cf9b-816c-417f-9b59-dfedce084714"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"depthFromVolume1", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"frustum", "[", 
      RowBox[{"ignored_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], 
    ",", " ", "vol_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "hh", ",", " ", "rr", ",", " ", "\[Alpha]\[Alpha]", ",", " ", "vv", ",", 
      "eqn", ",", " ", "depth"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "hh", ",", " ", "rr", ",", " ", "\[Alpha]\[Alpha]", ",", " ", "vv", 
        ",", " ", "depth"}], "}"}], "=", 
      RowBox[{"genericFrustumDepthFromVolumeApex", "[", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"depth", " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"rr", "\[Rule]", "rbig"}], ",", " ", 
        RowBox[{"\[Alpha]\[Alpha]", "\[Rule]", 
         RowBox[{"apexangle", "[", "f", "]"}]}], ",", " ", 
        RowBox[{"vv", "\[Rule]", "vol"}]}], "}"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"depthFromVolume2", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"frustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], ",", 
    " ", "vol_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "hh", ",", " ", "rrbig", ",", " ", "rrsmall", ",", " ", "vv", ",", "eqn",
       ",", " ", "depth"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", " ", 
       RowBox[{
       "hh", ",", " ", "rrbig", ",", " ", "rrsmall", ",", " ", "vv", ",", " ",
         "depth"}], " ", "}"}], " ", "=", " ", 
      RowBox[{"genericFrustumDepthFromVolumeCartesian", "[", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"depth", " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"hh", " ", "\[Rule]", " ", "h"}], ",", " ", 
        RowBox[{"rrbig", " ", "\[Rule]", " ", "rbig"}], ",", " ", 
        RowBox[{"rrsmall", " ", "\[Rule]", " ", "rsmall"}], ",", " ", 
        RowBox[{"vv", " ", "\[Rule]", " ", "vol"}]}], " ", "}"}]}]}]}], " ", 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"generalFrustum", " ", "=", " ", 
  RowBox[{"frustum", "[", 
   RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume1", "[", 
    RowBox[{"generalFrustum", ",", " ", "vol"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume2", "[", 
    RowBox[{"generalFrustum", ",", " ", "vol"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"d", " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{"rbig", " ", "-", " ", "rsmall"}], ")"}]}], ",", " ", 
     RowBox[{"r1", " ", "=", " ", "%%"}], ",", " ", 
     RowBox[{"r2", " ", "=", "%"}], ",", " ", "fn", ",", " ", "rules"}], 
    "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"rules", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"rbig", "^", "3"}], " ", "\[Rule]", " ", "t1"}], ",", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"rbig", " ", "-", " ", "rsmall"}], ")"}], " ", "\[Rule]", 
        " ", "t2"}], ",", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "rbig"}], " ", "+", " ", "rsmall"}], ")"}], " ", 
        "\[Rule]", " ", 
        RowBox[{"-", "t2"}]}], ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "3"}], " ", "t2", " ", 
         RowBox[{"vol", " ", "/", "Pi"}]}], " ", "\[Rule]", " ", "t3"}]}], 
      "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"fn", " ", "=", " ", 
     RowBox[{"Function", "[", 
      RowBox[{"r", ",", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Expand", "[", 
              RowBox[{
               RowBox[{"-", "r"}], " ", "*", " ", "d"}], "]"}], " ", "+", " ", 
             RowBox[{"h", " ", "rbig"}]}], ")"}], " ", "//.", " ", "rules"}], 
          ")"}], " ", ")"}], "^", "3"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"fn", "[", "r1", "]"}], " ", "/", " ", 
      RowBox[{"fn", "[", "r2", "]"}]}], " ", "//", " ", "FullSimplify"}]}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"frustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], ",", 
    " ", "vol_"}], "]"}], " ", ":=", " ", 
  RowBox[{"depthFromVolume2", "[", 
   RowBox[{"f", ",", " ", "vol"}], 
   "]"}]}]}], "Input",ExpressionUUID->"c442ce4a-c298-4e09-bb63-0d154d36a9f8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volume from Depth", \
"Subsubsection",ExpressionUUID->"6383a0a3-a5ca-4150-bdec-2002d947ab90"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"f", ":", " ", 
     RowBox[{"frustum", "[", 
      RowBox[{
      "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", 
       "\"\<apexangle\>\""}], "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{
   RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
    RowBox[{
     RowBox[{"frustum", "[", 
      RowBox[{
      "hh", ",", "rrBig", ",", " ", "\[Alpha]\[Alpha]", ",", 
       "\"\<apexangle\>\""}], "]"}], ",", "dd"}], "]"}], " ", "/.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"hh", "\[Rule]", "h"}], ",", " ", 
     RowBox[{"rrBig", "\[Rule]", "rbig"}], ",", " ", 
     RowBox[{"\[Alpha]\[Alpha]", " ", "\[Rule]", " ", "\[Alpha]"}], ",", " ", 
     RowBox[{"dd", "\[Rule]", " ", "depth"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"f", ":", " ", 
     RowBox[{"frustum", "[", 
      RowBox[{
      "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
       "\"\<baseangle\>\""}], "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{
   RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
    RowBox[{
     RowBox[{"frustum", "[", 
      RowBox[{
      "hh", ",", "rrBig", ",", " ", "\[Beta]\[Beta]", ",", " ", 
       "\"\<baseangle\>\""}], "]"}], ",", "dd"}], "]"}], " ", "/.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"hh", "\[Rule]", "h"}], ",", " ", 
     RowBox[{"rrBig", "\[Rule]", "rbig"}], ",", " ", 
     RowBox[{"\[Beta]\[Beta]", " ", "\[Rule]", " ", "\[Beta]"}], ",", " ", 
     RowBox[{"dd", "\[Rule]", " ", "depth"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"f", ":", " ", 
      RowBox[{"frustum", "[", 
       RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], ",", 
     " ", "depth_"}], "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
     RowBox[{
      RowBox[{"frustum", "[", 
       RowBox[{"hh", ",", "rrBig", ",", "rrSmall"}], "]"}], ",", "dd"}], 
     "]"}], " ", "/.", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"hh", "\[Rule]", "h"}], ",", " ", 
      RowBox[{"rrBig", "\[Rule]", "rbig"}], ",", " ", 
      RowBox[{"rrSmall", "\[Rule]", " ", "rsmall"}], ",", " ", 
      RowBox[{"dd", "\[Rule]", " ", "depth"}]}], "}"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"frustum", "[", 
      RowBox[{
      "h", ",", " ", "rbig", ",", " ", "\[Alpha]", ",", " ", 
       "\"\<apexangle\>\""}], "]"}], ",", " ", "depth"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"frustum", "[", 
      RowBox[{
      "h", ",", " ", "rbig", ",", " ", "\[Beta]", ",", "\"\<baseangle\>\""}], 
      "]"}], ",", " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"frustum", "[", 
      RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}], ",", " ", 
     "depth"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"16419e09-8c12-49e3-b2df-2b8fb72bb598"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Radius from Depth", \
"Subsubsection",ExpressionUUID->"abbae4be-be80-48ac-b8de-ac459641fbfc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"frustum", "[", 
      RowBox[{
      "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
       "\"\<baseangle\>\""}], "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"eqn", ",", " ", "result"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"eqn", " ", "=", " ", 
       RowBox[{
        RowBox[{"depth", " ", "/", " ", 
         RowBox[{"(", 
          RowBox[{"rbig", " ", "-", " ", "result"}], ")"}]}], " ", "\[Equal]",
         " ", 
        RowBox[{"Tan", "[", "\[Beta]", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"result", " ", "/.", " ", 
       RowBox[{"First", " ", "@", " ", 
        RowBox[{"Solve", "[", 
         RowBox[{"eqn", ",", " ", "result"}], "]"}]}]}]}], "*)"}], " ", 
    "\[IndentingNewLine]", 
    RowBox[{"rbig", "-", 
     RowBox[{"depth", " ", 
      RowBox[{"Cot", "[", "\[Beta]", "]"}]}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"frustum", "[", 
      RowBox[{
      "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", 
       "\"\<apexangle\>\""}], "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"toBaseAngled", "[", "f", "]"}], ",", " ", "depth"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"f", ":", 
      RowBox[{"frustum", "[", 
       RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], ",", 
     " ", "depth_"}], "]"}], " ", ":=", " ", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{
     RowBox[{"radiusFromDepth", "[", 
      RowBox[{
       RowBox[{"toBaseAngled", "[", "f", "]"}], ",", " ", "depth"}], "]"}], 
     ",", " ", 
     RowBox[{"assumptions", "[", "f", "]"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"frustum", "[", 
      RowBox[{
      "h", ",", " ", "rbig", ",", " ", "\[Alpha]", ",", "\"\<apexangle\>\""}],
       "]"}], ",", " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"frustum", "[", 
      RowBox[{
      "h", ",", " ", "rbig", ",", " ", "\[Beta]", ",", " ", 
       "\"\<baseangle\>\""}], "]"}], ",", " ", "depth"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"frustum", "[", 
      RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}], ",", " ", 
     "depth"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"27b02798-e055-431b-9a7a-77a50d6e338a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing", \
"Subsubsection",ExpressionUUID->"029e8a45-f9a9-4629-8d1c-8add93c5a0ed"],

Cell[BoxData[{
 RowBox[{"example", " ", "=", " ", 
  RowBox[{"frustum", "[", 
   RowBox[{"1", ",", " ", "2", ",", " ", 
    RowBox[{"\[Pi]", "/", "9"}], ",", " ", "\"\<apexangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"volume", "[", "example", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"volume", "[", "example", "]"}], " ", "//", " ", "N"}]}], " ", 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"depthFromVolume", "[", 
     RowBox[{"example", ",", "v"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"v", ",", " ", "0", ",", " ", 
     RowBox[{"volume", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volumeFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<volume\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"radiusFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<radius\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}]}], "Input",ExpressionUUID->"6983b8da-5f17-484d-aa8b-7fe0d57c19bd"],

Cell[BoxData[{
 RowBox[{"example", " ", "=", " ", 
  RowBox[{"frustum", "[", 
   RowBox[{
    RowBox[{"Sqrt", "[", "3", "]"}], ",", " ", "2", ",", " ", "1"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"volume", "[", "example", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"volume", "[", "example", "]"}], " ", "//", " ", "N"}]}], " ", 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"depthFromVolume", "[", 
     RowBox[{"example", ",", "v"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"v", ",", " ", "0", ",", " ", 
     RowBox[{"volume", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volumeFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<volume\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"radiusFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<radius\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}]}], "Input",ExpressionUUID->"a3633461-f447-493d-886f-d7bf1fd06f05"],

Cell[BoxData[{
 RowBox[{"example", " ", "=", " ", 
  RowBox[{"frustum", "[", 
   RowBox[{"1", ",", " ", "2", ",", " ", 
    RowBox[{"\[Pi]", "/", "6"}], ",", " ", "\"\<baseangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"volume", "[", "example", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"volume", "[", "example", "]"}], " ", "//", " ", "N"}]}], " ", 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"depthFromVolume", "[", 
     RowBox[{"example", ",", "v"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"v", ",", " ", "0", ",", " ", 
     RowBox[{"volume", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volumeFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<volume\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"radiusFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<radius\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}]}], "Input",ExpressionUUID->"9469b866-a170-479c-bffc-09c629d76d17"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Inverted Right Conical Frustum", \
"Subsection",ExpressionUUID->"4abef672-6d13-4db3-9ba2-05eaaaca9187"],

Cell["\<\
As we did with cones, we also explore the vertical inversion of the frustum.\
\>", "Text",ExpressionUUID->"c485360f-9bb2-4c57-b9cb-371366f9c472"],

Cell[CellGroupData[{

Cell["Conversion", \
"Subsubsection",ExpressionUUID->"a44dbb9e-4f84-41a7-9314-118087dcdce9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"toFrustum", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"invert", " ", "@", " ", "f"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toFrustum", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"invert", " ", "@", " ", "f"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toFrustum", "[", 
    RowBox[{"f", ":", " ", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"invert", " ", "@", " ", "f"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"invert", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"invertedFrustum", "[", 
   RowBox[{"h", ",", "rbig", ",", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}],
    "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"invert", "[", 
   RowBox[{"f", ":", 
    RowBox[{"frustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"invertedFrustum", "[", 
   RowBox[{"h", ",", "rbig", ",", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"invert", "[", 
    RowBox[{"f", ":", 
     RowBox[{"frustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"invertedFrustum", "[", 
    RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"invert", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"frustum", "[", 
   RowBox[{"h", ",", "rbig", ",", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}],
    "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"invert", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], ":=", 
  RowBox[{"frustum", "[", 
   RowBox[{"h", ",", "rbig", ",", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"invert", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], ":=", 
  RowBox[{"frustum", "[", 
   RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], 
   "]"}]}]}], "Input",ExpressionUUID->"a6739c7b-9aa3-408a-b396-b2690d6ed6d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Accessing", \
"Subsubsection",ExpressionUUID->"6bd27bfc-088a-4c43-826b-ed60d96fef6a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"assumptions", " ", "@", " ", 
   RowBox[{"toFrustum", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"assumptions", " ", "@", " ", 
   RowBox[{"toFrustum", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"assumptions", " ", "@", " ", 
   RowBox[{"toFrustum", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"assumptions", "[", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h", ",", " ", "rbig", ",", " ", "\[Alpha]", ",", " ", 
      "\"\<apexangle\>\""}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"assumptions", "[", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h", ",", " ", "rbig", ",", " ", "\[Beta]", ",", " ", 
      "\"\<baseangle\>\""}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"6c850440-a99c-4b55-b888-141649243b86"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"apexangle", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"apexangle", " ", "@", " ", 
   RowBox[{"invert", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"apexangle", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"apexangle", " ", "@", " ", 
   RowBox[{"invert", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"apexangle", "[", 
    RowBox[{"f", ":", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h_", ",", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], ":=",
    " ", 
   RowBox[{"apexangle", " ", "@", " ", 
    RowBox[{"invert", " ", "@", " ", "f"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"baseangle", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", "  ", 
  RowBox[{"baseangle", " ", "@", " ", 
   RowBox[{"invert", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"baseangle", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", "  ", 
  RowBox[{"baseangle", " ", "@", " ", 
   RowBox[{"invert", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"baseangle", "[", 
    RowBox[{"f", ":", " ", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"baseangle", " ", "@", " ", 
    RowBox[{"invert", " ", "@", " ", "f"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"baseangle", "[", 
    RowBox[{"f", ":", " ", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h_", ",", "rbig_", ",", 
       RowBox[{"rbig_", "-", 
        RowBox[{"h_", " ", 
         RowBox[{"Cot", "[", "\[Beta]_", "]"}]}]}]}], "]"}]}], "]"}], " ", ":=",
    " ", 
   RowBox[{"baseangle", " ", "@", " ", 
    RowBox[{"invert", " ", "@", " ", "f"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"apexangle", "[", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"baseangle", "[", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"{", " ", 
    RowBox[{
     RowBox[{"baseangle", "[", 
      RowBox[{"invertedFrustum", "[", 
       RowBox[{"1", ",", " ", "3", ",", " ", "2"}], "]"}], "]"}], ",", " ", 
     RowBox[{"baseangle", "[", 
      RowBox[{"invertedFrustum", "[", 
       RowBox[{
        RowBox[{"Sqrt", "[", "3", "]"}], ",", " ", "2", ",", " ", "1"}], 
       "]"}], "]"}]}], "}"}]}], 
  ";"}]}], "Input",ExpressionUUID->"9d77889b-b66e-4e32-ad01-73a2356200a7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "h"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "h"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", 
  "h"}]}], "Input",ExpressionUUID->"fc0ab199-4944-422d-abf0-03a9b8b1ed6d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"rbig", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "rbig"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rbig", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "rbig"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rbig", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", 
  "rbig"}]}], "Input",ExpressionUUID->"159566ea-f621-4ebc-9b99-ffb5a05acd10"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"rsmall", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"rsmall", " ", "@", " ", 
   RowBox[{"invert", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rsmall", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"rsmall", " ", "@", " ", 
   RowBox[{"invert", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rsmall", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", "rsmall"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rsmall", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h_", ",", "rbig_", ",", 
      RowBox[{"ArcTan", "[", 
       RowBox[{
        RowBox[{"rbig_", "-", "rsmall_"}], ",", "h_"}], "]"}], ",", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "rsmall"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"rsmall", "[", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h", ",", "rbig", ",", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"rsmall", "[", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h", ",", "rbig", ",", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], "]"}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"rsmall", "[", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h", ",", "rbig", ",", "rsmall"}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"4e013663-8fe4-4fb2-998f-23685bb7b498"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conversion Redux", \
"Subsubsection",ExpressionUUID->"0c9bbe4a-5396-4604-99ea-159316c172f2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"toInvertedFrustum", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"invertedFrustum", "[", 
   RowBox[{"h", ",", "rbig", ",", 
    RowBox[{"rsmall", "[", "f", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toInvertedFrustum", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"invertedFrustum", "[", 
   RowBox[{"h", ",", "rbig", ",", 
    RowBox[{"rsmall", "[", "f", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toInvertedFrustum", "[", 
    RowBox[{"f", ":", " ", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
   " ", ":=", " ", "f"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"toInvertedFrustum", " ", "@", " ", "f"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", "  ", 
  RowBox[{"toInvertedFrustum", " ", "@", " ", "f"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toCartesian", "[", 
    RowBox[{"f", ":", " ", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
   " ", ":=", "  ", 
   RowBox[{"toInvertedFrustum", " ", "@", " ", "f"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toApexAngled", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "f"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toApexAngled", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"invert", " ", "@", " ", 
   RowBox[{"toApexAngled", " ", "@", " ", 
    RowBox[{"invert", " ", "@", " ", "f"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toApexAngled", "[", 
    RowBox[{"f", ":", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"invert", " ", "@", " ", 
    RowBox[{"toApexAngled", " ", "@", " ", 
     RowBox[{"invert", " ", "@", " ", "f"}]}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toBaseAngled", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], " ", ":=", 
  RowBox[{"invert", " ", "@", " ", 
   RowBox[{"toBaseAngled", " ", "@", " ", 
    RowBox[{"invert", " ", "@", " ", "f"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toBaseAngled", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], " ", ":=", " ", 
  "f"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toBaseAngled", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"invert", " ", "@", " ", 
   RowBox[{"toBaseAngled", " ", "@", " ", 
    RowBox[{
    "invert", " ", "@", " ", 
     "f"}]}]}]}]}], \
"Input",ExpressionUUID->"0fc7b618-398f-4d0b-8cb0-7c7140151c28"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toCartesian", " ", "@", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h", ",", " ", "rbig", ",", " ", "\[Beta]", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toBaseAngled", " ", "@", " ", "%"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toApexAngled", " ", "@", " ", "%%"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toFrustum", " ", "@", "  ", "%"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toBaseAngled", " ", "@", "  ", "%%"}]}], 
  ";"}]}], "Input",ExpressionUUID->"9a49d2f5-699c-46e5-9635-bebd7475483a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toBaseAngled", " ", "@", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toCartesian", " ", "@", " ", "%"}]}], 
  ";"}]}], "Input",ExpressionUUID->"e67e3e6f-7525-4885-ba45-105b17c2b4fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volume", \
"Subsubsection",ExpressionUUID->"2e148289-c93a-41ab-80b4-44302a74b6f3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"coneHeight", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], ":=", 
  RowBox[{"coneHeight", " ", "@", " ", 
   RowBox[{"invert", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"coneHeight", "[", 
   RowBox[{"f", ":", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
      "\"\<baseangle\>\""}], "]"}]}], "]"}], ":=", 
  RowBox[{"coneHeight", " ", "@", " ", 
   RowBox[{"invert", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"coneHeight", "[", 
    RowBox[{"f", ":", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"coneHeight", " ", "@", " ", 
    RowBox[{"invert", " ", "@", " ", "f"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"coneHeight", "[", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h", ",", "rbig", ",", "\[Alpha]", ",", "\"\<apexangle\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"coneHeight", "[", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h", ",", "rbig", ",", "\[Beta]", ",", "\"\<baseangle\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toApexAngled", " ", "@", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h", ",", "rbig", ",", "\[Beta]", ",", "\"\<baseangle\>\""}], 
     "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"coneHeight", "@", " ", "%"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"coneHeight", "[", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h", ",", "rbig", ",", "rsmall"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"coneHeight", "[", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"1", ",", " ", "3", ",", " ", "2"}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"27591bf7-9ef8-4594-9ce2-efca44bec860"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"volume", " ", "@", " ", 
   RowBox[{"invert", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"f", ":", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
     "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
      "\"\<apexangle\>\""}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"volume", " ", "@", " ", 
   RowBox[{"invert", " ", "@", " ", "f"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"volume", "[", 
    RowBox[{"f", ":", " ", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
       "\"\<baseangle\>\""}], "]"}]}], "]"}], ":=", " ", 
   RowBox[{"volume", " ", "@", " ", 
    RowBox[{"invert", " ", "@", " ", "f"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"v", "=", 
    RowBox[{"test", " ", "@", " ", 
     RowBox[{"volume", "[", 
      RowBox[{"invertedFrustum", "[", 
       RowBox[{"h", ",", "r1", ",", "r2"}], "]"}], "]"}]}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"compare", " ", "to", " ", "textbook", " ", "answer", " ", 
    FractionBox["1", "3"], " ", "h", " ", "\[Pi]", " ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["r1", "2"], "+", 
      RowBox[{"r1", " ", "r2"}], "+", 
      SuperscriptBox["r2", "2"]}], ")"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"v\[Alpha]", "=", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volume", "[", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h", ",", "r", ",", "\[Alpha]", ",", "\"\<apexangle\>\""}], 
      "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toCartesian", " ", "@", " ", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"h", ",", "r", ",", "\[Alpha]", ",", "\"\<apexangle\>\""}], 
     "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"v\[Alpha]2", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volume", "[", "%", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"v\[Beta]", "=", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volume", "[", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h", ",", " ", "r", ",", " ", "\[Beta]", ",", "\"\<baseangle\>\""}], 
      "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"(", 
    RowBox[{"v", " ", "/.", " ", 
     RowBox[{"r2", " ", "\[Rule]", " ", "0"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", 
  RowBox[{
  "v", ",", " ", "v\[Alpha]", ",", " ", "v\[Alpha]2", ",", " ", "v\[Beta]"}], 
  "]"}]}], "Input",ExpressionUUID->"b09bcd68-9242-4bc6-8b04-967425f89911"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Height and Depth", \
"Subsubsection",ExpressionUUID->"8ce40834-2472-4c56-8326-bb706fce6494"],

Cell["\<\
We\[CloseCurlyQuote]re looking for a frustum with same base angle and bottom \
radius, but different height\
\>", "Text",ExpressionUUID->"b88b6e30-dfce-4e40-bc46-8b4f702e0cc8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", " ", 
       "\"\<apexangle\>\""}], "]"}]}], ",", " ", "vol_"}], "]"}], " ", ":=", 
  " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"h", " ", "-", " ", 
      RowBox[{"depthFromVolume", "[", 
       RowBox[{
        RowBox[{"invert", " ", "@", " ", "f"}], ",", " ", 
        RowBox[{
         RowBox[{"volume", "[", "f", "]"}], " ", "-", " ", "vol"}]}], "]"}]}],
      " ", "//", " ", "Simplify"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"generalApexInvertedFrustum", " ", "=", " ", 
  RowBox[{"invertedFrustum", "[", 
   RowBox[{
   "h", ",", " ", "r", ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"generalApexInvertedFrustum", ",", " ", "vol"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"b76358fa-6ec1-4a0f-9f5b-4c4dbe21c318"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], ",", 
    " ", "vol_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"h", " ", "-", " ", 
      RowBox[{"depthFromVolume", "[", 
       RowBox[{
        RowBox[{"invert", " ", "@", " ", "f"}], ",", " ", 
        RowBox[{
         RowBox[{"volume", "[", "f", "]"}], " ", "-", " ", "vol"}]}], "]"}]}],
      " ", "//", " ", "FullSimplify"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"generalInvertedFrustum", " ", "=", " ", 
  RowBox[{"invertedFrustum", "[", 
   RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"generalInvertedFrustum", ",", " ", "vol"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"8880093b-40ed-4eae-a1d1-55a8cac3403f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
       "\"\<baseangle\>\""}], "]"}]}], ",", " ", "vol_"}], "]"}], " ", ":=", 
  "  ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "hh", ",", " ", "rr", ",", " ", "\[Alpha]\[Alpha]", ",", " ", "vv", ",", 
      "eqn", ",", " ", "soln"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"h", " ", "-", " ", 
      RowBox[{"depthFromVolume", "[", 
       RowBox[{
        RowBox[{"invert", " ", "@", " ", "f"}], ",", " ", 
        RowBox[{
         RowBox[{"volume", "[", "f", "]"}], " ", "-", " ", "vol"}]}], "]"}]}],
      " ", "//", " ", "FullSimplify"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"generalBaseInvertedFrustum", " ", "=", " ", 
  RowBox[{"invertedFrustum", "[", 
   RowBox[{
   "h", ",", " ", "r", ",", " ", "\[Beta]", ",", " ", "\"\<baseangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"generalBaseInvertedFrustum", ",", " ", "vol"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"cf8736a0-5887-43bb-b7e7-5b38b0302886"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volumeFromDepth0", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], ",", 
    " ", "depth_"}], "]"}], " ", ":=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"volume", "[", "f", "]"}], " ", "-", " ", 
     RowBox[{"volumeFromDepth", "[", 
      RowBox[{
       RowBox[{"invert", "[", "f", "]"}], ",", " ", 
       RowBox[{"h", " ", "-", "depth"}]}], "]"}]}], ",", " ", 
    RowBox[{"assumptions", "[", "f", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volumeFromDepth0", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", 
       "\"\<apexangle\>\""}], "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"toCartesian", "[", "f", "]"}], ",", " ", "depth"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"volumeFromDepth0", "[", 
    RowBox[{
     RowBox[{"f", ":", 
      RowBox[{"invertedFrustum", "[", 
       RowBox[{
       "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", 
        "\"\<baseangle\>\""}], "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=",
    " ", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"volume", "[", "f", "]"}], " ", "-", " ", 
      RowBox[{"volumeFromDepth", "[", 
       RowBox[{
        RowBox[{"invert", "[", "f", "]"}], ",", " ", 
        RowBox[{"h", " ", "-", "depth"}]}], "]"}]}], ",", " ", 
     RowBox[{"assumptions", "[", "f", "]"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth0", "[", 
    RowBox[{
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h", ",", " ", "rbig", ",", " ", "\[Alpha]", ",", " ", 
       "\"\<apexangle\>\""}], "]"}], ",", " ", "depth"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth0", "[", 
    RowBox[{
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h", ",", " ", "rbig", ",", " ", "\[Beta]", ",", "\"\<baseangle\>\""}], 
      "]"}], ",", " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth0", "[", 
    RowBox[{
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}], ",", " ", 
     "depth"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"8e3eaaac-7e12-4db4-ba70-e4f78c4c78e5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"f", ":", " ", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", 
       "\"\<apexangle\>\""}], "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{
   RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
    RowBox[{
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "hh", ",", "rrBig", ",", " ", "\[Alpha]\[Alpha]", ",", 
       "\"\<apexangle\>\""}], "]"}], ",", "dd"}], "]"}], " ", "/.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"hh", "\[Rule]", "h"}], ",", " ", 
     RowBox[{"rrBig", "\[Rule]", "rbig"}], ",", " ", 
     RowBox[{"\[Alpha]\[Alpha]", " ", "\[Rule]", " ", "\[Alpha]"}], ",", " ", 
     RowBox[{"dd", "\[Rule]", " ", "depth"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
       "\"\<baseangle\>\""}], "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{
   RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
    RowBox[{
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "hh", ",", "rrBig", ",", " ", "\[Beta]\[Beta]", ",", " ", 
       "\"\<baseangle\>\""}], "]"}], ",", "dd"}], "]"}], " ", "/.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"hh", "\[Rule]", "h"}], ",", " ", 
     RowBox[{"rrBig", "\[Rule]", "rbig"}], ",", " ", 
     RowBox[{"\[Beta]\[Beta]", " ", "\[Rule]", " ", "\[Beta]"}], ",", " ", 
     RowBox[{"dd", "\[Rule]", " ", "depth"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"f", ":", " ", 
      RowBox[{"invertedFrustum", "[", 
       RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], ",", 
     " ", "depth_"}], "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
     RowBox[{
      RowBox[{"invertedFrustum", "[", 
       RowBox[{"hh", ",", "rrBig", ",", "rrSmall"}], "]"}], ",", "dd"}], 
     "]"}], " ", "/.", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"hh", "\[Rule]", "h"}], ",", " ", 
      RowBox[{"rrBig", "\[Rule]", "rbig"}], ",", " ", 
      RowBox[{"rrSmall", "\[Rule]", " ", "rsmall"}], ",", " ", 
      RowBox[{"dd", "\[Rule]", " ", "depth"}]}], "}"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h", ",", " ", "rbig", ",", " ", "\[Alpha]", ",", " ", 
       "\"\<apexangle\>\""}], "]"}], ",", " ", "depth"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h", ",", " ", "rbig", ",", " ", "\[Beta]", ",", "\"\<baseangle\>\""}], 
      "]"}], ",", " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}], ",", " ", 
     "depth"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"f3d05a2a-b169-40f3-a4b9-bee8fca8578a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h_", ",", " ", "rbig_", ",", " ", "\[Beta]_", ",", " ", 
       "\"\<baseangle\>\""}], "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"eqn", ",", " ", "result"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"eqn", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"h", " ", "-", " ", "depth"}], ")"}], " ", "/", " ", 
         RowBox[{"(", 
          RowBox[{"rbig", " ", "-", " ", "result"}], ")"}]}], " ", "\[Equal]",
         " ", 
        RowBox[{"Tan", "[", "\[Beta]", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Simplify", "[", 
       RowBox[{
        RowBox[{"result", " ", "/.", " ", 
         RowBox[{"First", " ", "@", " ", 
          RowBox[{"Solve", "[", 
           RowBox[{"eqn", ",", " ", "result"}], "]"}]}]}], ",", " ", 
        RowBox[{"assumptions", "[", "f", "]"}]}], "]"}]}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"rbig", "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"depth", "-", "h"}], ")"}], " ", 
      RowBox[{"Cot", "[", "\[Beta]", "]"}]}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"f", ":", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h_", ",", " ", "rbig_", ",", " ", "\[Alpha]_", ",", 
       "\"\<apexangle\>\""}], "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"toBaseAngled", "[", "f", "]"}], ",", " ", "depth"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"f", ":", 
      RowBox[{"invertedFrustum", "[", 
       RowBox[{"h_", ",", " ", "rbig_", ",", " ", "rsmall_"}], "]"}]}], ",", 
     " ", "depth_"}], "]"}], " ", ":=", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"toBaseAngled", "[", "f", "]"}], ",", " ", "depth"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h", ",", " ", "rbig", ",", " ", "\[Alpha]", ",", "\"\<apexangle\>\""}],
       "]"}], ",", " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
      "h", ",", " ", "rbig", ",", " ", "\[Beta]", ",", " ", 
       "\"\<baseangle\>\""}], "]"}], ",", " ", "depth"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"h", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}], ",", " ", 
     "depth"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"e9dae895-24c7-49c6-b924-a136a853649a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing", \
"Subsubsection",ExpressionUUID->"b6c4142e-bea3-4d55-8a3d-384a58bbff9f"],

Cell[BoxData[{
 RowBox[{"example", " ", "=", " ", 
  RowBox[{"invertedFrustum", "[", 
   RowBox[{"1", ",", " ", "2", ",", " ", 
    RowBox[{"\[Pi]", "/", "9"}], ",", " ", "\"\<apexangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"volume", "[", "example", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"volume", "[", "example", "]"}], " ", "//", " ", "N"}]}], " ", 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"depthFromVolume", "[", 
     RowBox[{"example", ",", "v"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"v", ",", " ", "0", ",", " ", 
     RowBox[{"volume", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volumeFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<volume\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"radiusFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<radius\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}]}], "Input",ExpressionUUID->"d33dea15-52d3-4fc6-b5eb-56f252c6effe"],

Cell[BoxData[{
 RowBox[{"example", " ", "=", " ", 
  RowBox[{"invertedFrustum", "[", 
   RowBox[{
    RowBox[{"Sqrt", "[", "3", "]"}], ",", " ", "2", ",", " ", "1"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"volume", "[", "example", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"volume", "[", "example", "]"}], " ", "//", " ", "N"}]}], " ", 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"depthFromVolume", "[", 
     RowBox[{"example", ",", "v"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"v", ",", " ", "0", ",", " ", 
     RowBox[{"volume", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volumeFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<volume\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"radiusFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<radius\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}]}], "Input",ExpressionUUID->"35eda6f6-5a57-4e30-a8af-0a0babe5e1e3"],

Cell[BoxData[{
 RowBox[{"example", " ", "=", " ", 
  RowBox[{"invertedFrustum", "[", 
   RowBox[{"1", ",", " ", "2", ",", " ", 
    RowBox[{"\[Pi]", "/", "6"}], ",", " ", "\"\<baseangle\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"volume", "[", "example", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"volume", "[", "example", "]"}], " ", "//", " ", "N"}]}], " ", 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"depthFromVolume", "[", 
     RowBox[{"example", ",", "v"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"v", ",", " ", "0", ",", " ", 
     RowBox[{"volume", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volumeFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<volume\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"radiusFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<radius\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}]}], "Input",ExpressionUUID->"24e450ff-cbe2-4280-b8a6-5197e3d08812"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sphere", \
"Subsection",ExpressionUUID->"1ead60c1-12fc-453a-9457-f039712bc9ae"],

Cell["\<\
We don\[CloseCurlyQuote]t do much with spheres, but have a little bit of \
logic, just in case.\
\>", "Text",ExpressionUUID->"e5199d2c-4c0d-4c93-b784-48d77756f503"],

Cell[CellGroupData[{

Cell["Accessing", \
"Subsubsection",ExpressionUUID->"43c50766-aa40-48a9-87b0-b53a97a95ffe"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"sphere", "[", "r_", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"r", " ", "\[GreaterEqual]", " ", "0"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"radius", "[", 
   RowBox[{"sphere", "[", "r_", "]"}], "]"}], " ", ":=", " ", 
  "r"}]}], "Input",ExpressionUUID->"941587b9-4acf-4fe0-a3ce-67831e958b61"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volume", \
"Subsubsection",ExpressionUUID->"1eeb0226-8dd2-45b7-a42d-660021b4c4cc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"sphere", "[", "r_", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[Alpha]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"4", " ", "/", "3"}], " ", "Pi", " ", 
     RowBox[{"r", "^", "3"}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", "[", 
    RowBox[{"sphere", "[", "r", "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"825d670a-9fb3-4d5f-8adf-18cac6a5ea3e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Inverted Spherical Cap (i.e.: a Bowl)", \
"Subsection",ExpressionUUID->"afb309d6-ed63-4f25-b6e0-46197bc8c39d"],

Cell[TextData[{
 "See ",
 ButtonBox["http://mathworld.wolfram.com/SphericalCap.html",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathworld.wolfram.com/SphericalCap.html"], None},
  ButtonNote->"http://mathworld.wolfram.com/SphericalCap.html"],
 ". And (more usefully) ",
 ButtonBox["https://en.wikipedia.org/wiki/Spherical_cap",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Spherical_cap"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Spherical_cap"],
 ". By \[OpenCurlyQuote]inverted\[CloseCurlyQuote] spherical cap, we here \
mean a cap on the bottom of the sphere instead of the top. Think of a bowl."
}], "Text",ExpressionUUID->"213cd0d6-0329-4b41-862e-4a12460203e4"],

Cell[CellGroupData[{

Cell["Accessing", \
"Subsubsection",ExpressionUUID->"3c38b2ea-a031-4b2c-afe6-a7e730e87019"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"rCap", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{"h_", ",", " ", "rSphere_", ",", " ", "\"\<rSphere\>\""}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Sqrt", "[", 
   RowBox[{
    RowBox[{"rSphere", "^", "2"}], " ", "-", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"rSphere", "-", "h"}], ")"}], "^", "2"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rSphere", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{"h_", ",", " ", "rSphere_", ",", " ", "\"\<rSphere\>\""}], 
     "]"}]}], "]"}], " ", ":=", " ", "rSphere"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"height", "[", 
    RowBox[{"c", ":", 
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h_", ",", " ", "rSphere_", ",", " ", "\"\<rSphere\>\""}], 
      "]"}]}], "]"}], " ", ":=", " ", "h"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rCap", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{"h_", ",", " ", "a_", ",", " ", "\"\<rCap\>\""}], " ", "]"}]}], 
   "]"}], " ", ":=", " ", "a"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rSphere", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{"h_", ",", " ", "a_", ",", " ", "\"\<rCap\>\""}], " ", "]"}]}], 
   "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"a", " ", "^", "2"}], " ", "+", " ", 
     RowBox[{"h", "^", "2"}]}], ")"}], " ", "/", " ", 
   RowBox[{"(", 
    RowBox[{"2", "h"}], ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"height", "[", 
    RowBox[{"c", ":", 
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h_", ",", " ", "a_", ",", " ", "\"\<rCap\>\""}], "]"}]}], 
    "]"}], " ", ":=", " ", "h"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{"h_", ",", " ", "rSphere_", ",", " ", "\"\<rSphere\>\""}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"rSphere", " ", ">", " ", "0"}], " ", "&&", " ", 
   RowBox[{"h", " ", ">", " ", "0"}], " ", "&&", " ", 
   RowBox[{
   "rSphere", " ", "\[GreaterEqual]", " ", "h"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{"h_", ",", " ", "a_", ",", " ", "\"\<rCap\>\""}], "]"}]}], "]"}],
   " ", ":=", " ", 
  RowBox[{
   RowBox[{"h", " ", ">", " ", "0"}], " ", "&&", " ", 
   RowBox[{"a", " ", ">", " ", "0"}], " ", "&&", " ", 
   RowBox[{
    RowBox[{"rSphere", "[", "c", "]"}], " ", "\[GreaterEqual]", " ", 
    "h"}]}]}]}], \
"Input",ExpressionUUID->"47b10a0d-9ea7-4463-b5b1-3fb8e1c0de63"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conversion", \
"Subsubsection",ExpressionUUID->"0da3eefa-92cc-4061-b6d4-fdefc6c9312a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"toCap", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{"h_", ",", " ", "rSphere_", ",", " ", "\"\<rSphere\>\""}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"invertedSphericalCap", "[", 
   RowBox[{"h", ",", " ", 
    RowBox[{"rCap", "[", "c", "]"}], ",", " ", "\"\<rCap\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCap", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{"h_", ",", " ", "a_", ",", " ", "\"\<rCap\>\""}], "]"}]}], "]"}],
   " ", ":=", " ", "c"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toSphere", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{"h_", ",", " ", "a_", ",", " ", "\"\<rCap\>\""}], "]"}]}], "]"}],
   " ", ":=", " ", 
  RowBox[{"invertedSphericalCap", "[", 
   RowBox[{"h", ",", " ", 
    RowBox[{"rSphere", "[", "c", "]"}], ",", " ", "\"\<rSphere\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"toSphere", "[", 
    RowBox[{"c", ":", 
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h_", ",", " ", "rSphere_", ",", " ", "\"\<rSphere\>\""}], 
      "]"}]}], "]"}], " ", ":=", " ", "c"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{"h_", ",", " ", "rSphere_", ",", " ", "\"\<rSphere\>\""}], 
     "]"}]}], "]"}], " ", ":=", " ", "c"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"c", ":", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{"h_", ",", " ", "a_", ",", " ", "\"\<rCap\>\""}], "]"}]}], "]"}],
   " ", ":=", " ", 
  "c"}]}], "Input",ExpressionUUID->"859f4ea1-c099-4765-816d-194b0a8cea71"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volume", \
"Subsubsection",ExpressionUUID->"d3a51adf-f58c-4c99-a82c-c3ac6a4381fc"],

Cell["Formulas from Wikipedia", \
"Text",ExpressionUUID->"f52c00bb-24db-484e-aeda-75a33540a2fb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"invertedSphericalCap", "[", 
    RowBox[{"h_", ",", " ", "rSphere_", ",", " ", "\"\<rSphere\>\""}], "]"}], 
   "]"}], " ", ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[Pi]", "/", "3"}], " ", "*", " ", 
     RowBox[{"h", "^", "2"}], " ", "*", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"3", "rSphere"}], " ", "-", " ", "h"}], ")"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"invertedSphericalCap", "[", 
    RowBox[{"h_", ",", " ", "a_", ",", " ", "\"\<rCap\>\""}], "]"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"1", "/", " ", "6"}], " ", "*", " ", "\[Pi]", " ", "*", " ", "h",
      " ", "*", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"3", " ", 
        RowBox[{"a", "^", "2"}]}], " ", "+", " ", 
       RowBox[{"h", "^", "2"}]}], ")"}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", "@", 
   RowBox[{"volume", "[", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{"h", ",", " ", "r", ",", " ", "\"\<rSphere\>\""}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", "@", 
   RowBox[{"volume", "[", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{"h", ",", " ", "a", ",", " ", "\"\<rCap\>\""}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"495e4c66-df96-4a2e-9c00-ba6606b78bbf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Height and Depth", \
"Subsubsection",ExpressionUUID->"c1c737a5-b65a-44cb-ad6e-6d5143098635"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "genericSphericalCapDepthFromVolume", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"genericSphericalCapDepthFromVolume", "[", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "cap", ",", " ", "a", ",", " ", "h", ",", " ", "vol", ",", "assumpts", 
       ",", " ", "eqn", ",", " ", "solns", ",", " ", "soln", ",", " ", "c1", 
       ",", " ", "break"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"cap", " ", "=", " ", 
       RowBox[{"invertedSphericalCap", "[", 
        RowBox[{"h", ",", "a", ",", " ", "\"\<rCap\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"assumpts", " ", "=", " ", 
       RowBox[{
        RowBox[{"assumptions", "[", "cap", "]"}], "  ", "&&", " ", 
        RowBox[{"vol", " ", "\[GreaterEqual]", " ", "0"}]}]}], " ", ";", 
      "\[IndentingNewLine]", 
      RowBox[{"eqn", " ", "=", " ", 
       RowBox[{"vol", " ", "\[Equal]", " ", 
        RowBox[{"volume", "[", "cap", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"solns", " ", "=", " ", 
       RowBox[{"Assuming", "[", 
        RowBox[{"assumpts", ",", " ", 
         RowBox[{"Solve", "[", 
          RowBox[{"eqn", ",", " ", "h"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"soln", " ", "=", " ", 
       RowBox[{"h", " ", "/.", " ", 
        RowBox[{"solns", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"genericSphericalCapDepthFromVolume", "[", "]"}], " ", "=", 
       " ", 
       RowBox[{"{", 
        RowBox[{"h", ",", "a", " ", ",", "vol", ",", "soln"}], "}"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"b8de25c2-2fe5-4b2b-9d66-79574ce8bebf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h_", ",", " ", "r_", ",", " ", "\"\<rSphere\>\""}], "]"}]}], 
    ",", " ", "v_"}], "]"}], " ", ":=", " ", 
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"toCap", "[", "c", "]"}], ",", " ", "v"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h_", ",", " ", "a_", ",", " ", "\"\<rCap\>\""}], "]"}]}], ",", 
    " ", "v_"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"aa", ",", " ", "hh", ",", " ", "vol", ",", " ", "soln"}], "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"hh", ",", " ", "aa", ",", " ", "vol", ",", " ", "soln"}], 
       "}"}], " ", "=", " ", 
      RowBox[{"genericSphericalCapDepthFromVolume", "[", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{"soln", "  ", "/.", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"aa", " ", "\[Rule]", " ", "a"}], ",", " ", 
         RowBox[{"hh", "\[Rule]", " ", "h"}], ",", " ", 
         RowBox[{"vol", "\[Rule]", "v"}]}], "}"}]}], ")"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"1", ",", " ", "2", ",", " ", "\"\<rCap\>\""}], "]"}], ",", " ", 
     RowBox[{"volume", "[", 
      RowBox[{"invertedSphericalCap", "[", 
       RowBox[{"1", ",", " ", "2", ",", " ", "\"\<rCap\>\""}], "]"}], "]"}]}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"N", " ", "@", " ", "%"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h", ",", " ", "r", ",", " ", "\"\<rCap\>\""}], "]"}], ",", " ",
      "volume"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"N", " ", "@", " ", 
  "%"}]}], "Input",ExpressionUUID->"89979e70-9edb-403e-bd8d-58a960b500fc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h_", ",", " ", "r_", ",", " ", "\"\<rSphere\>\""}], "]"}]}], 
    ",", " ", "depth_"}], "]"}], " ", ":=", " ", 
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"toCap", "[", "c", "]"}], ",", " ", "depth"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"c", ":", " ", 
      RowBox[{"invertedSphericalCap", "[", 
       RowBox[{"h_", ",", " ", "a_", ",", " ", "\"\<rCap\>\""}], "]"}]}], ",",
      " ", "depth_"}], "]"}], " ", ":=", " ", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"genericVolumeFromDepthUsingInverse", "[", 
       RowBox[{
        RowBox[{"invertedSphericalCap", "[", " ", 
         RowBox[{"hh", ",", " ", "aa", ",", " ", "\"\<rCap\>\""}], "]"}], ",",
         " ", "dd"}], "]"}], " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"aa", " ", "\[Rule]", " ", "a"}], ",", " ", 
        RowBox[{"hh", "\[Rule]", " ", "h"}], ",", " ", 
        RowBox[{"dd", "\[Rule]", " ", "depth"}]}], "}"}]}], ",", " ", 
     RowBox[{
      RowBox[{"assumptions", "[", "c", "]"}], " ", "&&", " ", 
      RowBox[{"depth", " ", ">", " ", "0"}]}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h", ",", " ", "a", ",", " ", "\"\<rCap\>\""}], "]"}], ",", " ",
      "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h", ",", " ", "r", ",", " ", "\"\<rSphere\>\""}], "]"}], ",", 
     " ", "depth"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"04ef3025-ce77-4df1-b107-ccafe7ce2374"],

Cell["\<\
For radiusFromDepth, we refer to the radius of top of the portion of the cap \
that is occupied for a given depth.\
\>", "Text",ExpressionUUID->"bf574bd5-6155-4cc1-9924-aa1393deb3d5"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "genericSphericalCapRadiusFromDepth", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"genericSphericalCapRadiusFromDepth", "[", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "c", ",", " ", "a", ",", " ", "h", ",", " ", "r", ",", " ", "depth", 
       ",", "result", ",", " ", "assumpts", ",", " ", "eqn", ",", " ", 
       "solns", ",", " ", "soln", ",", " ", "c1", ",", " ", "break"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"c", " ", "=", " ", 
       RowBox[{"invertedSphericalCap", "[", 
        RowBox[{"h", ",", "a", ",", " ", "\"\<rCap\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"assumpts", " ", "=", " ", 
       RowBox[{
        RowBox[{"assumptions", "[", "c", "]"}], "  ", "&&", " ", 
        RowBox[{"depth", " ", "\[GreaterEqual]", " ", "0"}]}]}], " ", ";", 
      "\[IndentingNewLine]", 
      RowBox[{"r", " ", "=", " ", 
       RowBox[{"rSphere", "[", "c", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"eqn", " ", "=", "  ", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"r", "-", "depth"}], ")"}], "^", "2"}], " ", "+", " ", 
         RowBox[{"result", "^", "2"}]}], " ", "\[Equal]", " ", 
        RowBox[{"r", "^", "2"}]}]}], " ", ";", "\[IndentingNewLine]", 
      RowBox[{"soln", " ", "=", " ", 
       RowBox[{"FullSimplify", "[", 
        RowBox[{
         RowBox[{"result", " ", "/.", " ", 
          RowBox[{
           RowBox[{"Solve", "[", 
            RowBox[{"eqn", ",", " ", "result"}], "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
         RowBox[{"assumptions", "[", "c", "]"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"can", " ", "take", " ", "either", " ", "soln"}], ",", " ", 
        RowBox[{
        "as", " ", "we", " ", "square", " ", "and", " ", "then", " ", 
         "Sqrt"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"soln", " ", "=", " ", 
       RowBox[{"FullSimplify", "[", 
        RowBox[{
         RowBox[{"Sqrt", "[", 
          RowBox[{"soln", " ", "^", "2"}], "]"}], ",", " ", 
         RowBox[{"assumptions", "[", "c", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"genericSphericalCapRadiusFromDepth", "[", "]"}], " ", "=", 
       " ", 
       RowBox[{"{", 
        RowBox[{"h", ",", "a", " ", ",", "depth", ",", "soln"}], "}"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"f1386392-b529-4145-a80f-900da96bb98d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h_", ",", " ", "r_", ",", " ", "\"\<rSphere\>\""}], "]"}]}], 
    ",", " ", "depth_"}], "]"}], " ", ":=", " ", 
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"toCap", "[", "c", "]"}], ",", " ", "depth"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h_", ",", " ", "a_", ",", " ", "\"\<rCap\>\""}], "]"}]}], ",", 
    " ", "depth_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"aa", ",", " ", "hh", ",", " ", "dd", ",", " ", "soln"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"hh", ",", " ", "aa", ",", " ", "dd", ",", " ", "soln"}], 
       "}"}], " ", "=", " ", 
      RowBox[{"genericSphericalCapRadiusFromDepth", "[", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"FullSimplify", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"soln", "  ", "/.", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"aa", " ", "\[Rule]", " ", "a"}], ",", " ", 
           RowBox[{"hh", "\[Rule]", " ", "h"}], ",", " ", 
           RowBox[{"dd", "\[Rule]", "depth"}]}], "}"}]}], ")"}], ",", " ", 
       RowBox[{"assumptions", "[", "c", "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h", ",", "a", ",", " ", "\"\<rCap\>\""}], "]"}], ",", " ", 
     "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"radiusFromDepth", "[", 
     RowBox[{
      RowBox[{"invertedSphericalCap", "[", 
       RowBox[{"h", ",", "r", ",", " ", "\"\<rSphere\>\""}], "]"}], ",", " ", 
      "depth"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h", ",", "h", ",", " ", "\"\<rCap\>\""}], "]"}], ",", " ", 
     "h"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"radiusFromDepth", "[", 
    RowBox[{
     RowBox[{"invertedSphericalCap", "[", 
      RowBox[{"h", ",", "h", ",", " ", "\"\<rSphere\>\""}], "]"}], ",", " ", 
     "h"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"52413692-20bd-4a08-8c49-56f275894d63"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing", \
"Subsubsection",ExpressionUUID->"bb07049c-189c-40ea-8a60-891170bb864c"],

Cell[BoxData[{
 RowBox[{"example", " ", "=", " ", 
  RowBox[{"invertedSphericalCap", "[", 
   RowBox[{"2", ",", " ", "3", ",", " ", "\"\<rCap\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"volume", "[", "example", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"volume", "[", "example", "]"}], " ", "//", " ", "N"}]}], " ", 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"depthFromVolume", "[", 
     RowBox[{"example", ",", "v"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"v", ",", " ", "0", ",", " ", 
     RowBox[{"volume", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"volumeFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<volume\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"expr", " ", "=", " ", 
   RowBox[{"test", " ", "@", " ", 
    RowBox[{"radiusFromDepth", "[", 
     RowBox[{"example", ",", " ", "depth"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"{", 
    RowBox[{"depth", ",", " ", "0", ",", " ", 
     RowBox[{"height", "[", "example", "]"}]}], "}"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<depth\>\"", ",", " ", "\"\<radius\>\""}], "}"}]}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], 
  "]"}]}], "Input",ExpressionUUID->"53fd61fa-d164-4f12-a815-97b811c98e57"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Unknown Shape", \
"Subsection",ExpressionUUID->"6365e48c-d5ca-4fec-a36d-a1a53d9594e4"],

Cell["\<\
In unknown shape, where we have uncertainty and currently just give up \
entirely, we could deduce bounds and use Interval[]. Currently that\
\[CloseCurlyQuote]s not worthwhile enough to be worth doing. \
\>", "Text",ExpressionUUID->"15c54c10-67ef-4b5a-9347-63c55c1479b9"],

Cell["Note that currently, these are no longer actually used.", \
"Text",ExpressionUUID->"5e72fe24-8236-45d2-930c-bffea69192df"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"u", ":", " ", 
    RowBox[{"unknownShape", "[", 
     RowBox[{"h_", ",", " ", "vol_"}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"h", " ", "\[GreaterEqual]", " ", "0"}], " ", "&&", " ", 
   RowBox[{
   "vol", " ", "\[GreaterEqual]", " ", "0"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"assumptions", "[", 
    RowBox[{"unknownShape", "[", 
     RowBox[{"h", ",", " ", "vol"}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"2365cf61-1d95-40ab-b20f-8db48d3610b2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"u", ":", " ", 
    RowBox[{"unknownShape", "[", 
     RowBox[{"h_", ",", " ", "vol_"}], "]"}]}], "]"}], " ", ":=", " ", 
  "h"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"u", ":", " ", 
    RowBox[{"unknownShape", "[", 
     RowBox[{"h_", ",", " ", "vol_"}], "]"}]}], "]"}], " ", ":=", " ", 
  "u"}]}], "Input",ExpressionUUID->"edfa2782-f6ff-491b-b909-ba1171ab4dd9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"u", ":", " ", 
    RowBox[{"unknownShape", "[", 
     RowBox[{"h_", ",", " ", "vol_"}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"printCell", "[", 
       RowBox[{"{", 
        RowBox[{"volume", ",", " ", 
         RowBox[{"\"\<h\>\"", " ", "\[Rule]", " ", "h"}], ",", " ", 
         RowBox[{"\"\<vol\>\"", " ", "\[Rule]", " ", "vol"}]}], "}"}], "]"}], 
      ";"}], "*)"}], "\[IndentingNewLine]", "vol"}], 
   "]"}]}]], "Input",ExpressionUUID->"dc02e212-20cc-422e-b820-e5a433eb936c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"u", ":", " ", 
     RowBox[{"unknownShape", "[", 
      RowBox[{"h_", ",", " ", "vol_"}], "]"}]}], ",", " ", "v_"}], "]"}], " ",
   ":=", " ", 
  RowBox[{"Piecewise", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", " ", 
        RowBox[{
         RowBox[{"v", " ", "\[LessEqual]", " ", "0"}], " ", "||", " ", 
         RowBox[{"h", " ", "\[LessEqual]", " ", "0"}], " ", "||", " ", 
         RowBox[{"vol", " ", "\[LessEqual]", " ", "0"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"h", ",", " ", 
        RowBox[{"v", " ", "\[GreaterEqual]", " ", "vol"}]}], "}"}]}], 
     "\[IndentingNewLine]", "}"}], ",", " ", "Indeterminate"}], 
   "]"}]}]], "Input",ExpressionUUID->"40b91c84-0d0b-4406-a2e4-fc6cd8994920"],

Cell[BoxData[
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"u", ":", " ", 
     RowBox[{"unknownShape", "[", 
      RowBox[{"h_", ",", " ", "vol_"}], "]"}]}], ",", " ", "depth_"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"Piecewise", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", " ", 
        RowBox[{
         RowBox[{"depth", " ", "\[LessEqual]", " ", "0"}], " ", "||", " ", 
         RowBox[{"h", " ", "\[LessEqual]", " ", "0"}], " ", "||", " ", 
         RowBox[{"vol", " ", "\[LessEqual]", " ", "0"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"vol", ",", " ", 
        RowBox[{"depth", " ", "\[GreaterEqual]", " ", "h"}]}], "}"}]}], 
     "\[IndentingNewLine]", "}"}], ",", " ", "Indeterminate"}], 
   "]"}]}]], "Input",ExpressionUUID->"cd93ea22-1889-4e7a-ae6a-c3704f5c8465"],

Cell[BoxData[
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"u", ":", " ", 
     RowBox[{"unknownShape", "[", 
      RowBox[{"h_", ",", " ", "vol_"}], "]"}]}], ",", " ", "depth_"}], "]"}], 
  " ", ":=", " ", 
  "Indeterminate"}]], \
"Input",ExpressionUUID->"939cb841-b0a9-4480-9106-cc57c5b217d8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{
     RowBox[{"unknownShape", "[", 
      RowBox[{"h", ",", " ", "vol"}], "]"}], ",", " ", "v"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volumeFromDepth", "[", 
    RowBox[{
     RowBox[{"unknownShape", "[", 
      RowBox[{"h", ",", " ", "vol"}], "]"}], ",", " ", "depth"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"52a90ae7-afe5-4ef4-ad7c-00a6a8b77c5f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conical Test Tube", \
"Subsection",ExpressionUUID->"967a35e4-132d-4ff9-8042-e556dba23c67"],

Cell["\<\
We build up a generic model of a test tube by piecing together simpler \
building blocks. Generally speaking, we have a \
mostly-\[OpenCurlyDoubleQuote]cylindrical\[CloseCurlyDoubleQuote] inverted \
frustum on top of a \[OpenCurlyDoubleQuote]conical\[CloseCurlyDoubleQuote] \
inverted  frustum on top of either a flat surface or an inverted spherical \
cap.\
\>", "Text",ExpressionUUID->"f8946781-a8d6-4259-bdec-ae15d89ef86b"],

Cell[CellGroupData[{

Cell["Accessing", \
"Subsubsection",ExpressionUUID->"d214103c-72b1-450e-84fa-ca37f32f037f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"conicalTestTube", "[", 
    RowBox[{"cylindrical_", ",", " ", "conical_", ",", " ", "cap_"}], "]"}], 
   "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"assumptions", "[", "cylindrical", "]"}], " ", "&&", " ", 
   RowBox[{"assumptions", "[", "conical", "]"}], " ", "&&", " ", 
   RowBox[{
   "assumptions", "[", "cap", 
    "]"}]}]}]], \
"Input",ExpressionUUID->"f0779993-ea55-4dd4-9df5-5abe134873e7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"toCanonical", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"conicalTestTube", "[", 
     RowBox[{"cylindrical_", ",", " ", "conical_", ",", " ", "cap_"}], 
     "]"}]}], "]"}], " ", ":=", " ", "c"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toCanonical", "[", 
   RowBox[{"conicalTestTube", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"idTop_", ",", " ", "idHip_", ",", " ", "idBottom_"}], "}"}], 
     ",", " ", 
     RowBox[{"{", 
      RowBox[{"hTop_", ",", " ", "hBottomAndCap_"}], "}"}]}], "]"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"conicalTestTube", "[", " ", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"TODO", ":", " ", 
     RowBox[{
     "use", " ", "cylinders", " ", "when", " ", "we", " ", "need", " ", 
      "to"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"hTop", ",", " ", 
      RowBox[{"idTop", " ", "/", "2"}], " ", ",", " ", 
      RowBox[{"idHip", " ", "/", "2"}]}], " ", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{
      RowBox[{"hBottomAndCap", " ", "-", " ", "idBottom"}], ",", " ", 
      RowBox[{"idHip", " ", "/", "2"}], " ", ",", " ", 
      RowBox[{"idBottom", " ", "/", "2"}]}], " ", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"invertedSphericalCap", "[", 
     RowBox[{
      RowBox[{"idBottom", " ", "/", "2"}], ",", " ", 
      RowBox[{"idBottom", " ", "/", "2"}], ",", " ", "\"\<rCap\>\""}], 
     "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",ExpressionUUID->"2cbb8f62-f04b-44b9-acb6-1a690f8dadca"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"toCartesian", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"conicalTestTube", "[", 
     RowBox[{"cylindrical_", ",", " ", "conical_", ",", " ", "cap_"}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{"toCartesian", ",", " ", "c", ",", " ", 
    RowBox[{"{", "1", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toApexAngled", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"conicalTestTube", "[", 
     RowBox[{"cylindrical_", ",", " ", "conical_", ",", " ", "cap_"}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{"toApexAngled", ",", " ", "c", ",", " ", 
    RowBox[{"{", "1", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toBaseAngled", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"conicalTestTube", "[", 
     RowBox[{"cylindrical_", ",", " ", "conical_", ",", " ", "cap_"}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{"toBaseAngled", ",", " ", "c", ",", " ", 
    RowBox[{"{", "1", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toCartesian", "[", 
    RowBox[{"conicalTestTube", "[", 
     RowBox[{"cylindrical", ",", " ", "conical", ",", " ", "cap"}], "]"}], 
    "]"}]}], ";"}]}], \
"Input",ExpressionUUID->"caa15160-fca1-4d48-8ff2-3b39a2621518"],

Cell[BoxData[
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"conicalTestTube", "[", 
     RowBox[{"cylindrical_", ",", " ", "conical_", ",", " ", "cap_"}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Total", " ", "@", " ", 
   RowBox[{"(", 
    RowBox[{"List", " ", "@@", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"height", ",", " ", "c", ",", " ", 
       RowBox[{"{", "1", "}"}]}], "]"}]}], 
    ")"}]}]}]], \
"Input",ExpressionUUID->"53c3b12b-11ee-4108-be9b-93e2d215f883"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"parts", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"conicalTestTube", "[", 
     RowBox[{"cylindrical_", ",", " ", "conical_", ",", " ", "cap_"}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<cylindrical\>\"", " ", "\[Rule]", " ", "cylindrical"}], ",",
      " ", 
     RowBox[{"\"\<conical\>\"", " ", "\[Rule]", " ", "conical"}], ",", 
     RowBox[{"\"\<cap\>\"", " ", "\[Rule]", " ", "cap"}]}], "}"}], " ", "//", 
   " ", "Association"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"parts", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"conicalTestTube", "[", 
     RowBox[{
     "idTop_", ",", " ", "idHip_", ",", " ", "idBottom_", ",", " ", "hTop_", 
      ",", " ", "hBottom_"}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"parts", " ", "@", " ", 
   RowBox[{"toCanonical", " ", "@", " ", "c"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"parts", "[", 
    RowBox[{"toCanonical", " ", "@", " ", 
     RowBox[{"conicalTestTube", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"idTop", ",", " ", "idHip", ",", " ", "idBottom"}], "}"}], 
       ",", " ", 
       RowBox[{"{", 
        RowBox[{"hTop", ",", " ", "hBottom"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"2b675a98-92e5-4d58-902c-fbcba2ab3ef3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volume", \
"Subsubsection",ExpressionUUID->"4f113e69-1ecf-4cc8-ab3c-4e98b563a2b5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"conicalTestTube", "[", 
     RowBox[{"cylindrical_", ",", " ", "conical_", ",", " ", "cap_"}], 
     "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Total", "[", 
   RowBox[{"volume", " ", "/@", " ", 
    RowBox[{"parts", "[", "c", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volume", "[", 
   RowBox[{"c", ":", " ", 
    RowBox[{"conicalTestTube", "[", 
     RowBox[{
     "idTop_", ",", " ", "idHip_", ",", " ", "idBottom_", ",", " ", "hTop_", 
      ",", " ", "hBottom_"}], "]"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"volume", " ", "@", " ", 
   RowBox[{
   "toCanonical", " ", "@", " ", 
    "c"}]}]}]}], \
"Input",ExpressionUUID->"f5703848-b5c9-430c-bc74-ae1eff4b1104"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Height & Depth", \
"Subsubsection",ExpressionUUID->"ab29c13f-e0b2-4600-a57c-344fddd1a9c6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"conicalTestTube", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"idTop_", ",", " ", "idHip_", ",", " ", "idBottom_"}], "}"}], 
       ",", " ", 
       RowBox[{"{", 
        RowBox[{"hTop_", ",", " ", "hBottom_"}], "}"}]}], "]"}]}], ",", " ", 
    "v_"}], "]"}], " ", ":=", 
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"toCanonical", " ", "@", " ", "c"}], ",", " ", "v"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"depthFromVolume", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"conicalTestTube", "[", 
      RowBox[{"cylindrical_", ",", " ", "conical_", ",", " ", "cap_"}], 
      "]"}]}], ",", " ", "v_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "vCylindrical", ",", " ", "vConical", ",", " ", "vCap", ",", " ", 
      "dFromCap", ",", " ", "dFromConical", ",", " ", "dOther", ",", " ", 
      "result"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"vCap", " ", "=", " ", 
      RowBox[{"volume", "[", "cap", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"vConical", " ", "=", " ", 
      RowBox[{"volume", "[", "conical", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dFromCap", " ", "=", " ", 
      RowBox[{"depthFromVolume", "[", 
       RowBox[{"cap", ",", " ", "v"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dFromConical", " ", "=", " ", 
      RowBox[{
       RowBox[{"height", "[", "cap", "]"}], " ", "+", " ", 
       RowBox[{"depthFromVolume", "[", 
        RowBox[{"conical", ",", " ", 
         RowBox[{"v", " ", "-", " ", "vCap"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dOther", " ", "=", " ", 
      RowBox[{
       RowBox[{"height", "[", "cap", "]"}], " ", "+", " ", 
       RowBox[{"height", "[", "conical", "]"}], " ", "+", " ", 
       RowBox[{"depthFromVolume", "[", 
        RowBox[{"cylindrical", ",", " ", 
         RowBox[{"v", " ", "-", " ", "vCap", " ", "-", " ", "vConical"}]}], 
        "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Piecewise", "[", "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"dFromCap", ",", " ", 
          RowBox[{"v", " ", "\[LessEqual]", " ", "vCap"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"dFromConical", ",", " ", 
          RowBox[{"v", " ", "\[LessEqual]", " ", 
           RowBox[{"vConical", " ", "+", " ", "vCap"}]}]}], "}"}], ",", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"had", " ", "left", " ", "out", " ", "the", " ", 
          RowBox[{"\"\<+ vCap\>\"", "!"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"dOther", ",", " ", "True"}], "}"}]}], "\[IndentingNewLine]",
        "}"}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",ExpressionUUID->"822c7c9a-45a1-4985-9e6a-a5d25a917edd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"conicalTestTube", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"idTop_", ",", " ", "idHip_", ",", " ", "idBottom_"}], "}"}], 
       ",", " ", 
       RowBox[{"{", 
        RowBox[{"hTop_", ",", " ", "hBottom_"}], "}"}]}], "]"}]}], ",", " ", 
    "depth_"}], "]"}], " ", ":=", 
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"toCanonical", " ", "@", " ", "c"}], ",", " ", "depth"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"volumeFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"conicalTestTube", "[", 
      RowBox[{"cylindrical_", ",", " ", "conical_", ",", " ", "cap_"}], 
      "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "hCylindrical", ",", " ", "hConical", ",", " ", "hCap", ",", " ", 
      "vFromCap", ",", " ", "vFromConical", ",", " ", "vOther", ",", " ", 
      "result"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"hCap", " ", "=", " ", 
      RowBox[{"height", "[", "cap", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"hConical", " ", "=", " ", 
      RowBox[{"height", "[", "conical", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"vFromCap", " ", "=", " ", 
      RowBox[{"volumeFromDepth", "[", 
       RowBox[{"cap", ",", " ", "depth"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"vFromConical", " ", "=", " ", 
      RowBox[{
       RowBox[{"volume", "[", "cap", "]"}], " ", "+", " ", 
       RowBox[{"volumeFromDepth", "[", 
        RowBox[{"conical", ",", " ", 
         RowBox[{"depth", " ", "-", " ", "hCap"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"vOther", " ", "=", " ", 
      RowBox[{
       RowBox[{"volume", "[", "cap", "]"}], " ", "+", " ", 
       RowBox[{"volume", "[", "conical", "]"}], " ", "+", " ", 
       RowBox[{"volumeFromDepth", "[", 
        RowBox[{"cylindrical", ",", " ", 
         RowBox[{
         "depth", " ", "-", " ", "hCap", " ", "-", " ", "hConical"}]}], 
        "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Piecewise", "[", "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"vFromCap", ",", " ", 
          RowBox[{"depth", " ", "\[LessEqual]", " ", "hCap"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"vFromConical", ",", " ", 
          RowBox[{"depth", " ", "\[LessEqual]", " ", 
           RowBox[{"hConical", " ", "+", " ", "hCap"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"vOther", ",", " ", "True"}], "}"}]}], "\[IndentingNewLine]",
        "}"}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",ExpressionUUID->"356a2c95-aabd-4600-ad19-65931bc12f47"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"conicalTestTube", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"idTop_", ",", " ", "idHip_", ",", " ", "idBottom_"}], "}"}], 
       ",", " ", 
       RowBox[{"{", 
        RowBox[{"hTop_", ",", " ", "hBottom_"}], "}"}]}], "]"}]}], ",", " ", 
    "depth_"}], "]"}], " ", ":=", 
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"toCanonical", " ", "@", " ", "c"}], ",", " ", "depth"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"radiusFromDepth", "[", 
   RowBox[{
    RowBox[{"c", ":", " ", 
     RowBox[{"conicalTestTube", "[", 
      RowBox[{"cylindrical_", ",", " ", "conical_", ",", " ", "cap_"}], 
      "]"}]}], ",", " ", "depth_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "hCylindrical", ",", " ", "hConical", ",", " ", "hCap", ",", " ", 
      "rFromCap", ",", " ", "rFromConical", ",", " ", "rOther", ",", " ", 
      "result"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"hCap", " ", "=", " ", 
      RowBox[{"height", "[", "cap", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"hConical", " ", "=", " ", 
      RowBox[{"height", "[", "conical", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"rFromCap", " ", "=", " ", 
      RowBox[{"radiusFromDepth", "[", 
       RowBox[{"cap", ",", " ", "depth"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rFromConical", " ", "=", " ", 
      RowBox[{"radiusFromDepth", "[", 
       RowBox[{"conical", ",", " ", 
        RowBox[{"depth", " ", "-", " ", "hCap"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rOther", " ", "=", " ", 
      RowBox[{"radiusFromDepth", "[", 
       RowBox[{"cylindrical", ",", " ", 
        RowBox[{"depth", " ", "-", " ", "hCap", " ", "-", " ", "hConical"}]}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Piecewise", "[", "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"rFromCap", ",", " ", 
          RowBox[{"depth", " ", "\[LessEqual]", " ", "hCap"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"rFromConical", ",", " ", 
          RowBox[{"depth", " ", "\[LessEqual]", " ", 
           RowBox[{"hConical", " ", "+", " ", "hCap"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"rOther", ",", " ", "True"}], "}"}]}], "\[IndentingNewLine]",
        "}"}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",ExpressionUUID->"11f14e66-db95-4420-a2fd-6abede41c944"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pipette and Pipette Tip", \
"Subsection",ExpressionUUID->"2f4abfee-11e3-499b-b4e7-3726537aa03e"],

Cell["\<\
Pipettes and tips are defined by their parts from top to bottom, just like \
the test tubes are.\
\>", "Text",ExpressionUUID->"dcb19b24-b5c3-41e3-a372-608d2045abf0"],

Cell[CellGroupData[{

Cell["Accessing", \
"Subsubsection",ExpressionUUID->"b9c248ef-3a89-4799-b1d9-417ca7322967"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"pipetteTip", "[", "parts__", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"And", " ", "@@", " ", 
   RowBox[{"(", 
    RowBox[{"assumptions", " ", "/@", " ", 
     RowBox[{"{", "parts", "}"}]}], ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"pipette", "[", "parts__", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"And", " ", "@@", " ", 
   RowBox[{"(", 
    RowBox[{"assumptions", " ", "/@", " ", 
     RowBox[{"{", "parts", "}"}]}], ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"assumptions", "[", 
   RowBox[{"mountedPipette", "[", "parts__", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"And", " ", "@@", " ", 
   RowBox[{"(", 
    RowBox[{"assumptions", " ", "/@", " ", 
     RowBox[{"{", "parts", "}"}]}], ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"assumptions", "[", 
    RowBox[{"pipetteTip", "[", 
     RowBox[{
      RowBox[{"invertedFrustum", "[", 
       RowBox[{"h2", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}], ",", " ", 
      RowBox[{"cone", "[", 
       RowBox[{"h1", ",", "r"}], "]"}]}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"e4a92b1a-f35d-42f9-8e0b-1e9280e3ee07"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"pipette", "[", "parts__", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"Total", "[", 
   RowBox[{"height", " ", "/@", " ", 
    RowBox[{"{", "parts", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"pipetteTip", "[", "parts__", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"Total", "[", 
   RowBox[{"height", " ", "/@", " ", 
    RowBox[{"{", "parts", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"height", "[", 
   RowBox[{"mountedPipette", "[", "parts__", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"Total", "[", 
   RowBox[{"height", " ", "/@", " ", 
    RowBox[{"{", "parts", "}"}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"89f21613-80b4-4e0b-be66-9f2284f57086"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Construction", \
"Subsubsection",ExpressionUUID->"42f8158b-d950-4b99-9151-0b949f3658ba"],

Cell["Fancier versions of mountTip would allow for overlap.", \
"Text",ExpressionUUID->"23ac37d3-172f-49ee-bb0e-5e6dca180697"],

Cell[TextData[{
 "Question: should we enforce monotonicity in radius ",
 StyleBox["here? ",
  FontSlant->"Italic"],
 "Would like to, but that sounds hard."
}], "Text",ExpressionUUID->"5e0cea18-2bf1-47b6-ad6f-78d7014f3c4b"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "mountTip", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mountTip", "[", 
   RowBox[{
    RowBox[{"p", " ", ":", " ", 
     RowBox[{"pipette", "[", "pipetteParts__", "]"}]}], ",", " ", 
    RowBox[{"tip", " ", ":", " ", 
     RowBox[{"pipetteTip", "[", "tipParts__", "]"}]}]}], "]"}], " ", ":=", 
  " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"mountedPipette", "[", 
     RowBox[{"pipetteParts", ",", " ", "tipParts"}], "]"}]}], 
   "\[IndentingNewLine]", 
   "]"}]}]}], "Input",ExpressionUUID->"11c78ce0-58be-442e-9551-b5626f105c86"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Volume", \
"Subsubsection",ExpressionUUID->"f902b014-fa9d-4bcd-a6ca-dff20bdf28c8"],

Cell[TextData[{
 "We don\[CloseCurlyQuote]t do volume because for a pipette tip, we\
\[CloseCurlyQuote]re working with the ",
 StyleBox["outside ",
  FontSlant->"Italic"],
 "dimensions, not the inside"
}], "Text",ExpressionUUID->"5741d3fe-5675-4d36-affe-5eae885347fb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Height and Depth", \
"Subsubsection",ExpressionUUID->"e5353a29-71cb-4f58-a6fc-6fcd8fdbe391"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"outsideRadiusFromDepth", "[", 
   RowBox[{
    RowBox[{"p", ":", " ", 
     RowBox[{"pipette", "[", "parts__", "]"}]}], ",", " ", "depth_"}], "]"}], 
  " ", ":=", " ", 
  RowBox[{"outsideRadiusFromDepth", "[", 
   RowBox[{
    RowBox[{"bottomToTop", " ", "@@", " ", 
     RowBox[{"Reverse", "[", 
      RowBox[{"{", "parts", "}"}], "]"}]}], ",", " ", "depth"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"outsideRadiusFromDepth", "[", 
   RowBox[{
    RowBox[{"tip", ":", " ", 
     RowBox[{"pipetteTip", "[", "parts__", "]"}]}], ",", " ", "depth_"}], 
   "]"}], " ", ":=", " ", 
  RowBox[{"outsideRadiusFromDepth", "[", 
   RowBox[{
    RowBox[{"bottomToTop", " ", "@@", " ", 
     RowBox[{"Reverse", "[", 
      RowBox[{"{", "parts", "}"}], "]"}]}], ",", " ", "depth"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"outsideRadiusFromDepth", "[", 
    RowBox[{
     RowBox[{"tip", ":", " ", 
      RowBox[{"mountedPipette", "[", "parts__", "]"}]}], ",", " ", "depth_"}],
     "]"}], " ", ":=", " ", 
   RowBox[{"outsideRadiusFromDepth", "[", 
    RowBox[{
     RowBox[{"bottomToTop", " ", "@@", " ", 
      RowBox[{"Reverse", "[", 
       RowBox[{"{", "parts", "}"}], "]"}]}], ",", " ", "depth"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"outsideRadiusFromDepth", "[", 
    RowBox[{
     RowBox[{"p", ":", " ", 
      RowBox[{"bottomToTop", "[", "parts__", "]"}]}], ",", " ", "depth_"}], 
    "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "partCount", ",", " ", "heights", ",", " ", "cumHeights", ",", " ", 
       "radii"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"partCount", " ", "=", " ", 
       RowBox[{"Length", "[", 
        RowBox[{"{", "parts", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"heights", " ", "=", " ", 
       RowBox[{"height", " ", "/@", " ", 
        RowBox[{"{", "parts", "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"cumHeights", " ", "=", " ", 
       RowBox[{
        RowBox[{"FoldList", "[", 
         RowBox[{"Plus", ",", " ", "0", ",", " ", "heights"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", " ", "partCount"}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Piecewise", " ", "@", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"Indeterminate", ",", " ", 
            RowBox[{"depth", " ", "<", " ", "0"}]}], "}"}], "}"}], " ", "~", 
         "Join", "~", " ", 
         RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "i", ",", " ", "part", ",", " ", "height", ",", " ", 
               "cumHeight"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"radiusFromDepth", "[", 
                RowBox[{"part", ",", " ", 
                 RowBox[{"depth", " ", "-", " ", "cumHeight"}]}], "]"}], ",", 
               " ", 
               RowBox[{"Or", "[", 
                RowBox[{
                 RowBox[{"i", "\[Equal]", "partCount"}], ",", " ", 
                 RowBox[{"depth", " ", "\[LessEqual]", " ", 
                  RowBox[{"cumHeight", "+", "height"}]}]}], "]"}]}], " ", 
              "}"}]}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Range", "[", "partCount", "]"}], ",", 
             RowBox[{"{", "parts", "}"}], ",", " ", "heights", ",", " ", 
             "cumHeights"}], "}"}]}], " ", "]"}]}], ")"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"outsideRadiusFromDepth", "[", 
    RowBox[{
     RowBox[{"pipetteTip", "[", 
      RowBox[{
       RowBox[{"invertedFrustum", "[", 
        RowBox[{"h2", ",", " ", "rbig", ",", " ", "rsmall"}], "]"}], ",", " ", 
       RowBox[{"invertedCone", "[", 
        RowBox[{"h1", ",", "rsmall"}], "]"}]}], "]"}], ",", " ", "depth"}], 
    "]"}]}], ";"}]}], \
"Input",ExpressionUUID->"be576ddd-112c-4018-805a-d3ce9d203c81"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing", \
"Subsubsection",ExpressionUUID->"de983b28-a26e-42f3-b792-46cb55089b8b"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "plotProfile", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plotProfile", "[", 
   RowBox[{"tipOrPipette", ":", " ", 
    RowBox[{
     RowBox[{"pipetteTip", "[", "___", "]"}], " ", "|", " ", 
     RowBox[{"pipette", "[", "___", "]"}], " ", "|", " ", 
     RowBox[{"mountedPipette", "[", "___", "]"}]}]}], "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"outsideRadiusFromDepth", "[", 
     RowBox[{"tipOrPipette", ",", " ", "depth"}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"depth", ",", " ", "0", ",", " ", 
      RowBox[{"height", "[", "tipOrPipette", "]"}]}], "}"}], ",", " ", 
    RowBox[{"AspectRatio", "\[Rule]", 
     RowBox[{
      RowBox[{"outsideRadiusFromDepth", "[", 
       RowBox[{"tipOrPipette", ",", " ", 
        RowBox[{"height", "[", "tipOrPipette", "]"}]}], "]"}], " ", "/", " ", 
      RowBox[{"height", "[", "tipOrPipette", "]"}]}]}], " ", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", " ", 
    RowBox[{"AxesOrigin", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plotProfile", "[", "other_", "]"}], " ", ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"radiusFromDepth", "[", 
     RowBox[{"other", ",", " ", "depth"}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"depth", ",", " ", "0", ",", " ", 
      RowBox[{"height", "[", "other", "]"}]}], "}"}], ",", " ", 
    RowBox[{"AspectRatio", "\[Rule]", 
     RowBox[{
      RowBox[{"radiusFromDepth", "[", 
       RowBox[{"other", ",", " ", 
        RowBox[{"height", "[", "other", "]"}]}], "]"}], " ", "/", " ", 
      RowBox[{"height", "[", "other", "]"}]}]}], " ", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", " ", 
    RowBox[{"AxesOrigin", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",ExpressionUUID->"39e9c2e2-fac2-4fdd-bf83-4e19c660e535"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Modelling Specific Labware Types", \
"Section",ExpressionUUID->"7ede1e2a-f44b-446a-b011-142b40917c16"],

Cell["\<\
With specific shapes in hand, we now proceed to model various specific kinds \
of labware.\
\>", "Text",ExpressionUUID->"b26856aa-5b36-4e08-8b77-12a47e87526b"],

Cell[CellGroupData[{

Cell["Eppendorf Tubes, 1.5ml and 5.0ml", \
"Subsection",ExpressionUUID->"2ff2fe7a-2318-4b22-8896-285ab937e590"],

Cell[CellGroupData[{

Cell["Data", \
"Subsubsection",ExpressionUUID->"21e34899-1a88-4443-a784-8ca05673e668"],

Cell["\<\
Data for each of the volume-to-liquid-depth measurements was obtained by \
pipetting a known volume of food-coloring-colored water, then measuring the \
depth with a micrometer.\
\>", "Text",ExpressionUUID->"946b6e9c-f323-42f5-b6c2-f3f322748004"],

Cell[BoxData[{
 RowBox[{"eppendorf15Data", " ", "=", " ", 
  RowBox[{"ArrayReshape", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "50", ",", " ", "5", ",", "70", ",", " ", "5.74", ",", "75", ",", " ", 
      "5.94", ",", "80", ",", " ", "6.36", ",", "90", ",", " ", "6.61", ",", 
      "100", ",", " ", "7.19", ",", "125", ",", " ", "8.39", ",", "150", ",", 
      " ", "9.26", ",", "200", ",", " ", "10.72", ",", "300", ",", " ", 
      "13.25", ",", "400", ",", " ", "15.39", ",", "500", ",", " ", "17.54", 
      ",", "600", ",", " ", "19.26", ",", "750", ",", " ", "21.59", ",", 
      "875", ",", " ", "23.56", ",", "1000", ",", " ", "25.73", ",", "1200", 
      ",", " ", "29.12", ",", "1500", ",", " ", "33.27"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"18", ",", "2"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"eppendorf15Data", ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<vol\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}]}], 
  "]"}]}], "Input",ExpressionUUID->"6f9dd3ec-c1c0-48db-b0e6-fb42e862df57"],

Cell[BoxData[{
 RowBox[{"eppendorf50Data", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"200", ",", "9.28`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"400", ",", "13.21`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"800", ",", "17.76`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1200", ",", "21.05`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1000", ",", "19.65`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2000", ",", "27.58`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3000", ",", "34.16`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"50", ",", "4.74`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"100", ",", "6.71`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"150", ",", "8.25`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"200", ",", "9.44`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"250", ",", "10.57`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"300", ",", "11.65`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"600", ",", "15.65`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"900", ",", "18.69`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1200", ",", "20.93`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"75", ",", "5.64`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"40", ",", "4.21`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"30", ",", "3.47`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"20", ",", "2.8`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"10", ",", "1.94`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7.5`", ",", "1.77`"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"5000", ",", " ", "47.97"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"4000", ",", " ", "41.49"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"2000", ",", " ", "27.03"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"eppendorf50Data", ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<vol\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], 
  "]"}]}], "Input",ExpressionUUID->"1cc098e5-d42a-4cb5-8ec8-f45d14c26ed5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fitting", \
"Subsubsection",ExpressionUUID->"8a22d10c-7886-43ac-937c-ddb85904c760"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "fitEppendorfData", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fitEppendorfData", "[", 
   RowBox[{
   "eppendorfData_", ",", " ", "specRules_", ",", " ", "conicalThreshold_", 
    ",", " ", "cylindricalThreshold_", ",", " ", "cylConstraints_", ",", " ", 
    "coneConstraints_", ",", " ", "tubeConstraints_", ",", " ", "tubeCap_", 
    ",", " ", 
    RowBox[{"maxIterations_", " ", ":", " ", "100"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "hTot", ",", " ", "rmid", ",", " ", "rBottom", ",", " ", "wallBottom", 
      ",", " ", "hCyl", ",", " ", "hCone", ",", " ", "hCap", ",", " ", 
      "\[Alpha]Cylinder", ",", " ", "\[Alpha]Cone"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "depthFunc", ",", " ", "fit", ",", " ", "showFit", ",", " ", "zeroify",
         ",", " ", "conicalData", ",", " ", "conePart", ",", " ", "coneRules",
         ",", " ", "angledCone", ",", " ", "cylinderData", ",", " ", 
        "offsetConicalData", ",", " ", "offsetCylinderData", ",", " ", 
        "cylinderPart", ",", " ", "cylinderRules", ",", " ", "rtop", ",", " ",
         "rbottom", ",", " ", "angledCylinder", ",", " ", "tube", ",", " ", 
        "\[Alpha]", ",", " ", "tubeRules", ",", " ", "rconeBig", ",", " ", 
        "rconeSmall", ",", "  ", "rules", ",", " ", "rCap", ",", " ", 
        "fittedTube", ",", " ", "tubeCylinder", ",", " ", "tubeCone"}], "}"}],
       ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"depthFunc", "[", "part_", "]"}], " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"expr", ",", " ", "v"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"expr", " ", "=", " ", 
            RowBox[{"depthFromVolume", "[", 
             RowBox[{"part", ",", " ", "v"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"depthFunc", "[", "part", "]"}], " ", "=", " ", 
            RowBox[{"Function", "[", 
             RowBox[{
              RowBox[{"{", "vol", "}"}], ",", " ", 
              RowBox[{"expr", " ", "/.", " ", 
               RowBox[{"{", 
                RowBox[{"v", " ", "\[Rule]", " ", "vol"}], "}"}]}]}], 
             "]"}]}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"fit", "[", 
         RowBox[{
         "part_", ",", " ", "assump_", ",", " ", "vars_", ",", " ", "data_"}],
          "]"}], " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "errors", ",", " ", "err", ",", " ", "min", ",", " ", "fitRules", 
            ",", " ", "asses"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"errors", " ", "=", " ", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"Function", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"vol", ",", " ", "depth"}], "}"}], ",", " ", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"depthFunc", "[", "part", "]"}], "[", "vol", 
                    "]"}], " ", "-", " ", "depth"}], ")"}], "^", "2"}]}], 
                "\[IndentingNewLine]", "]"}], " ", "@@", " ", "#"}], "&"}], 
             " ", "/@", " ", "data"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"err", " ", "=", " ", 
            RowBox[{
             RowBox[{"Total", "[", "errors", "]"}], " ", "//", " ", "N"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"asses", " ", "=", " ", 
            RowBox[{
             RowBox[{"assumptions", "[", "part", "]"}], " ", "&&", " ", 
             RowBox[{"(", 
              RowBox[{"And", " ", "@@", " ", "assump"}], ")"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"min", ",", " ", "fitRules"}], "}"}], " ", "=", " ", 
            RowBox[{"NMinimize", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"err", ",", " ", "asses"}], " ", "}"}], ",", " ", 
              "vars", ",", " ", 
              RowBox[{"MaxIterations", "\[Rule]", "maxIterations"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", "fitRules"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"showFit", "[", 
         RowBox[{"part_", ",", " ", "data_"}], "]"}], " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "v", "}"}], ",", "\[IndentingNewLine]", " ", 
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"ListPlot", "[", 
             RowBox[{
              RowBox[{"{", "data", "}"}], ",", " ", 
              RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", " ", 
              RowBox[{"AxesLabel", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"\"\<vol\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], 
              ",", " ", 
              RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
              RowBox[{"AxesOrigin", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Plot", "[", 
             RowBox[{
              RowBox[{"depthFromVolume", "[", 
               RowBox[{"part", ",", " ", "v"}], "]"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"v", ",", " ", "0", ",", " ", 
                RowBox[{"volume", "[", "part", "]"}]}], "}"}]}], "]"}]}], 
           "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"zeroify", "[", "data_", "]"}], " ", ":=", " ", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"xMin", ",", " ", "yMin"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"xMin", ",", " ", "yMin"}], "}"}], " ", "=", " ", 
            RowBox[{"Map", "[", 
             RowBox[{"Min", ",", " ", 
              RowBox[{"Transpose", " ", "@", " ", "data"}], ",", " ", 
              RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Transpose", "[", 
            RowBox[{
             RowBox[{"Transpose", "[", "data", "]"}], " ", "-", " ", 
             RowBox[{"{", 
              RowBox[{"xMin", ",", " ", "yMin"}], "}"}]}], "]"}]}]}], "]"}]}],
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"conicalData", " ", "=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{"eppendorfData", ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], " ", "\[LessEqual]", " ", 
            "conicalThreshold"}], "&"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"cylinderData", " ", "=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{"eppendorfData", ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], " ", ">=", " ", 
            "cylindricalThreshold"}], "&"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"offsetConicalData", " ", "=", " ", 
        RowBox[{"zeroify", "[", "conicalData", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"offsetCylinderData", " ", "=", " ", 
        RowBox[{"zeroify", "[", "cylinderData", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"printCell", "[", 
        RowBox[{"specificationSays", "[", "specRules", "]"}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"fit", " ", "the", " ", 
         RowBox[{"cylinder", ".", " ", "this"}], " ", "gives", " ", "us", " ",
          "the", " ", "apex", " ", "angle", " ", "of", " ", "the", " ", 
         RowBox[{"cylinder", ".", " ", "we"}], " ", 
         RowBox[{"don", "'"}], "t", " ", "yet", " ", "know", " ", "its", " ", 
         "actual", " ", "height"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"we", " ", 
         RowBox[{"dont", "'"}], " ", "know", " ", "rmid", " ", "because", " ",
          "the", " ", "bottom", " ", "of", " ", "cylinderData", " ", "might", 
         " ", "not", " ", "be", " ", "right", " ", "at", " ", "the", " ", 
         "mid", " ", "location"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"cylinderPart", " ", "=", " ", 
        RowBox[{"invertedFrustum", "[", 
         RowBox[{"hCyl", ",", " ", "rtop", ",", " ", "rmid"}], "]"}]}], 
       RowBox[{"(*", " ", 
        RowBox[{"/.", " ", "coneRules"}], "*)"}], ";", "\[IndentingNewLine]", 
       RowBox[{"cylinderRules", " ", "=", " ", 
        RowBox[{"fit", "[", 
         RowBox[{"cylinderPart", ",", " ", "cylConstraints", ",", " ", 
          RowBox[{"{", 
           RowBox[{"hCyl", ",", " ", "rtop", ",", " ", "rmid"}], "}"}], ",", 
          " ", "offsetCylinderData"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"angledCylinder", " ", "=", " ", 
        RowBox[{"toApexAngled", "[", 
         RowBox[{"cylinderPart", " ", "/.", " ", "cylinderRules"}], "]"}]}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"fit", " ", "the", " ", 
         RowBox[{"cone", ".", " ", "this"}], " ", "gives", " ", "us", " ", 
         "the", " ", "apex", " ", "angle", " ", "of", " ", "the", " ", 
         "cone"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"conePart", " ", "=", " ", 
        RowBox[{"invertedFrustum", "[", 
         RowBox[{"hCone", ",", " ", "rconeBig", ",", " ", "rconeSmall"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"coneRules", " ", "=", " ", 
        RowBox[{"fit", "[", 
         RowBox[{"conePart", ",", " ", "coneConstraints", ",", " ", 
          RowBox[{"{", 
           RowBox[{"hCone", ",", " ", "rconeBig", ",", " ", "rconeSmall"}], 
           "}"}], ",", " ", "offsetConicalData"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"angledCone", " ", "=", " ", 
        RowBox[{"toApexAngled", "[", 
         RowBox[{"conePart", " ", "/.", " ", "coneRules"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"summarize", " ", "what", " ", "we", " ", "know"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"rules", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\[Alpha]Cylinder", " ", "\[Rule]", " ", 
           RowBox[{"apexangle", "[", "angledCylinder", "]"}]}], ",", " ", 
          RowBox[{"\[Alpha]Cone", " ", "\[Rule]", " ", 
           RowBox[{"apexangle", "[", "angledCone", "]"}]}]}], "}"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"put", " ", "these", " ", 
         RowBox[{"together", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"tubeCylinder", " ", "=", " ", 
        RowBox[{
         RowBox[{"invertedFrustum", "[", 
          RowBox[{"hCyl", ",", " ", 
           RowBox[{"rbig", "[", 
            RowBox[{
            "hCyl", ",", " ", "rmid", ",", " ", "\[Alpha]Cylinder", ",", " ", 
             "\"\<apexangle\>\""}], "]"}], ",", " ", "\[Alpha]Cylinder", ",", 
           " ", "\"\<apexangle\>\""}], "]"}], "/.", " ", "rules"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"tubeCone", " ", "=", " ", 
        RowBox[{
         RowBox[{"invertedFrustum", "[", 
          RowBox[{
          "hCone", ",", " ", "rmid", ",", " ", "\[Alpha]Cone", ",", " ", 
           "\"\<apexangle\>\""}], "]"}], "/.", " ", "rules"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"rules", " ", "=", " ", 
        RowBox[{"rules", " ", "~", "Join", "~", 
         RowBox[{"{", " ", 
          RowBox[{"rBottom", " ", "\[Rule]", " ", 
           RowBox[{"rsmall", "[", "tubeCone", "]"}]}], " ", "}"}]}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"tube", " ", "=", " ", 
        RowBox[{"conicalTestTube", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", "tubeCylinder", ")"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(", "tubeCone", ")"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(", 
           RowBox[{"tubeCap", " ", "/.", " ", "rules"}], ")"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"tube", " ", "=", " ", 
        RowBox[{"tube", " ", "/.", " ", 
         RowBox[{"{", " ", 
          RowBox[{"hCone", " ", "\[Rule]", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"hTot", " ", "/.", " ", "specRules"}], ")"}], " ", "-", 
            " ", "hCyl", "  ", "-", " ", "hCap"}]}], "}"}]}]}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"tubeRules", " ", "=", " ", 
        RowBox[{"fit", "[", 
         RowBox[{"tube", ",", " ", "tubeConstraints", ",", " ", 
          RowBox[{"variables", "[", "tube", "]"}], ",", " ", 
          "eppendorfData"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"fittedTube", " ", "=", " ", 
        RowBox[{"toCartesian", "[", 
         RowBox[{"tube", "/.", "tubeRules"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"printCell", " ", "@", " ", 
        RowBox[{"showFit", "[", 
         RowBox[{"fittedTube", ",", " ", "eppendorfData"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "fittedTube"}]}], "\[IndentingNewLine]", 
     "]"}]}], "]"}]}]}], \
"Input",ExpressionUUID->"d318db4a-887b-47e4-a46c-a7cb03e380a2"],

Cell["We fit the 5.0mL tube", \
"Text",ExpressionUUID->"be9657d5-ba06-4585-b313-1d831531aa36"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"fitEppendorf50Data", "[", "data_", "]"}], " ", ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "hTot", ",", " ", "rmid", ",", " ", "wallBottom", ",", " ", "rBottom", 
      ",", " ", "hCyl", ",", " ", "hCone", ",", " ", "hCap", ",", " ", 
      "volCap", ",", " ", "rCap"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"fitEppendorfData", "[", 
     RowBox[{"data", ",", " ", "\[IndentingNewLine]", 
      RowBox[{"{", " ", 
       RowBox[{
        RowBox[{"hTot", " ", "\[Rule]", " ", "55.4"}], ",", " ", 
        RowBox[{"rmid", " ", "\[Rule]", " ", 
         RowBox[{"13.3", " ", "/", " ", "2"}]}], ",", " ", 
        RowBox[{"wallBottom", " ", "\[Rule]", " ", 
         RowBox[{"56.7", " ", "-", " ", "55.4"}]}]}], " ", "}"}], ",", 
      "\[IndentingNewLine]", "1000", ",", " ", "1500", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", " ", 
       RowBox[{"hCyl", " ", ">", " ", "30"}], " ", "}"}], ",", " ", 
      RowBox[{"{", " ", 
       RowBox[{"hCone", " ", ">", " ", "13"}], " ", "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"hCap", " ", "<", " ", "2"}], ",", " ", 
        RowBox[{"hCyl", " ", ">", " ", "30"}], ",", " ", 
        RowBox[{"rmid", " ", ">", " ", "6.2"}], ",", " ", 
        RowBox[{"rmid", " ", "<", " ", "6.9"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"invertedSphericalCap", "[", 
       RowBox[{"hCap", ",", " ", "rBottom", ",", " ", "\"\<rCap\>\""}], 
       "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"fittedEppendorf5$0M0", " ", "=", 
  RowBox[{
  "fitEppendorf50Data", "[", "eppendorf50Data", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"height", " ", "@", " ", "fittedEppendorf5$0M0"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"fittedEppendorf5$0M0", ",", " ", 
     RowBox[{"volume", "[", "fittedEppendorf5$0M0", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", " ", "@", " ", "fittedEppendorf5$0M0"}]}], 
  ";"}]}], "Input",ExpressionUUID->"f346cf27-e240-4abe-ad59-fa311d99fb59"],

Cell["\<\
The M0 for the 1.5mL tube is the fitting we used in initial versions; we\
\[CloseCurlyQuote]ve since found better.\
\>", "Text",ExpressionUUID->"edccbb40-9104-4dcc-840e-4e1a8ad68870"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"fitEppendorf15DataM0", "[", "data_", "]"}], " ", ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "hTot", ",", " ", "rmid", ",", " ", "wallBottom", ",", " ", "rBottom", 
      ",", " ", "hCyl", ",", " ", "hCone", ",", " ", "hCap", ",", " ", 
      "volCap"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"fitEppendorfData", "[", 
     RowBox[{"data", ",", 
      RowBox[{"{", " ", 
       RowBox[{
        RowBox[{"hTot", " ", "\[Rule]", " ", "37.8"}], ",", " ", 
        RowBox[{"rmid", "\[Rule]", " ", 
         RowBox[{"8.7", " ", "/", "2"}]}], ",", " ", 
        RowBox[{"wallBottom", " ", "\[Rule]", " ", 
         RowBox[{"38.9", " ", "-", " ", "37.8"}]}]}], "}"}], ",", " ", "500", 
      ",", " ", "500", ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"hCyl", " ", ">", " ", "12"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"hCone", " ", ">", " ", "10"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"hCap", " ", "<", " ", "5"}], ",", " ", 
        RowBox[{"hCyl", " ", ">", " ", "10"}], ",", " ", 
        RowBox[{"rmid", " ", ">", " ", "4"}], ",", " ", 
        RowBox[{"rmid", " ", "<", " ", "6"}]}], 
       RowBox[{"(*", 
        RowBox[{",", " ", 
         RowBox[{"rCap", " ", "\[GreaterEqual]", " ", "hCap"}]}], "*)"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"unknownShape", "[", 
       RowBox[{"hCap", ",", " ", "volCap"}], "]"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"fittedEppendorf1$5M0", " ", "=", " ", 
  RowBox[{
  "fitEppendorf15DataM0", "[", "eppendorf15Data", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"height", " ", "@", " ", "fittedEppendorf1$5M0"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"fittedEppendorf1$5M0", ",", " ", 
     RowBox[{"volume", "[", "fittedEppendorf1$5M0", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", " ", "@", " ", "fittedEppendorf1$5M0"}]}], 
  ";"}]}], "Input",ExpressionUUID->"8596f830-7007-489b-b946-e7d4f5d7715b"],

Cell["\<\
For a revised fitting, we both include the point (0,0) and fit a cap instead \
of something unknown.\
\>", "Text",ExpressionUUID->"806c0f97-8d31-45aa-8ca8-b40e032b455b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"fitEppendorf15DataM1", "[", "data_", "]"}], " ", ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "hTot", ",", " ", "rmid", ",", " ", "wallBottom", ",", " ", "rBottom", 
      ",", " ", "hCyl", ",", " ", "hCone", ",", " ", "hCap", ",", " ", 
      "volCap"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"fitEppendorfData", "[", 
     RowBox[{"data", ",", 
      RowBox[{"{", " ", 
       RowBox[{
        RowBox[{"hTot", " ", "\[Rule]", " ", "37.8"}], ",", " ", 
        RowBox[{"rmid", "\[Rule]", " ", 
         RowBox[{"8.7", " ", "/", "2"}]}], ",", " ", 
        RowBox[{"wallBottom", " ", "\[Rule]", " ", 
         RowBox[{"38.9", " ", "-", " ", "37.8"}]}]}], "}"}], ",", " ", "500", 
      ",", " ", "500", ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"hCyl", " ", ">", " ", "12"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"hCone", " ", ">", " ", "10"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"hCap", " ", "<", " ", "5"}], ",", " ", 
        RowBox[{"hCyl", " ", ">", " ", "10"}], ",", " ", 
        RowBox[{"rmid", " ", ">", " ", "4"}], ",", " ", 
        RowBox[{"rmid", " ", "<", " ", "6"}]}], 
       RowBox[{"(*", 
        RowBox[{",", " ", 
         RowBox[{"rCap", " ", "\[GreaterEqual]", " ", "hCap"}]}], "*)"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"invertedSphericalCap", "[", 
       RowBox[{"hCap", ",", " ", "rBottom", ",", " ", "\"\<rCap\>\""}], "]"}],
       ",", "\[IndentingNewLine]", "300"}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"fittedEppendorf1$5M1", " ", "=", " ", 
  RowBox[{"fitEppendorf15DataM1", "[", 
   RowBox[{"eppendorf15Data", " ", "~", "Join", "~", " ", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"height", " ", "@", " ", "fittedEppendorf1$5M1"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"fittedEppendorf1$5M1", ",", " ", 
     RowBox[{"volume", "[", "fittedEppendorf1$5M1", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", " ", "@", " ", "fittedEppendorf1$5M1"}]}], 
  ";"}]}], "Input",ExpressionUUID->"61228567-1dbf-44d0-b3ef-a417910defa8"],

Cell["\<\
It should be noted that the specification indicates that the upper \
\[OpenCurlyQuote]cylindrical\[CloseCurlyQuote] inverted frustum isn\
\[CloseCurlyQuote]t actually an inverted frustum but has a bit of a flare at \
the top. We ignore that.\
\>", "Text",ExpressionUUID->"256d249b-09af-426b-9593-83dcbf8dac53"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Bio-rad Deep Well Plates", \
"Subsection",ExpressionUUID->"a938fd0a-adb3-409a-98e7-d3a6b802f0a3"],

Cell["\<\
The well-plates have proven the most difficult to model, as they are both \
small compared to other wells and they are enclosed in a grid and a skirt. We \
have several attempts here, exhibiting the history of the modelling, but the \
one actually used is the last, which fitted depth-data gathered from \
absorbance measurements of various volumes of Allura Red.\
\>", "Text",ExpressionUUID->"6bc4062f-37a6-4653-bc99-6ad80f5b6c38"],

Cell[CellGroupData[{

Cell["V1", \
"Subsubsection",ExpressionUUID->"b5ac026c-b8f0-4ad5-823f-ca13d0dc8a2d"],

Cell["\<\
The Bio-rad specs aren\[CloseCurlyQuote]t internally consistent: there\
\[CloseCurlyQuote]s a conflict between the well diameters and height vs the \
well angle. Update: it\[CloseCurlyQuote]s now known that apparent discrepancy \
arises from the fact that the wells in fact have a capacity larger than 200 \
\[Mu]L.\
\>", "Text",ExpressionUUID->"2a9f73b4-c02a-40c1-869c-ac93770c855b"],

Cell["We first choose to honor the well bottom width (2.64). ", \
"Text",ExpressionUUID->"7fa5f976-0592-4d4b-a296-567e66014d4f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"modelBioRad1", "[", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "cylinderPart", ",", " ", "cylinderRules", ",", " ", "capacity", ",", 
      " ", "hCyl", ",", " ", "rtop", ",", " ", "rmid", ",", " ", "rbottom", 
      ",", " ", "conePart", ",", " ", "hCone", ",", " ", "specRules", ",", 
      " ", "rules", ",", " ", "hTot", ",", " ", "wallBottom", ",", " ", 
      "\[Alpha]Cone", ",", " ", "tube", ",", " ", "vol", ",", " ", "solns", 
      ",", " ", "soln", ",", "assumpts", ",", " ", "constraint", ",", " ", 
      "extra", ",", " ", "hCylMin"}], " ", "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "we", " ", "assume", " ", "the", " ", "top", " ", "is", " ", "an", " ", 
      "actual", " ", "cylinder", " ", "rather", " ", "than", " ", "an", " ", 
      "inverted", " ", "frustum"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"cylinderPart", " ", "=", " ", 
      RowBox[{"cylinder", "[", 
       RowBox[{"hCyl", ",", " ", "rtop"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cylinderRules", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{"rmid", " ", "\[Rule]", " ", "rtop"}], "}"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"conePart", "=", 
      RowBox[{"invertedFrustum", "[", 
       RowBox[{
       "hCone", ",", " ", "rmid", ",", " ", "\[Alpha]Cone", ",", " ", 
        "\"\<apexangle\>\""}], "]"}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"doesn", "'"}], "t", " ", "honor", " ", "rbottom", " ", "on", 
       " ", "its", " ", "own"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"conePart", " ", "=", " ", 
      RowBox[{"invertedFrustum", "[", 
       RowBox[{"hCone", ",", " ", "rmid", ",", " ", "rbottom"}], "]"}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"specRules", " ", "=", " ", 
      RowBox[{"{", " ", 
       RowBox[{
        RowBox[{"hTot", " ", "\[Rule]", " ", "14.81"}], ",", " ", 
        RowBox[{"rtop", " ", "\[Rule]", " ", 
         RowBox[{"5.46", " ", "/", "2"}]}], ",", " ", 
        RowBox[{"rbottom", "\[Rule]", " ", 
         RowBox[{"2.64", "/", "2"}]}], ",", " ", 
        RowBox[{"wallBottom", " ", "\[Rule]", " ", 
         RowBox[{"16.06", " ", "-", " ", "14.81"}]}], ",", " ", 
        RowBox[{"\[Alpha]Cone", " ", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"toRadian", "[", "17.5", "]"}], "/", "2"}]}]}], "}"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"printCell", "[", 
        RowBox[{"specificationSays", "[", "specRules", "]"}], "]"}], ";"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{"conicalTestTube", "[", 
       RowBox[{"cylinderPart", ",", " ", "conePart", ",", " ", 
        RowBox[{"emptyCylinder", "[", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rules", " ", "=", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"hCone", " ", "\[Rule]", " ", 
         RowBox[{"hTot", " ", "-", " ", "hCyl"}]}], " ", "}"}], " ", "~", 
       "Join", "~", " ", "cylinderRules", " ", "~", "Join", "~", " ", 
       "specRules"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{"tube", " ", "//.", " ", "rules"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"vol", " ", "=", " ", 
      RowBox[{"volume", "[", "tube", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"capacity", " ", "=", " ", "200"}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"assumpts", " ", "=", "  ", "True"}], ";", "\[IndentingNewLine]", 
     RowBox[{"solns", " ", "=", " ", 
      RowBox[{"Solve", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"vol", "\[Equal]", "capacity"}], " ", "&&", " ", 
         "assumpts"}], ",", " ", 
        RowBox[{"{", "hCyl", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soln", " ", "=", " ", 
      RowBox[{"First", " ", "@", " ", "solns"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tube", " ", "//.", " ", "soln"}], " ", "//", " ", 
      "toCartesian"}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modelledBioRad1", " ", "=", " ", 
   RowBox[{"modelBioRad1", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "modelledBioRad1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toDeg", "[", 
    RowBox[{
     RowBox[{"apexangle", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad1", "]"}], "[", "\"\<conical\>\"",
        "]"}], "]"}], " ", "*", " ", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"(", 
    RowBox[{"2", " ", "*", " ", 
     RowBox[{"rsmall", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad1", "]"}], "[", "\"\<conical\>\"",
        "]"}], "]"}]}], ")"}]}], 
  ";"}]}], "Input",ExpressionUUID->"1ac80817-3637-49c4-9880-ff56ccc1b2c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["V2", \
"Subsubsection",ExpressionUUID->"d73e5164-5e2b-48e5-b7e0-71078d8d4e94"],

Cell["So instead we honor the apex angle of the cone (17.5\[Degree]).", \
"Text",ExpressionUUID->"988b436c-cb8e-4485-aba7-52715458a0cb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"modelBioRad2", "[", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "cylinderPart", ",", " ", "cylinderRules", ",", " ", "capacity", ",", 
      " ", "hCyl", ",", " ", "rtop", ",", " ", "rmid", ",", " ", "rbottom", 
      ",", " ", "conePart", ",", " ", "hCone", ",", " ", "specRules", ",", 
      " ", "rules", ",", " ", "hTot", ",", " ", "wallBottom", ",", " ", 
      "\[Alpha]Cone", ",", " ", "tube", ",", " ", "vol", ",", " ", "solns", 
      ",", " ", "soln", ",", "assumpts", ",", " ", "constraint", ",", " ", 
      "extra", ",", " ", "hCylMin"}], " ", "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "we", " ", "assume", " ", "the", " ", "top", " ", "is", " ", "an", " ", 
      "actual", " ", "cylinder", " ", "rather", " ", "than", " ", "an", " ", 
      "inverted", " ", "frustum"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"cylinderPart", " ", "=", " ", 
      RowBox[{"cylinder", "[", 
       RowBox[{"hCyl", ",", " ", "rtop"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cylinderRules", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{"rmid", " ", "\[Rule]", " ", "rtop"}], "}"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"conePart", "=", 
      RowBox[{"invertedFrustum", "[", 
       RowBox[{
       "hCone", ",", " ", "rmid", ",", " ", "\[Alpha]Cone", ",", " ", 
        "\"\<apexangle\>\""}], "]"}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"doesn", "'"}], "t", " ", "honor", " ", "rbottom", " ", "on", 
       " ", "its", " ", "own"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"specRules", " ", "=", " ", 
      RowBox[{"{", " ", 
       RowBox[{
        RowBox[{"hTot", " ", "\[Rule]", " ", "14.81"}], ",", " ", 
        RowBox[{"rtop", " ", "\[Rule]", " ", 
         RowBox[{"5.46", " ", "/", "2"}]}], ",", " ", 
        RowBox[{"rbottom", "\[Rule]", " ", 
         RowBox[{"2.64", "/", "2"}]}], ",", " ", 
        RowBox[{"wallBottom", " ", "\[Rule]", " ", 
         RowBox[{"16.06", " ", "-", " ", "14.81"}]}], ",", " ", 
        RowBox[{"\[Alpha]Cone", " ", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"toRadian", "[", "17.5", "]"}], "/", "2"}]}]}], "}"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"printCell", "[", 
        RowBox[{"specificationSays", "[", "specRules", "]"}], "]"}], ";"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{"conicalTestTube", "[", 
       RowBox[{"cylinderPart", ",", " ", "conePart", ",", " ", 
        RowBox[{"emptyCylinder", "[", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rules", " ", "=", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"hCone", " ", "\[Rule]", " ", 
         RowBox[{"hTot", " ", "-", " ", "hCyl"}]}], " ", "}"}], " ", "~", 
       "Join", "~", " ", "cylinderRules", " ", "~", "Join", "~", " ", 
       "specRules"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{"tube", " ", "//.", " ", "rules"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"vol", " ", "=", " ", 
      RowBox[{"volume", "[", "tube", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"capacity", " ", "=", " ", "200"}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"assumpts", " ", "=", " ", 
      RowBox[{
       RowBox[{"hCyl", " ", ">", " ", "0"}], " ", "&&", " ", 
       RowBox[{"hCyl", " ", "<", " ", "5"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"solns", " ", "=", " ", 
      RowBox[{"Solve", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"vol", "\[Equal]", "capacity"}], " ", "&&", " ", 
         "assumpts"}], ",", " ", 
        RowBox[{"{", "hCyl", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soln", " ", "=", " ", 
      RowBox[{"First", " ", "@", " ", "solns"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tube", " ", "//.", " ", "soln"}], " ", "//", " ", 
      "toCartesian"}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modelledBioRad2", " ", "=", " ", 
   RowBox[{"modelBioRad2", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "modelledBioRad2"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toDeg", "[", 
    RowBox[{
     RowBox[{"apexangle", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad2", "]"}], "[", "\"\<conical\>\"",
        "]"}], "]"}], " ", "*", " ", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"(", 
    RowBox[{"2", " ", "*", " ", 
     RowBox[{"rsmall", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad2", "]"}], "[", "\"\<conical\>\"",
        "]"}], "]"}]}], ")"}]}], 
  ";"}]}], "Input",ExpressionUUID->"bc1fd80e-d986-456a-b32b-788740c8d1b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["V3", \
"Subsubsection",ExpressionUUID->"e4935d2d-8b5b-4b1e-8bf7-96c404fc89fb"],

Cell[TextData[{
 "Next, we honor ",
 StyleBox["both ",
  FontSlant->"Italic"],
 "the apex angle and the bottom dimension. But to do that, we need to admit \
that the capacity of the well is greater than stated (which is almost \
certainly true)."
}], "Text",ExpressionUUID->"307372a2-7c9c-4edc-b540-2fedb5aef3dd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"modelBioRad3", "[", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "cylinderPart", ",", " ", "cylinderRules", ",", " ", "capacity", ",", 
      " ", "hCyl", ",", " ", "rtop", ",", " ", "rmid", ",", " ", "rbottom", 
      ",", " ", "conePart", ",", " ", "hCone", ",", " ", "specRules", ",", 
      " ", "rules", ",", " ", "hTot", ",", " ", "wallBottom", ",", " ", 
      "\[Alpha]Cone", ",", " ", "tube", ",", " ", "vol", ",", " ", "solns", 
      ",", " ", "soln", ",", "assumpts", ",", " ", "constraint", ",", " ", 
      "extra", ",", " ", "hCylMin", ",", " ", "hCylSoln"}], " ", "}"}], ",", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "we", " ", "assume", " ", "the", " ", "top", " ", "is", " ", "an", " ", 
      "actual", " ", "cylinder", " ", "rather", " ", "than", " ", "an", " ", 
      "inverted", " ", "frustum"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"cylinderPart", " ", "=", " ", 
      RowBox[{"cylinder", "[", 
       RowBox[{"hCyl", ",", " ", "rtop"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cylinderRules", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{"rmid", " ", "\[Rule]", " ", "rtop"}], "}"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"conePart", "=", 
      RowBox[{"invertedFrustum", "[", 
       RowBox[{
       "hCone", ",", " ", "rmid", ",", " ", "\[Alpha]Cone", ",", " ", 
        "\"\<apexangle\>\""}], "]"}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"doesn", "'"}], "t", " ", "honor", " ", "rbottom", " ", "on", 
       " ", "its", " ", "own"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"specRules", " ", "=", " ", 
      RowBox[{"{", " ", 
       RowBox[{
        RowBox[{"hTot", " ", "\[Rule]", " ", "14.81"}], ",", " ", 
        RowBox[{"rtop", " ", "\[Rule]", " ", 
         RowBox[{"5.46", " ", "/", "2"}]}], ",", " ", 
        RowBox[{"rbottom", "\[Rule]", " ", 
         RowBox[{"2.64", "/", "2"}]}], ",", " ", 
        RowBox[{"wallBottom", " ", "\[Rule]", " ", 
         RowBox[{"16.06", " ", "-", " ", "14.81"}]}], ",", " ", 
        RowBox[{"\[Alpha]Cone", " ", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"toRadian", "[", "17.5", "]"}], "/", "2"}]}]}], "}"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"printCell", "[", 
        RowBox[{"specificationSays", "[", "specRules", "]"}], "]"}], ";"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{"conicalTestTube", "[", 
       RowBox[{"cylinderPart", ",", " ", "conePart", ",", " ", 
        RowBox[{"emptyCylinder", "[", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rules", " ", "=", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"hCone", " ", "\[Rule]", " ", 
         RowBox[{"hTot", " ", "-", " ", "hCyl"}]}], " ", "}"}], " ", "~", 
       "Join", "~", " ", "cylinderRules", " ", "~", "Join", "~", " ", 
       "specRules"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{"tube", " ", "//.", " ", "rules"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"constraint", " ", "=", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"rsmall", "[", "conePart", "]"}], " ", "-", " ", "rbottom"}],
         ")"}], " ", "//.", " ", "rules"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"hCylSoln", " ", "=", " ", 
      RowBox[{"First", " ", "@", " ", 
       RowBox[{"Solve", "[", 
        RowBox[{
         RowBox[{"constraint", " ", "\[Equal]", " ", "0"}], ",", " ", 
         RowBox[{"{", "hCyl", "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{"tube", " ", "//.", " ", "hCylSoln"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"vol", " ", "=", " ", 
      RowBox[{"volume", "[", "tube", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"capacity", " ", "=", " ", 
      RowBox[{"200", " ", "+", "extra"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"assumpts", " ", "=", "  ", 
      RowBox[{"extra", " ", "\[GreaterEqual]", " ", "0"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"solns", " ", "=", " ", 
      RowBox[{"Solve", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"vol", "\[Equal]", "capacity"}], " ", "&&", " ", 
         "assumpts"}], ",", " ", 
        RowBox[{"{", "extra", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soln", " ", "=", " ", 
      RowBox[{"First", " ", "@", " ", "solns"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tube", " ", "//.", " ", "soln"}], " ", "//", " ", 
      "toCartesian"}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modelledBioRad3", " ", "=", " ", 
   RowBox[{"modelBioRad3", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "modelledBioRad3"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toDeg", "[", 
    RowBox[{
     RowBox[{"apexangle", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad3", "]"}], "[", "\"\<conical\>\"",
        "]"}], "]"}], " ", "*", " ", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"(", 
    RowBox[{"2", " ", "*", " ", 
     RowBox[{"rsmall", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad3", "]"}], "[", "\"\<conical\>\"",
        "]"}], "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"(", 
    RowBox[{"2", " ", "*", " ", 
     RowBox[{"rbig", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad3", "]"}], "[", "\"\<conical\>\"",
        "]"}], "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", "[", "modelledBioRad3", "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"280e5942-dc30-47fb-9371-8f9a22dc5c01"]
}, Open  ]],

Cell[CellGroupData[{

Cell["V4", \
"Subsubsection",ExpressionUUID->"df5f7eb6-ebaa-4024-abcf-a906387d4c43"],

Cell["\<\
In our fourth attempt, we use the experimentally-measured capacity volume of \
the well.\
\>", "Text",ExpressionUUID->"cf7f75b0-8e89-485d-adb1-2ebfdc0bc25e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"modelBioRad4", "[", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "cylinderPart", ",", " ", "cylinderRules", ",", " ", "capacity", ",", 
      " ", "hCyl", ",", " ", "rtop", ",", " ", "rmid", ",", " ", "rbottom", 
      ",", " ", "conePart", ",", " ", "hCone", ",", " ", "specRules", ",", 
      " ", "rules", ",", " ", "hTot", ",", " ", "wallBottom", ",", " ", 
      "\[Alpha]Cone", ",", " ", "tube", ",", " ", "volConstraint", ",", " ", 
      "solns", ",", " ", "soln", ",", "assumpts", ",", " ", "rConstraint", 
      ",", " ", "extra", ",", " ", "hCylMin", ",", " ", "hCylSoln"}], " ", 
     "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"cylinderPart", " ", "=", " ", 
      RowBox[{"invertedFrustum", "[", 
       RowBox[{"hCyl", ",", " ", "rtop", ",", " ", "rmid"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cylinderRules", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"conePart", "=", 
      RowBox[{"invertedFrustum", "[", 
       RowBox[{
       "hCone", ",", " ", "rmid", ",", " ", "\[Alpha]Cone", ",", " ", 
        "\"\<apexangle\>\""}], "]"}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"doesn", "'"}], "t", " ", "honor", " ", "rbottom", " ", "on", 
       " ", "its", " ", "own"}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "note", " ", "we", " ", "tweak", " ", "rtop", " ", "as", " ", "well", 
       " ", "to", " ", "try", " ", "account", " ", "for", " ", "the", " ", 
       "flare", " ", "at", " ", "the", " ", "top"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"specRules", " ", "=", " ", 
      RowBox[{"{", " ", 
       RowBox[{
        RowBox[{"hTot", " ", "\[Rule]", " ", "14.81"}], ",", " ", 
        RowBox[{"rtop", " ", "\[Rule]", " ", 
         RowBox[{"5.4", " ", "/", "2"}]}], ",", " ", 
        RowBox[{"rbottom", "\[Rule]", " ", 
         RowBox[{"2.64", "/", "2"}]}], ",", " ", 
        RowBox[{"wallBottom", " ", "\[Rule]", " ", 
         RowBox[{"16.06", " ", "-", " ", "14.81"}]}], ",", " ", 
        RowBox[{"\[Alpha]Cone", " ", "\[Rule]", " ", 
         RowBox[{
          RowBox[{"toRadian", "[", "17.5", "]"}], "/", "2"}]}], ",", " ", 
        RowBox[{"capacity", " ", "\[Rule]", " ", "235"}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"printCell", "[", 
        RowBox[{"specificationSays", "[", "specRules", "]"}], "]"}], ";"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{"conicalTestTube", "[", 
       RowBox[{"cylinderPart", ",", " ", "conePart", ",", " ", 
        RowBox[{"emptyCylinder", "[", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rules", " ", "=", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"hCone", " ", "\[Rule]", " ", 
         RowBox[{"hTot", " ", "-", " ", "hCyl"}]}], " ", "}"}], " ", "~", 
       "Join", "~", " ", "cylinderRules", " ", "~", "Join", "~", " ", 
       "specRules"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{"tube", " ", "//.", " ", "rules"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"rConstraint", " ", "=", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"rsmall", "[", "conePart", "]"}], " ", "==", " ", 
         "rbottom"}], ")"}], " ", "//.", " ", "rules"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"test", " ", "@", " ", "rConstraint"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"volConstraint", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"volume", "[", "tube", "]"}], " ", "\[Equal]", " ", 
        "capacity"}], " ", "//.", "rules"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"test", " ", "@", " ", "volConstraint"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"assumpts", " ", "=", " ", 
      RowBox[{
       RowBox[{"(", " ", 
        RowBox[{
         RowBox[{"hCyl", " ", ">", " ", "0"}], " ", "&&", " ", 
         RowBox[{"rmid", " ", ">", " ", "0"}], " ", "&&", " ", 
         RowBox[{"rmid", " ", "<", " ", "rtop"}]}], " ", 
        RowBox[{"(*", 
         RowBox[{"&&", " ", 
          RowBox[{"hCyl", " ", ">", " ", "5.7"}]}], "*)"}], " ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"choose", " ", "the", " ", "non"}], "-", 
          RowBox[{"cylinder", " ", "cylinderPart"}]}], " ", "*)"}], " ", 
        ")"}], " ", "//.", " ", "rules"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"solns", " ", "=", " ", 
      RowBox[{"Solve", "[", 
       RowBox[{
        RowBox[{
        "rConstraint", " ", "&&", "  ", "volConstraint", " ", "&&", " ", 
         "assumpts"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"rmid", ",", " ", "hCyl"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"test", " ", "@", " ", "solns"}], ";", "\[IndentingNewLine]", 
     RowBox[{"soln", " ", "=", " ", 
      RowBox[{"First", " ", "@", " ", "solns"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tube", " ", "//.", " ", "soln"}], " ", "//", " ", 
      "toCartesian"}]}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modelledBioRad4", " ", "=", " ", 
   RowBox[{"modelBioRad4", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "modelledBioRad4"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toDeg", "[", 
    RowBox[{
     RowBox[{"apexangle", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad4", "]"}], "[", "\"\<conical\>\"",
        "]"}], "]"}], " ", "*", " ", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"(", 
    RowBox[{"2", " ", "*", " ", 
     RowBox[{"rsmall", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad4", "]"}], "[", "\"\<conical\>\"",
        "]"}], "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"(", 
    RowBox[{"2", " ", "*", " ", 
     RowBox[{"rbig", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad4", "]"}], "[", "\"\<conical\>\"",
        "]"}], "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"(", 
    RowBox[{"2", " ", "*", " ", 
     RowBox[{"rsmall", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad4", "]"}], "[", 
       "\"\<cylindrical\>\"", "]"}], "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"(", 
    RowBox[{"2", " ", "*", " ", 
     RowBox[{"rbig", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad4", "]"}], "[", 
       "\"\<cylindrical\>\"", "]"}], "]"}]}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", "[", "modelledBioRad4", "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"bc56d8ac-ec96-42ac-8578-f392e28c602d"],

Cell["\<\
The height of the cylindrical part here (hCyl) seems unreasonably large, \
given the observed dimensions of the tubes. For the moment, at least, we don\
\[CloseCurlyQuote]t use this approach.\
\>", "Text",ExpressionUUID->"4517fb1f-7fdb-49cc-aea8-4a6913d6339d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["V5", \
"Subsubsection",ExpressionUUID->"568d5251-4792-4f67-882e-95e3dc02eb81"],

Cell["\<\
This analyzes the results of experiment E19110201. We made a plate with a \
patchwork of various volumes of Allura Red in water and adjacent water \
controls. We read the (one) plate six times on the plate reader at 504nm, \
three times at 0\[Degree] and three times at 180\[Degree], in an attempt to \
even out the variation in plate reader readings across the plate.\
\>", "Text",ExpressionUUID->"339bff4b-6766-481b-bbec-15568997a257"],

Cell["Load the plates and canonicalize orientation of plate.", \
"Text",ExpressionUUID->"7d923acc-150b-421c-963b-d07f1f9531c3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"plate1", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1.388`", ",", "0.398`", ",", "1.407`", ",", "0.43`", ",", "1.414`", 
       ",", "0.425`", ",", "0.972`", ",", "0.516`", ",", "0.981`", ",", 
       "0.535`", ",", "1.031`", ",", "0.546`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.399`", ",", "1.325`", ",", "0.436`", ",", "1.347`", ",", "0.464`", 
       ",", "1.311`", ",", "0.522`", ",", "0.859`", ",", "0.582`", ",", 
       "0.897`", ",", "0.553`", ",", "0.936`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "1.234`", ",", "0.443`", ",", "1.178`", ",", "0.437`", ",", "1.194`", 
       ",", "0.427`", ",", "0.892`", ",", "0.564`", ",", "0.848`", ",", 
       "0.591`", ",", "0.897`", ",", "0.507`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.408`", ",", "1.159`", ",", "0.431`", ",", "1.129`", ",", "0.441`", 
       ",", "1.174`", ",", "0.539`", ",", "0.81`", ",", "0.543`", ",", 
       "0.844`", ",", "0.547`", ",", "0.843`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "1.115`", ",", "0.397`", ",", "1.036`", ",", "0.461`", ",", "1.122`", 
       ",", "0.636`", ",", "0.748`", ",", "0.552`", ",", "0.818`", ",", 
       "0.627`", ",", "0.832`", ",", "0.518`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.429`", ",", "1.081`", ",", "0.437`", ",", "1.111`", ",", "0.452`", 
       ",", "1.102`", ",", "0.559`", ",", "0.756`", ",", "0.547`", ",", 
       "0.769`", ",", "0.553`", ",", "0.748`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.947`", ",", "0.416`", ",", "1.046`", ",", "0.48`", ",", "1.032`", 
       ",", "0.501`", ",", "0.723`", ",", "0.554`", ",", "0.726`", ",", 
       "0.565`", ",", "0.734`", ",", "0.541`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.412`", ",", "0.989`", ",", "0.428`", ",", "1.009`", ",", "0.479`", 
       ",", "1.012`", ",", "0.576`", ",", "0.677`", ",", "0.575`", ",", 
       "0.649`", ",", "0.536`", ",", "0.637`"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"MatrixPlot", "[", "plate1", "]"}], ",", " ", 
   RowBox[{"TableForm", "[", "plate1", "]"}]}], 
  "}"}]}], "Input",ExpressionUUID->"1b47b478-26f8-47dd-b2c5-ed6ea038fe26"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"plate2", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1.391`", ",", "0.397`", ",", "1.41`", ",", "0.428`", ",", "1.413`", 
       ",", "0.423`", ",", "0.974`", ",", "0.519`", ",", "0.986`", ",", 
       "0.53`", ",", "1.025`", ",", "0.548`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.403`", ",", "1.325`", ",", "0.441`", ",", "1.341`", ",", "0.46`", 
       ",", "1.303`", ",", "0.528`", ",", "0.854`", ",", "0.592`", ",", 
       "0.899`", ",", "0.563`", ",", "0.926`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "1.237`", ",", "0.441`", ",", "1.177`", ",", "0.443`", ",", "1.197`", 
       ",", "0.433`", ",", "0.891`", ",", "0.556`", ",", "0.858`", ",", 
       "0.595`", ",", "0.892`", ",", "0.506`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.412`", ",", "1.163`", ",", "0.434`", ",", "1.127`", ",", "0.444`", 
       ",", "1.171`", ",", "0.534`", ",", "0.824`", ",", "0.54`", ",", 
       "0.854`", ",", "0.543`", ",", "0.847`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "1.115`", ",", "0.398`", ",", "1.037`", ",", "0.461`", ",", "1.122`", 
       ",", "0.535`", ",", "0.748`", ",", "0.544`", ",", "0.818`", ",", 
       "0.635`", ",", "0.845`", ",", "0.515`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.447`", ",", "1.074`", ",", "0.439`", ",", "1.108`", ",", "0.453`", 
       ",", "1.097`", ",", "0.547`", ",", "0.761`", ",", "0.544`", ",", 
       "0.783`", ",", "0.55`", ",", "0.746`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.95`", ",", "0.414`", ",", "1.056`", ",", "0.484`", ",", "1.023`", 
       ",", "0.495`", ",", "0.713`", ",", "0.55`", ",", "0.719`", ",", 
       "0.562`", ",", "0.732`", ",", "0.537`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.407`", ",", "0.997`", ",", "0.431`", ",", "1.011`", ",", "0.477`", 
       ",", "1.005`", ",", "0.576`", ",", "0.671`", ",", "0.574`", ",", 
       "0.649`", ",", "0.531`", ",", "0.636`"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"MatrixPlot", "[", "plate2", "]"}], ",", " ", 
   RowBox[{"TableForm", "[", "plate2", "]"}]}], 
  "}"}]}], "Input",ExpressionUUID->"e2d717d7-456a-47b5-b0d3-57d5c7bd21bf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"plate3", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1.391`", ",", "0.397`", ",", "1.407`", ",", "0.427`", ",", "1.412`", 
       ",", "0.422`", ",", "0.97`", ",", "0.517`", ",", "0.979`", ",", 
       "0.534`", ",", "1.026`", ",", "0.547`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.4`", ",", "1.323`", ",", "0.455`", ",", "1.342`", ",", "0.482`", ",",
        "1.329`", ",", "0.525`", ",", "0.881`", ",", "0.62`", ",", "0.921`", 
       ",", "0.552`", ",", "0.928`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "1.236`", ",", "0.449`", ",", "1.197`", ",", "0.433`", ",", "1.227`", 
       ",", "0.434`", ",", "0.893`", ",", "0.556`", ",", "0.878`", ",", 
       "0.62`", ",", "0.891`", ",", "0.502`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.411`", ",", "1.162`", ",", "0.457`", ",", "1.156`", ",", "0.445`", 
       ",", "1.173`", ",", "0.533`", ",", "0.851`", ",", "0.537`", ",", 
       "0.876`", ",", "0.542`", ",", "0.871`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "1.115`", ",", "0.413`", ",", "1.06`", ",", "0.463`", ",", "1.121`", 
       ",", "0.553`", ",", "0.77`", ",", "0.543`", ",", "0.817`", ",", 
       "0.66`", ",", "0.869`", ",", "0.512`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.439`", ",", "1.08`", ",", "0.434`", ",", "1.109`", ",", "0.453`", 
       ",", "1.099`", ",", "0.546`", ",", "0.76`", ",", "0.544`", ",", 
       "0.806`", ",", "0.549`", ",", "0.747`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.963`", ",", "0.433`", ",", "1.057`", ",", "0.473`", ",", "1.042`", 
       ",", "0.526`", ",", "0.712`", ",", "0.55`", ",", "0.718`", ",", 
       "0.561`", ",", "0.732`", ",", "0.536`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.421`", ",", "0.998`", ",", "0.458`", ",", "1.004`", ",", "0.473`", 
       ",", "1.007`", ",", "0.578`", ",", "0.674`", ",", "0.574`", ",", 
       "0.648`", ",", "0.531`", ",", "0.635`"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"MatrixPlot", "[", "plate3", "]"}], ",", " ", 
   RowBox[{"TableForm", "[", "plate3", "]"}]}], 
  "}"}]}], "Input",ExpressionUUID->"c5581e69-e4c7-4d6a-8827-79eb063c5ec0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"plate4", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.636`", ",", "0.56`", ",", "0.641`", ",", "0.564`", ",", "0.65`", ",",
        "0.567`", ",", "1.019`", ",", "0.491`", ",", "1.04`", ",", "0.582`", 
       ",", "1.081`", ",", "0.591`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.503`", ",", "0.676`", ",", "0.565`", ",", "0.699`", ",", "0.524`", 
       ",", "0.696`", ",", "0.549`", ",", "1.093`", ",", "0.496`", ",", 
       "1.113`", ",", "0.593`", ",", "1.083`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.705`", ",", "0.506`", ",", "0.693`", ",", "0.53`", ",", "0.75`", ",",
        "0.564`", ",", "1.135`", ",", "0.494`", ",", "1.124`", ",", "0.532`", 
       ",", "1.159`", ",", "0.527`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.468`", ",", "0.726`", ",", "0.536`", ",", "0.819`", ",", "0.516`", 
       ",", "0.813`", ",", "0.574`", ",", "1.17`", ",", "0.476`", ",", 
       "1.21`", ",", "0.572`", ",", "1.193`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.77`", ",", "0.499`", ",", "0.785`", ",", "0.522`", ",", "0.848`", 
       ",", "0.531`", ",", "1.22`", ",", "0.497`", ",", "1.209`", ",", 
       "0.585`", ",", "1.256`", ",", "0.49`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.445`", ",", "0.837`", ",", "0.543`", ",", "0.859`", ",", "0.537`", 
       ",", "0.886`", ",", "0.486`", ",", "1.305`", ",", "0.495`", ",", 
       "1.317`", ",", "0.592`", ",", "1.352`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.859`", ",", "0.504`", ",", "0.855`", ",", "0.57`", ",", "0.931`", 
       ",", "0.556`", ",", "1.366`", ",", "0.541`", ",", "1.42`", ",", 
       "0.613`", ",", "1.45`", ",", "0.528`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.447`", ",", "0.937`", ",", "0.48`", ",", "0.98`", ",", "0.495`", ",",
        "0.978`", ",", "0.478`", ",", "1.5`", ",", "0.511`", ",", "1.516`", 
       ",", "0.538`", ",", "1.523`"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"MatrixPlot", "[", "plate4", "]"}], ",", " ", 
   RowBox[{"TableForm", "[", "plate4", "]"}]}], 
  "}"}]}], "Input",ExpressionUUID->"0b5b4354-4b57-488a-bf44-d5cb6fe8cf8f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"plate5", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.645`", ",", "0.559`", ",", "0.633`", ",", "0.573`", ",", "0.641`", 
       ",", "0.568`", ",", "1.019`", ",", "0.49`", ",", "1.037`", ",", 
       "0.588`", ",", "1.079`", ",", "0.595`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.501`", ",", "0.675`", ",", "0.56`", ",", "0.698`", ",", "0.524`", 
       ",", "0.698`", ",", "0.546`", ",", "1.095`", ",", "0.499`", ",", 
       "1.116`", ",", "0.595`", ",", "1.089`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.701`", ",", "0.502`", ",", "0.695`", ",", "0.531`", ",", "0.749`", 
       ",", "0.565`", ",", "1.135`", ",", "0.5`", ",", "1.126`", ",", 
       "0.532`", ",", "1.157`", ",", "0.527`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.469`", ",", "0.728`", ",", "0.539`", ",", "0.819`", ",", "0.521`", 
       ",", "0.818`", ",", "0.574`", ",", "1.167`", ",", "0.477`", ",", 
       "1.213`", ",", "0.573`", ",", "1.194`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.773`", ",", "0.495`", ",", "0.787`", ",", "0.522`", ",", "0.854`", 
       ",", "0.533`", ",", "1.22`", ",", "0.498`", ",", "1.212`", ",", 
       "0.59`", ",", "1.256`", ",", "0.491`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.456`", ",", "0.83`", ",", "0.545`", ",", "0.865`", ",", "0.541`", 
       ",", "0.888`", ",", "0.489`", ",", "1.307`", ",", "0.5`", ",", 
       "1.318`", ",", "0.596`", ",", "1.347`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.879`", ",", "0.469`", ",", "0.853`", ",", "0.572`", ",", "0.933`", 
       ",", "0.548`", ",", "1.368`", ",", "0.539`", ",", "1.422`", ",", 
       "0.616`", ",", "1.449`", ",", "0.528`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.436`", ",", "0.942`", ",", "0.485`", ",", "0.98`", ",", "0.501`", 
       ",", "0.98`", ",", "0.48`", ",", "1.503`", ",", "0.513`", ",", 
       "1.514`", ",", "0.54`", ",", "1.524`"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"MatrixPlot", "[", "plate5", "]"}], ",", " ", 
   RowBox[{"TableForm", "[", "plate5", "]"}]}], 
  "}"}]}], "Input",ExpressionUUID->"a20194c0-642f-46cf-a70f-af8197995e27"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"plate6", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.648`", ",", "0.57`", ",", "0.636`", ",", "0.578`", ",", "0.64`", ",",
        "0.585`", ",", "1.018`", ",", "0.491`", ",", "1.037`", ",", "0.593`", 
       ",", "1.078`", ",", "0.601`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.51`", ",", "0.675`", ",", "0.564`", ",", "0.698`", ",", "0.526`", 
       ",", "0.697`", ",", "0.554`", ",", "1.105`", ",", "0.497`", ",", 
       "1.119`", ",", "0.603`", ",", "1.095`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.702`", ",", "0.502`", ",", "0.698`", ",", "0.531`", ",", "0.75`", 
       ",", "0.565`", ",", "1.135`", ",", "0.5`", ",", "1.124`", ",", 
       "0.531`", ",", "1.158`", ",", "0.526`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.468`", ",", "0.73`", ",", "0.539`", ",", "0.821`", ",", "0.521`", 
       ",", "0.819`", ",", "0.578`", ",", "1.168`", ",", "0.475`", ",", 
       "1.219`", ",", "0.578`", ",", "1.193`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.77`", ",", "0.496`", ",", "0.788`", ",", "0.523`", ",", "0.856`", 
       ",", "0.531`", ",", "1.221`", ",", "0.499`", ",", "1.217`", ",", 
       "0.596`", ",", "1.256`", ",", "0.49`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.454`", ",", "0.838`", ",", "0.543`", ",", "0.864`", ",", "0.546`", 
       ",", "0.885`", ",", "0.488`", ",", "1.317`", ",", "0.499`", ",", 
       "1.323`", ",", "0.599`", ",", "1.347`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.88`", ",", "0.466`", ",", "0.851`", ",", "0.571`", ",", "0.933`", 
       ",", "0.556`", ",", "1.371`", ",", "0.541`", ",", "1.422`", ",", 
       "0.618`", ",", "1.45`", ",", "0.528`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.435`", ",", "0.939`", ",", "0.482`", ",", "0.982`", ",", "0.501`", 
       ",", "0.979`", ",", "0.48`", ",", "1.504`", ",", "0.514`", ",", 
       "1.514`", ",", "0.54`", ",", "1.524`"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"MatrixPlot", "[", "plate6", "]"}], ",", " ", 
   RowBox[{"TableForm", "[", "plate6", "]"}]}], 
  "}"}]}], "Input",ExpressionUUID->"27683de9-c998-4d30-b5b1-9310aa17f3ad"],

Cell["\<\
We want to normalize all the plates to have the same orientation\
\>", "Text",ExpressionUUID->"0847fd4a-f3d4-41a2-b602-89d6cab7928d"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "rot90", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rot90", "[", "mat_", "]"}], " ", ":=", " ", 
  RowBox[{"Transpose", "[", 
   RowBox[{"Reverse", "[", 
    RowBox[{"mat", ",", " ", 
     RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plate4", " ", "=", " ", 
   RowBox[{"rot90", " ", "@", " ", 
    RowBox[{"rot90", " ", "@", " ", "plate4"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plate5", " ", "=", " ", 
   RowBox[{"rot90", " ", "@", " ", 
    RowBox[{"rot90", " ", "@", " ", "plate5"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plate6", " ", "=", " ", 
   RowBox[{"rot90", " ", "@", " ", 
    RowBox[{"rot90", " ", "@", " ", "plate6"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Row", " ", "@@", " ", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"plate4", " ", "//", " ", "MatrixPlot"}], ",", " ", 
     RowBox[{"plate5", " ", "//", " ", "MatrixPlot"}], ",", " ", 
     RowBox[{"plate6", " ", "//", " ", "MatrixPlot"}]}], "}"}], 
   "}"}]}]}], "Input",ExpressionUUID->"15bdce81-b02a-4d1e-90bb-07fdc158e27b"],

Cell["\<\
We subtract each sample well (containing Allura Red in water) from its \
immediately horizontally adjacent control well (that contains only water).\
\>", "Text",ExpressionUUID->"70a51f8f-10b6-448b-baf1-2f91dd4a258c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"plates", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "plate1", ",", " ", "plate2", ",", " ", "plate3", ",", " ", "plate4", ",",
      " ", "plate5", ",", " ", "plate6"}], "}"}]}], 
  ";"}]], "Input",ExpressionUUID->"1c76202c-fc16-4c04-8275-40c4e409de9b"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "baselineSubtractPlate", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"baselineSubtractPlate", "[", "plate_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"Function", "[", 
    RowBox[{"row", ",", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nCols", " ", "=", " ", 
         RowBox[{"Length", "[", "row", "]"}]}], "}"}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"iPair", ",", " ", 
          RowBox[{"Abs", "[", 
           RowBox[{
            RowBox[{"row", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"2", " ", "iPair"}], " ", "-", "1"}], "]"}], "]"}], 
            " ", "-", " ", 
            RowBox[{"row", "[", 
             RowBox[{"[", 
              RowBox[{"2", " ", "iPair"}], "]"}], "]"}]}], "]"}]}], "]"}], "/@",
         " ", 
        RowBox[{"Range", "[", 
         RowBox[{"nCols", "/", "2"}], "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], "]"}], " ", "/@", " ", "plate"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MatrixPlot", " ", "@", " ", 
    RowBox[{"baselineSubtractPlate", "[", "#", "]"}]}], " ", "&"}], " ", "/@",
   " ", "plates"}]}], \
"Input",ExpressionUUID->"26965ee7-eb03-4857-941f-2034b973c6bf"],

Cell["\<\
The volumes we pipetted we obtain from the protocol definition.\
\>", "Text",ExpressionUUID->"1e3a3506-3720-410b-94bf-92443c2413d5"],

Cell[BoxData[{
 RowBox[{"plateVolumes", " ", "=", " ", 
  RowBox[{"Reverse", " ", "@", " ", 
   RowBox[{"{", 
    RowBox[{
    "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", ",", "35", 
     ",", "50", ",", "60", ",", "70", ",", "80", ",", "90", ",", "100", ",", 
     "125", ",", "150", ",", "175"}], "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"plateVolumes", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"#", ",", "#", ",", "#"}], "}"}], "&"}], "/@", " ", 
   "plateVolumes"}]}], "\[IndentingNewLine]", 
 RowBox[{"plateVolumes", " ", "=", " ", 
  RowBox[{"ArrayReshape", "[", 
   RowBox[{
    RowBox[{"Flatten", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"plateVolumes", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"1", ";;", "8"}], ",", " ", "All"}], "]"}], "]"}], ",", 
         " ", 
         RowBox[{"plateVolumes", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"9", ";;", "16"}], ",", " ", "All"}], "]"}], "]"}]}], 
        "}"}], ",", " ", 
       RowBox[{"{", "2", "}"}]}], "]"}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"8", ",", "6"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{"MatrixPlot", " ", "@", " ", "plateVolumes"}], 
  "}"}]}], "Input",ExpressionUUID->"c910b812-5aa5-4d99-abc4-e3427ef9ff97"],

Cell[TextData[{
 "By ",
 ButtonBox["Beer's Law",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Beer%E2%80%93Lambert_law"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Beer%E2%80%93Lambert_law"],
 ", the absorbance of each baseline subtracted plate in each well should be a \
linear factor times the depth of the well. Specifically, that factor should \
be the attenuation coefficient of ",
 ButtonBox["Allura Red",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Allura_Red_AC"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Allura_Red_AC"],
 " times the concentration."
}], "Text",ExpressionUUID->"f7edf108-c3f4-487c-adcc-c1e44867007c"],

Cell[BoxData[{
 RowBox[{"attenuation", " ", "\[Equal]", " ", 
  RowBox[{
  "absorptivity", " ", "depth", " ", 
   "concentration"}]}], "\[IndentingNewLine]", 
 RowBox[{"Solve", "[", 
  RowBox[{"%", ",", " ", "depth"}], 
  "]"}]}], "Input",ExpressionUUID->"ee395783-d419-468f-9a90-80c0c893cce1"],

Cell["The concentration of Allura Red is in all wells 32.2 \[Mu]M.", \
"Text",ExpressionUUID->"e8aba3f6-df48-45ce-a445-2e217ec4cca9"],

Cell[TextData[{
 "The absorptivity is ",
 ButtonBox["understood",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.webpages.uidaho.edu/ifcheng/Chem%20253/labs/Experiment%\
202%202015-02-13.docx"], None},
  ButtonNote->
   "http://www.webpages.uidaho.edu/ifcheng/Chem%20253/labs/Experiment%202%\
202015-02-13.docx"],
 " (see http://www.webpages.uidaho.edu/ifcheng/Chem%20253/labs/Experiment%202%\
202015-02-13.docx) to be 25,900 ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["M", 
    RowBox[{"-", "1"}]], TraditionalForm]],ExpressionUUID->
  "44cdbe50-852f-4bf5-92f5-ec92d99c6f9c"],
 " ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["cm", 
    RowBox[{"-", "1"}]], TraditionalForm]],ExpressionUUID->
  "6bd0189c-499b-4a9f-a839-7596e3dc96b5"],
 "."
}], "Text",ExpressionUUID->"df141818-a670-4ada-9cf5-2c72e28ae845"],

Cell[BoxData[{
 RowBox[{"Quantity", "[", 
  RowBox[{"25900", ",", " ", "\"\<per Molar per cm\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"UnitConvert", " ", "[", 
  RowBox[{"%", ",", " ", "\"\<per microMolar per mm\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", " ", "*", " ", 
  RowBox[{"Quantity", "[", 
   RowBox[{"32.2", ",", " ", "\"\<microMolar\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"absorptivityTimesConcentration", " ", "=", " ", 
  RowBox[{
  "QuantityMagnitude", "[", "%", 
   "]"}]}]}], "Input",ExpressionUUID->"f43bc144-99c6-4b20-b66a-18e4bab7028b"],

Cell["Let\[CloseCurlyQuote]s have a quick look at this data.", \
"Text",ExpressionUUID->"e218b1c4-c2ed-4e13-b87c-1b9275b2bf55"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "plateVolumeAndDepth", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plateVolumeAndDepth", "[", "plate_", "]"}], " ", ":=", " ", 
  RowBox[{"pairUp", "[", 
   RowBox[{
    RowBox[{"Flatten", "[", "plateVolumes", "]"}], ",", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"baselineSubtractPlate", "[", "plate", "]"}], " ", "/", " ", 
      "absorptivityTimesConcentration"}], "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plateData", " ", "=", " ", 
   RowBox[{"Join", " ", "@@", " ", 
    RowBox[{"(", 
     RowBox[{"plateVolumeAndDepth", " ", "/@", " ", "plates"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"plateVolumeAndDepth", "[", "#", "]"}], "&"}], "/@", " ", 
    "plates"}], ",", " ", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"ListPlot", "[", "plateData", "]"}], 
   "*)"}]}]}], "Input",ExpressionUUID->"7485fde3-7aa8-4f2c-8ffe-ff8603df7ce0"],

Cell["We model and fit the data", \
"Text",ExpressionUUID->"f665f9f9-382b-4306-960e-44a09dccb251"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "modelBioRad5", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"modelBioRad5", "[", "]"}], " ", ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "cylinderPart", ",", " ", "cylinderRules", ",", " ", "capacity", ",", 
      " ", "hCyl", ",", " ", "rtop", ",", " ", "rmid", ",", " ", "rbottom", 
      ",", " ", "conePart", ",", " ", "hCone", ",", " ", "specRules", ",", 
      " ", "rules", ",", " ", "hTot", ",", " ", "wallBottom", ",", " ", 
      "\[Alpha]Cone", ",", " ", "tube", ",", " ", "vol", ",", " ", "solns", 
      ",", " ", "soln", ",", "assumpts", ",", " ", "constraint", ",", " ", 
      "extra", ",", " ", "hCylMin", ",", " ", "hCylSoln", ",", " ", 
      "genericDepth", ",", " ", "errors", ",", " ", "err", ",", " ", "min", 
      ",", " ", "tubeRules", ",", " ", "data", ",", " ", "dataAssumptions"}], 
     " ", "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"data", " ", "=", " ", "plateData"}], ";", "\[IndentingNewLine]", 
     RowBox[{"dataAssumptions", " ", "=", " ", 
      RowBox[{"(*", 
       RowBox[{
       "20000", " ", "<", " ", "alluraRedAbsorptivity", " ", "<", " ", 
        "30000"}], "*)"}], " ", "True"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "we", " ", "assume", " ", "the", " ", "top", " ", "is", " ", "an", " ", 
       "actual", " ", "cylinder", " ", "rather", " ", "than", " ", "an", " ", 
       "inverted", " ", "frustum"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"cylinderPart", " ", "=", " ", 
      RowBox[{"cylinder", "[", 
       RowBox[{"hCyl", ",", " ", "rtop"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cylinderRules", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{"rmid", " ", "\[Rule]", " ", "rtop"}], "}"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"conePart", "=", 
      RowBox[{"invertedFrustum", "[", 
       RowBox[{"hCone", ",", " ", "rmid", ",", " ", "rbottom"}], "]"}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Here", ",", " ", 
       RowBox[{
       "from", " ", "the", " ", "spec", " ", "we", " ", "only", " ", "use", 
        " ", "the", " ", "total", " ", "interior", " ", "height", " ", "of", 
        " ", "the", " ", "well", " ", 
        RowBox[{"(", 
         RowBox[{"which", " ", "we", " ", 
          RowBox[{"don", "'"}], "t", " ", "have", " ", "in", " ", "our", " ", 
          "data"}], ")"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"specRules", " ", "=", " ", 
      RowBox[{"{", " ", 
       RowBox[{"hTot", " ", "\[Rule]", " ", "14.81"}], " ", "}"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"We", " ", "model", " ", "the", " ", "whole", " ", "tube"}], 
       ",", " ", 
       RowBox[{"all", " ", "at", " ", "once"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{"conicalTestTube", "[", 
       RowBox[{"cylinderPart", ",", " ", "conePart", ",", " ", 
        RowBox[{"emptyCylinder", "[", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rules", " ", "=", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"hCone", " ", "\[Rule]", " ", 
         RowBox[{"hTot", " ", "-", " ", "hCyl"}]}], " ", "}"}], " ", "~", 
       "Join", "~", " ", "cylinderRules", " ", "~", "Join", "~", " ", 
       "specRules"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{"tube", " ", "//.", " ", "rules"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"We", " ", "fit", " ", "the", " ", "data"}], " ", "*)"}], " ", 
     "\[IndentingNewLine]", 
     RowBox[{"Clear", "[", "genericDepth", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"genericDepth", "[", "part_", "]"}], " ", ":=", " ", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"expr", ",", " ", "v"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"expr", " ", "=", " ", 
          RowBox[{"depthFromVolume", "[", 
           RowBox[{"part", ",", " ", "v"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"genericDepth", "[", "part", "]"}], " ", "=", " ", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "vol", "}"}], ",", " ", 
            RowBox[{"expr", " ", "/.", " ", 
             RowBox[{"{", 
              RowBox[{"v", " ", "\[Rule]", " ", "vol"}], "}"}]}]}], 
           "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"errors", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"vol", ",", " ", "depth"}], "}"}], ",", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"genericDepth", "[", "tube", "]"}], "[", "vol", "]"}], 
              " ", "-", " ", "depth"}], ")"}], "^", "2"}]}], "]"}], " ", "@@",
          " ", "#"}], "&"}], " ", "/@", " ", "data"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"err", " ", "=", " ", 
      RowBox[{
       RowBox[{"Total", "[", "errors", "]"}], " ", "//", " ", "N"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"min", ",", " ", "tubeRules"}], "}"}], " ", "=", " ", 
      RowBox[{"NMinimize", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"err", ",", " ", 
          RowBox[{
           RowBox[{"assumptions", "[", "tube", "]"}], " ", "&&", " ", 
           RowBox[{"assumptions", "[", "tube", "]"}], " ", "&&", " ", 
           "dataAssumptions"}]}], "}"}], ",", " ", 
        RowBox[{"Union", "[", 
         RowBox[{
          RowBox[{"variables", "[", "tube", "]"}], ",", " ", 
          RowBox[{"variables", "[", "data", "]"}]}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"tubeRules", ",", "  ", 
       RowBox[{"tube", " ", "/.", " ", "tubeRules"}]}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"modelledBioRad5Rules", ",", " ", "modelledBioRad5"}], "}"}], " ",
    "=", " ", 
   RowBox[{"modelBioRad5", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "modelledBioRad5Rules"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "modelledBioRad5"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"toDeg", "[", 
    RowBox[{
     RowBox[{"apexangle", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad5", "]"}], "[", "\"\<conical\>\"",
        "]"}], "]"}], " ", "*", " ", "2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"(", 
    RowBox[{"2", " ", "*", " ", 
     RowBox[{"rsmall", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad5", "]"}], "[", "\"\<conical\>\"",
        "]"}], "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"(", 
    RowBox[{"2", " ", "*", " ", 
     RowBox[{"rbig", "[", 
      RowBox[{
       RowBox[{"parts", "[", "modelledBioRad5", "]"}], "[", "\"\<conical\>\"",
        "]"}], "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", "[", "modelledBioRad5", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"expr", " ", "=", " ", 
  RowBox[{"depthFromVolume", "[", 
   RowBox[{"modelledBioRad5", ",", " ", "vol"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{"expr", ",", " ", 
     RowBox[{"{", 
      RowBox[{"vol", ",", " ", "0", ",", " ", "200"}], "}"}], ",", " ", 
     RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", " ", 
     RowBox[{"AxesOrigin", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", 
     " ", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ListPlot", "[", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"plateVolumeAndDepth", "[", "#", "]"}], "&"}], "/@", " ", 
      "plates"}], ",", " ", 
     RowBox[{"AxesOrigin", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", 
     " ", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]}], 
  "\[IndentingNewLine]", 
  "]"}]}], "Input",ExpressionUUID->"316f1c93-2ac9-4fb0-87a7-3eba68c4e13e"],

Cell[TextData[{
 "While not perfect, the values above compare favorably with the nominal \
values from the spec:\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
ZWe/ePlyvpXqtwH84vCzNpOe09oQFAsSQGWd3b1AXylJKYmJyYkJSQnxCfHx
CQ1NTeAyzKDuBvr6qyurq6qIVdU1lEgj78ixMds7u5pIpFQsFipJTcHiUlN7
kcmpA7MRnB8Dxenr7u7Nz8/PSM8AhklJxmZm5dQ3No5Otzz//YFvJgjlYGAt
6ASqzEAeeg8NNj4nQW3xsXGJCYkpySnNz58DQ85tdBcwLCc7Jz42/hwvn66O
7pSwKrY21ls20j8Mn18+BHJgOnFSQkyioAAPn6n54CwTSsqcnV2BD3Nyc8E3
XAR8CL8s/IIZT9Pz8/JpbQuKBYmy8org4JBrIte20G86cew4FwcnBwsrG/Op
0AcPyA+cP3qNxCckMjEx8fNfkpGTT0tLg5w3b8AhmLC6bSUuJsbJzs7CxHT0
MOOxw4y3rW3cPLxAN35xJMzR0fHMzKyQkFA2VlaWU8wnjh49efw4tK5vZJSa
hpshoBw4OKc5OIWuCBUXl9bUImwA1wsQY1oaDniA/8LFI4cOH9x/8MDeAyam
FvcfhHZ1z+WcE2iLUF75FJd+WUjY2NQM2Xv0zfs7goOD/Y5t2x+Rl6HNH+C+
xsnKKicj+6youOn5+1DPoBWfPkm3trFVkFecPDN5QQOcVnBOf1+95hDDAVrb
gmJBorSU4OcboKqido6HV/qmlJqyirKisuItJSDDAjx+Wj6ETJB8ISEh+/ft
5+M7r6yilv40HfL7BgfaO7stzS0kJSTlZeVvKSjISN6UlpQyNbO0d3LuGxwc
Gh2Z1gaKzw6kN23Ud8pzmLBHjz29fK9dE70hJiYrIyMrJSMlLW1iaubvfxc0
6pRDRsmPiZqek+CrY0ePgjwrLS0n1je+IzPky7a22JhYoHFpaTkwT0JcXPyG
uKGhsY2tHbiNXz+kky2vrKoBJr96XdTEzByk+OS9R8l8uOPR40dTjhofR8ah
h/yaYGy6VyEfAjoLChw0MHwgPyd8z7qNTY2n2djlET581tj8fo1MTTUxKQlr
YXlbRkauYrHw4fir8YGhoQ1r/zjKyEhrW1AsSOTm5YF+A6+xorpmljOjOjq7
45KwamqYJf/9iY2NzdzqTkEhEtItKzsnNDRMT0cPJAd18RdwnYoaRtfAkFBZ
Xds4/Zq1zq5uZJVTY1N9czOw4pRvwY1tfN4MRAj1JCZji8jhkkZGR4G7nByd
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
pkPJ7u7eLztJAu8Gwu+rqoaBwWxqWSRbz8wAUAjjY+MWZuZwtvv6+Le1dc5H
2BMU3yHwz57BFbNx7TpgMEpYgBkSOJ5bNiKsuP6PdTdvSpmaWZzjO8d2ikXg
ksCVy5fBcYaExIeUkdn7976TJ5ikZeREb4jzX7h4XeSaooK8kb6hg72Dp7u7
n48vaDNvgKe3j6cX+RMC+ID8Sckhf4X8C5+9kD//+Tw5f9Jn6oGQAnx9vdzd
rCws9fX0kYhu8rduKarIyMlLSckAObMwndTV1nFycHRzcXVzdQXFOE2LH372
8vaeResfLUA+2hJM0tWLiIxIx+FycnPz8vLzyQ/6IOXm5OLSnuTm5vZ099bV
1EY8fhwcFOzu6urp7uEzZaD+Z2R8fLy8zYyNLUzNPN3dvNw9YGx9vd8X8PLw
gHxfL29/H//GL91VMMDf/7rI9UuXBM7xna+srFz0872R8MvVtaqKKnDOm5qY
pacvqoDqKGaAi6s7RlOHbtXqj+3xNDn9uppu+5atBw8eZmJiAqID7+0i/yVg
GMrDOvA6paWkRK+L3rghJiktC2QIBWRk5ECbHT54GA7f8Me6QwwMl/gvyt6U
lropBb62mJg4CA/4QE3w5785EpRQjdTP8C98hhzq58mHUw+UkrwJ9V+8wL+W
7tfdO3aBedLSMuZWdzS1dBTkFS9evHiagw1Mmq5F5DP89TWtf3jgv5+RtHXz
VhiHCxf4kWjA+kaGRmYmhkaUZKSnD2Yb6BtWlFempmAhBxxhiqyduV3Ra6L/
zMfm4xMgjy38ENR2oSj8IjclJeVkZIuKir7sJPH18RO6LLTzr510q+hy83In
Jiam3ati0aC2tj4qKlrgkiAM7PVr18EPanq++FUxCoCyqtrps9w83LyQrgoJ
CV8REgYXd3K6evWa0FVB0AbcvCzMzAwHDgpevnxLSRkUF/ihFpa3bW1tg4OC
wkIfxMcnQoqJRhD26HHwvRB7B2ddfUMBgctQ+alTp86fuwBXN0iyhDgomRAf
Gx8XExcXEwsfqAn+pOTE/fM57v3nfwrETfk85UBIUD+oUDZWtvPnLyC0fEtJ
VV3T0sraw9PnbkDA/Xv3oqIiP2wx/sMWv6T1uGkroSRTYxMZyZsYdYy2tjYI
D3MzCwszM0iWZhbmpuY62jqgHu9YWYO0y8ClY1OwUVFRMTExM7cbERGx4ufl
69b+oaWlDfoTGdvJxsfEwi+CjEl84hfsKjg2NtbX129nY8vFeQb8gp+XLMvO
yX7zZpHrQzy+wMbGloONDfjwkoCAubl53eJa1oTiYwCtsn79RmNjM3sHp9AH
IUBroaFhkxPgYXgYeEzgYEpJSYMyxGhquXv56JA3MI2NTczNyZvydOXN69dd
PX3ExmYkqoyD0/kLF2+IS4AKNTAyAZ1WUkL4Bv2qrK4CB1lFDWNkZqGC0QQD
3D29MrNzKKHFaYXKisr0NJyri6uFuYWV5W3r2/+kO1Y2kOCDno42Gyurro7u
7OuEwV9Dt2bbX9v9/ALh55hbg/sGBhtJJAMDw2OMjGtW0wE/ZGVnL3p/ORWL
BTl9cN8B6C/IAC0NjZrqGlobhWJ+0dHR3djcDM7UsaPHnz7BEcorGurqGqZF
Y2NpScnTNJyWhub+/QyiYhKGRqZAnUkpyVAD1DN1/iF5E8yBoUH4NiUFq6au
CbwEvjPoSTkFxSzyWpX5A/BDZWUltKusigHfkf/CRUND47iEZODh9vbOD+P0
fkv09fa1vmyrqKgoLkFQ+j4RyKkkNiaWmYlJWUm5+Tmpp2dWrz+gvz8vWfob
3RpFRWTu09wa3EQiZWRlS0vJ/LV5C93K1T8vXZqclNLd07NoNlyYFo8ePgRx
uHkjPfAh91kujJpadfXUcPcoFhlqa+vzCwulZWR5uXnaJ81SnhYDg4PAiyYm
ptt37OK/KAjklpmT3dnb/eF6limoqqwG5aOrqw9qTVRc8rKQMA6Hm7M+TIeh
kREsNjU07CEo0uuioocYGG5bWnV2943QlAlniarq6hPHT8hIy5GDUczqmRVl
/TLl+aHmXMdzqKoiRkVFX718Zd1vv6/+ZeWKZcuiY6Inx2NflLgbcHf3jt2/
rf4VBpbrzFlVZRU4jWltFIr5RVRUlI2tHThtlpZW/Z/aVQpEIJCntpYO8KGA
wGV1VQzIm/FXn95ugNTS8vDRY319Q+aTzIcPM+7bsy8yMnLuOjENBkeGE5NS
gu6H3FJUERIWPsJ41N7BkbqHy3eO6uoaNuZTtxQUykoJlGAUM6Otrb2h+fn8
8WEBHu/p6c3JzgkSdOXPy1ct/8XG1uZxVPQnpwwtaPh6eW9Yu55u1Sro9eGD
B8/z8mVmZvUPDi2IUwjFl8HXzx/cWFc3Tz+/wMGh4ZkLv2hrh1MCo64BfCgo
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
k/gGzw8pfGhqYgYtamhou7q6Z2XPFHGRwof7du85uO8AhQ/7BgfjElPWr9+4
Zetfc8WHo2PjUK2pqTmVD4Pu309Nw/Hw8HJynikuLSsjR5Tq6++Pio4BCW1u
dSc+YSY3nwIyH45+Az5E36egWExoaX3x9AkOxNItRZWkZGxPT9+rV58Rwq6k
hODg7KyhqQ2cBhe1l6dP0/Pm2RwIrfT39z+MeCxwWVBAUODiJcG7gUHzyodt
bW262rrqqhgxcQlNjBaI4dyc3BnK/6MPd+9h2P8PH/YPDsYnJm/csHHbljnT
h6NjY30DgyamFlQ+vBcSkvYknZPzNAuiD/HPyGHDv4gPv4U+RPkQxWJCRWWl
j7e35Z07GE2dnNyZ+GFaFBeX2Ds4YTS0r4neuGNte/9BaMvnBA2IiHjMzsJ8
lhPZOT3A/y6hsnpwZL74kNTSguyydP0GaFGMukZAYBDl0dzH8G2eH46QNyIx
MTWb8vyQ+cRJxkOH4ENOXsG7L+HDb/L8EOVDFIsLeHyhhanZndvWdvaOpaWf
vYPJs2clNrZ2auqaIiLXgRijY2Lb2mb1OoaC+Ni4ixfOnePj5ebm8fe/W1ZR
NX982PycdE1YRFDwMtdZblVV9ZTk1JlD8UyrDxMTk+aWD0Ef9vcPmJiYgiBE
+HD9xpiYmKLiku1b/9r4x7q4hOS0NNw7Mh9GRkeDKz1bPnz9enhs7M8NG08e
O/415s0M9PkhikWGzIxMVUVlmzvWcO0TiXWfezi+6NltaxugFxBd7m4eSHjM
rs+I+JSSnCJ6XfTixUtnznIDH87rej0SiSQkePn8uXNHjx5XVlYuLi6dHEDm
Q0z7/DAhYY75ENlQZnDQxNiEk51j57YdmzfQp2JTibUNdKtWL1uyFGyII193
iD6Mig4Kni0fvnr1Cu4sv69ec4jhwNeYNzPQ98soFg3Gx8c7u7rg4lKQV0Qe
puXlt3/+HnP5hYWm5rdvKakIXRUO8A8EufjJLQYmIzs7R09XT/SGOOcZLl8/
/3l9fgj6UFhImPssN/269ZISEvWNjd0zvkl//375X31Ieb88t88P37x+PfH6
lZmJKRsr245t20Ef5uXld3R2rVlNB3z4MCIqLjEFisGogla8H/LA0NgMhOIn
qwV9CP6ysLCwspLy15g3M2xsbI4fOerp7p75NB1Yff4a+k6A8uEixvDIaEND
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
NnbS0peEhESMje+YW1huPD4EnTw/Px8fHy97+XJ0XNwX4cOOru7snFx5ObmD
ew+AOPx+82YLS6sHkdEbexbi40e5auoaXBycUOqr8lft7B2KS0o6n3eveANf
DF8WPb29FGRkZ06cAonIxc7h7uJqb2NrYmT0oWQOhGJhKX1BSlQYWUW7b/ce
6AXlldWf207wAScmJu2dXUzMLSnJyWmpqG4bGrm6uM4vzDe1NN/S0THQ08Mb
aWpsbGpsYn7H1NLMDNkNTUZWTOKCmLiEvYOjq5vHhuTDufn5hIREeTl5GK2+
CB++GBgsq6xSVVU/Rnps65afoG34+vrDQDm3jtF11h9RkZGMjIxHSI78uv1n
Olo6AYHzETExldU1XzYqL4YVo79/UIBfgIuLh4KMgpuDU01F1VDfwMneEVjR
ztr6X8nGxhb+Y2ljY2nFycXNysZGSnqUhZmlpLS0vqnlc9v5BreFIlCxtrbO
Lzt+3f3bHhiOb982RuJkdnSY3jG1MDMHI8E8S0traysbWxs7V2dnTw83EWFh
GioaIENgxcCA4Hv3wzcqH8YnJFy+IhcbnzAwOLL+fAiKaHpmxtXZRYCHb9cv
SJzJzMysiampr/3r1ccR4Oe/9/c9O3f8vP2nbft37yU9TBLgH/SktHx2buPP
Rd+QGBwcBK44LyhMT0cPfHjl8mUdLW1QiU4Ojg52doTJ3gH+52gHRGNtzcLC
AsMiJSU1Hx8/qIKWtvb1sdbM9I6GhsZPW37avm2HtJS0rvYtONjZ3QU8CRyI
GGlja2tjb4+LlO7l4R7g683PwweKBcooe0Xu7t3wqNjYDcyHsigfDo2gX97X
kw9RAD9Iionv27UHt8y86Guv6k/Cx8tr+9bt237cum3Ljzu3/7J75y5fL9+S
4iffwtqcDQngQ6kLUufPCR4/doyVheWmqnpIaNjY6Pjo2NjoYiAH09IzExKT
KCiozpCRg+JS19Tu6x9Yt3fmYaFhvt7e9PRMDAxM4uIS6uoa4+PIptvDI6Mj
OBNHkDQ+gjO1rq4+v6Dgxo2bPHz8QPVc7Jytbc+GR8bXx9TPB9AeoXfvh4Td
DQoKzcxEIi6iH/dTU9OVlVXgyMLCwlvchHMzU3MpSamsjKzy8gpivsWvHuHh
4cpK10j/OPL9d98/eW8/4o2HyAhke+V9v+/ZvGkT+Rnyc3wCxUXFhBvKY/i6
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
aw==
     "], {{0, 263}, {432, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{432, 263},
   PlotRange->{{0, 432}, {0, 263}}]], "Input",ExpressionUUID->
  "c5eb42bb-9aba-445c-a1d6-3b2542df089d"]
}], "Text",ExpressionUUID->"dca43905-7019-4a87-9aa0-3e7c99f47f40"],

Cell[TextData[{
 "Also, the predicted to-the-top volume is just shy of 240 \[Mu]L, which \
matches experimental data well: In picture, from L to R: 255, 250, 240, and \
230 uL\n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJxsvVeXXMl1NaiZeZnH+QvzOj9gZrhEiVJ7NGwZeI8GGm1QFgC72fRepCRS
lKX5JDXbooHyWem99957770pbzD7RGQlivxmrbNiRWVlZeWNG3H23idOnPt/
3pkZf/t//Yu/+IuH/zua8dsf/O38/O1vTfwf+OH89MN370/fu3ti+tG9+/fm
/987/xtefPt/+Yu/+L/wfurfvnHzyqWLkxPnx8bOv/nm2Esvnf7GX5/8+l++
+rWvvfx/f+0ltH/5l69/469Pf+Nvxv/mpQsvv371jTdvnjp95+y5+2PnH5y/
OH3x8uyVa/OXr85fv/nNKzc+uHrzQ7SXb3zz0rXH6KC9ePXRhSsPz1+eZ+3D
iUsPxy/Onb/waOLCw3Pn50+df3jm/NzpyblT4/NnJuZOT8y/eW4WdnJs7sTZ
GdgbZ2ZZO/366anXzzx47czUy6emXj0z88rp6VH72tnZl04+gKH/6ukHr556
942z9P4T58hOT06fmnxv4srUjTvz70998O2PfvCPv/jN7//9t1/88ZPVZwsS
wapWsmZSiuw6mdekCjn0MY8lHfLmooFCLFiKh4uxUDkZLSbCpWRkaKloJR0p
p8Joj1s1E4XxTiUZLidCpXiwGAsUov5cxJuPejNBNywdcGWCnlzYmw3jv/hg
eAPelo/5ueEVtNmIFzb6EVaIB463uZgvG6X3ZMK+bMSfDnozIR++eTroSQbc
cZ897LKGnJagw4yWW8RtjXntCb8zFXQzc+WiXnxUKRGqJCP1TLyRT7RL6XY5
06vlevVCv1Ho1/OwQaOw2SpvNEsbTbTlQQNWGtSZVQv9Sr5bynaKGVi7kG3k
0vVcsgbLJGvpZDWTgFXS8XIqVkpEC7FwPhbCF4bhO8R9zojH5rcbXUaNWS3T
y4Ua8apCsKQWrqmEK7g1RoUUvwrYTQm/C39SiIfK6Vg1m6hk4qyNVXOJcjqK
m1JIhDIRfzLojnjsIac1YDO7jTqnQes0aFx6lcuo9lp0fpsx4LBEvc4EbkTY
h2vHfaxloq1Sulcr4JIHuMBWebNdgfHOoFnZbFU30DbRLw9aFd7vdyobndpm
p7Hda253a1vt6k6nttWpojP8hGZto1HebJYGtUK/WuiVi51Svl3KtoqZRj7d
zGdq+P7pGK4oFwnFvW6/1ezQq7QSgXJ9Rb66JF1ekiw/U6wt66RCu1blNukC
dnM84EqGPJmon1s67I/7PXG/O+p1hd2OkMvutxk8Zp1Dp7FqFGaVxKgQGeQi
vUwIM6uk+Hyf1ZDwOgvRYD2TaBbS3Wp+u1Pd7FS2u9Wdbn2v29rpNtDZ7TX2
B629futgo7M3aB5stA+3OgebrB1aG3a43T3cInu+3Xu+1aN2u3e43WHWPdiC
9Q63+vv4883OQb+132/sbzTR7nZqe936dqu22agMaqVmPl3LJIrxUMzj8Jp0
ZqVUvrYoXvoKJll+Kl15Jl9bUK4vG+QSp17rsxiDDkvYY4t6HRGvPeqjNuZ1
RD3DOY/Z4jZpcb06qUAtwnRalK08Ey99SR+4+Ey1vobB8dv0GPNMCJM/2swk
+oVsv5TfbJS226XdbvWg3zzoNQ43Gs9hm83nWy2y7c7zbXalO73Dne7hLi62
T1e902dXjRf7+NXzXXoD6/Sf7/Wp5cZfoQ7+qntk+MzW4WYDnf1+E/96q1po
59KFWARfz2s1WdRytXhVtrrABmERg4AZwm+oVSPHvcYCj7htuHaMAFYTDCsF
bZRWAS1/r0Xv0CusGimfDDrpuk68qlxbkC4/ka08VQgWDAohJgbehs/hqywf
D+Xh8VIxLFss3mYujUmL2dIp52BY9b0qTel+rbjBnMAmWyMDmu3VzVZtC7e1
XdvoVAfc2pU+1lGn2ocPaVe3urXtXgNTi9Dn9u0L5y9cnLgwPnbh5MnxV98Y
e+nls3/1l69/7Wuv/D9fe/XrX3/9618/8fJL43/70uRLL18E+pw4eevUmbfO
EPq8f+HSDHDn0pU5jj5XbwF3Hl+5+fjyjUdXb33z0vVHQB8Yh57Jy3MTlx9O
Xnp4/uJDjj5nJ4E780CfM4Ch8flTE7Nvjs+8MTZ9Ymzm9XNTQzs7A8R5/Rwg
Zhrtq2emXgG+EAa9/+rZ6ZepTxgEIwAiYJp+7ewDejPAa2wW/TcnHoxdenD9
rUczc9/7yY///je//teP//DxV59+KlxZVIuFernUppO4THKfVRPzmNMBZ475
fFiRYUcxFiwmgqVk6LjBZcGAMiMMqmVjL6AnHcE6glfJxwKABgAZEAGgk/I7
0SZ9DmAQQx9PJuyhf8QQaoQ+3AArHJv+HH0SAd7JMOgZok/Ynwv7UyFfPOBI
BBxhjyXkMgfsRvhbr1Xns8Lr6oMOI+YngGmIrfEQvmcjH2uXkt1KlnCkCZ9Z
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
ApTTpPJYNPy5P069zKmTO7Rym0bGShPTvi1LjFkxyIWs6rXcrJFYtDKLRsZP
5hrpWJyQHbUG56FnJ8lWvoTJl76UL3wue/aZ+Nmnwmd/FC9+uv70Y27Crz5e
f/Lfwif/vf70j/iV4KuPgT7/+Itf/uSHP/7oo+/MzT6eejD/4D3In/n79+bv
3p27dYfsxq2Zm7fmbt6av3Zz9uqNGWqvTV+9PgMDEl2+NnPxytTQhojzPhc+
E+ffY1XdHvB2jFV4Y/G3KR6Io52g0W/JKDPh8vVHN9766O0HP3r4rb/7xS//
47e//eSLT58IV9bUUqlZpfAYtBG7MeGx5CKe0jGIOa50jo6R0knSUiJU/NNs
6j/Lqf7TZxawZDCoHjoQTUm2cQpw/UmG22iLZ1S+YIQ7oxePJx4U4z5uhfhQ
+xwlVA8r5/A+nethD54Dp/XaDE6j2qqjmUAH4bUyqpZjUsFrxb12/BW8dDWd
YI8azEKbDGplFj6qbhPiwAm0DoifM5ZO1arbzGGCc/Z4+VBWybnH2v5Q41O/
Q9uC3DmzHdX9QYNC9/32Lt8JrZb6FMcrtEsAoFyrlKXUU7Y1D9BpsGdT1rNJ
UjHpMIhlMe6HZ/DbTVqpSLKyJFleUAoWtVS2ZY2zNfgTcNQgHbG0U7r1KMqE
YYmwzC56fo0j7La6TBq9QqSWrtGBI4VIJxMq11eYX1q2qOQxr72SjjYLyV41
u90sHXSbh322GTF85iZ/OAJrcYH7HGV4uH5oxDnJqQ4O9495Wnjjgw28vrfd
gY+lAqRb5EipBulGhzpbILE9qlA6gO/t7vU7+4M2ex5oc4ceGNTa6wD40Nb2
2tWdRrVfKtTSiXTIBxmrEq6KFziJfcpqVILBUjK2ViqwqBUukz5gt+DCo35n
lB8hxFAAiUj1UB5F2GPz2QwOg5qVC1tnR1/X8eeA+PVnX+Jj4Z1cRhVmciMb
3Wnknw/qR0/npMqxBAF7m8/3tg4ONvdxydA72/29jc5Ov7XdazIm34Bw7jSq
rPBdqV7KVQuZWjFbzqVL2VQ+ncqlkqlYJBUNpSKwQDLoSwS8lDkWCeYhflOx
UjZZhOWS1KFH4STwt41yoVMvDyBFSRfUtqFG2zV6JmatUksno26nTa1UClZl
yxAsK/yoFAQdVd1UiXkBMZ4tEGY1MRJ+1yjtMDV8nq8TzpafzTxW55AGhw4F
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
kFbPxolcmklyivGgBLFE/Rf1pwP0QLESLtypRQxBS8xjDrmMAacRkT8cSxnu
JRXJxSOZaCAdIdaUkNPMLItmjv+lnUzVgNNJxyMHWpOUvFiUNkgfAQoH4RRc
ER51AzAEnEhyNX6uv0lARUDWladRpdPEiLGN4z0SIowgIAwWY6Fc1C8FH7xT
YqqsZmfrikKEcAdJrybv3khv/o6NUeFQk9xChiSza+xReayAivDFuI+oj1MR
6igmSEIoRdJj+N+TPmr1xFMs3QheGw1pkig88MUwJaKKPpZ+pkDUzm/ERuxz
iKnIQ06PuwEfulGnftQxPYKr3LDR9JxLP6aIznMAxgIB8sifrUzIbuyG6Eqs
zlJ6LLrnMktLquiec9gsZI80qRd1E2QLX+WsTCgTOXNeiDFVuSIJUxUxuFyG
Xaj43mQ9m1LIurkOL8fBvZFq742sPzAogwCeYnh/ipDIwRx9Vq7OsQqtm5hj
Iw5TzElSLFQl9lLNhLVrDTK1yrkwIha50uZB2B+xG2PYsR4gCL2vOP0slXzh
q7HPccWLSZ81E3IgtUcKg88uHXBmhFwda+KyhUiqQy/yl06DhhSldRpFUwnu
lKmt1TMaXg2FuEDNAXtzQ7XUpvrYXp2F/0IiuVFxR1F95eNdsSqwKUGBU9bv
SRFBn5kppLSktz49adciaB91aSdsmnEbkZ4pPW8WLa5U0aXjId24B++LJmIm
cC9XmsU2IHlnr8t1M3yDg2qPdLwonYpk2lE61tGMyJdKiVI7Jl/im2nF+Arz
stZqwGY66/0L+nIRamCTPK6rAhZjhCX64lIyUEz4K904kFEmpCqicinyDMQF
30lZiVX5upTg3KQqQjD4DaQpzLCVBiRRR0eKyPPtYU66u3pz3aTGJINpUwy1
GgZWjbwuD51StNGPA32+/uyjbz776KuPbnz18Y3PPrj68fuXAUCf3byGL//x
1Wd3/vnDxL3bVs24z6KL+ay5sKuRCc8gUwAuNKXIpkoJFHpEbRiMSKSjJDod
uFnukucQP2ebMyAmsqaUB7CCzILO8TPi8OdE0hr5SCW7QHlHBslLq5hEqjWH
xKdMjKD4Myi74QaD7qFPlA59cjRSimsHqARwKafgDWZK2U5R+N8QX8UEd+bK
qflKeqGWW6I/lRqtCWhq3bZqFvhj2pz0DDGhpegjFh570jWgzL0QC5QRURCr
f6zKPpa6R6iwTC1wYgCjqNcK9Ak4TH4kF3ZzwG6m3kgHuVm40zDpHZgQaFH4
5AAcIKYyqOgjV7pBEEsFVSQsMC1gKGDR0A1xiVCeHsKvslOsy0qd9D1cANRL
DZaVshGMGejcn/onjaxiY0UmSz7KZQkyUWGIFX9oq3vxl7tpxjyX7FSynVq+
XclIyiNbnS2qFo6kB6mZT1Zpe3OFBOhDm5zC0UI8qOTycSbeT4XKeHak3QvI
BZ9MInHhfBShmj8T8aTD7lTIiVwy7rGQGAQr6AVpDYkHLMg6dyFSVv2/fL33
b2vpliX2P9rtnjZgw7DRg/EvhmEDtgeYnpnuduee7jf9Xr1XdZOuInPOOeec
M0VSogKVc5bKa+99eKSqsQ18IM7lpSjx43f22nEtV5y0dVgl3MufmvcquVy0
IbSB5mUWxcYxKYWlKSzaeQfT19hZdcIpbkCSctoe0s5TxLIdcZ4fF6m+kBN4
Z6L0gs0QwK3nscZoaslNtNKFFHZg1q7tcmu9TNoO6+UPuoH5pSgABTvYnw57
/h16QUFKHgTNBWUSUM3VK4YUjxJgApUoWcS6DyTzFBH57FTAEyeCU+Yn9yD0
tlMOh0li46yCl6Bj4JQPi2OQ4PMA6KTvHYALR93j5HS96wMQO3EwuDJIK+Ki
njR8cL/d6LcbOMeilynRgM3osxg8Rvi6Br/VSJMg1NGhhTUOUt2Hev+k7Zz4
lCJEkI4vvVPKqRIAH7sIZKlcEKqEq/j5It7ald0rK9GT0CCMmtVho0Lkgfya
djHdLefU5iKsLs4kNXrFyrFQPuzPhEkmmCjm8GGpBkTeWsRuDtInomZmcuCt
Bo+FfHivPHKnipf6E3TUoGLQuKg9YNNu0DhNGqdR49Rv8sLFFi2jxq7fcOg2
XLotr1HrxRYZ9X7skoWaugNAPRtJhYbs1MPGxtzEsQ+pH4YpKWET/gcq/cQj
lXSCC2SZD7dhVkCWb088Zgb1/KAh2qZFNSpcYnFW9k1+kGEoP27VRIeLpxEp
+0QyATQkXhkIPz8J5mZg7mD3gD7L9kur/MERykXrgvDxeAUsGkpcW7VBWpqQ
Ha4gPqbeb9Xy0uER6POP//ef/9Nf/QVinL//83/3N3/2f/3Vv/s///4v/uwf
/+YvP/32n7XfPtt1moDdDDNVSvhahdikXdjpVbiPmqZ41PaAX6XXlGYDlunZ
HxHcHIxay962pihQs6lnSYJObZvQgQZzpkv0keZnaWmjZulGQWg/h0onm9JE
TaEN8IUCn4wEO0MmtRb6Am66zuEFxPyGiL4s6jC5jyHPxyqPdLshvFI1F0as
BT+kLzHPlYuENJCIXjAeJdnSIVf/FyoAklBVpdglvSxCBtJXn+PacYpbmDJc
QSYfldfS2bapS6p4Ka8943fCKUXInyYz8q6xIlk++UEuBb6HNpRMIDPikHhH
FeuMUCmThlAUfU+XwtAujTTwsuDVi2uKm12o1Ld/JVHEuXrc76Ljg4ULVXHy
gxdK2XjOVEfVNLIqaaR6p3LRZCq8ao6lMDPRYjxYYPqdbMQLpGbRVRtLV5P+
XdSFw2/jCw5eKCxSPjI3ZvBW0Ebhn+Lq0+JrB22RXzhwrBFOSPItb5TRCVpW
LGrDg31g3xWeMC7ISpBlcCC0pO2KInxAXBDxF6IkOgk3EpsgekbE4MqCaMLM
zNtS4EpQhaVqhNOVh31IFVoRzl7qN6XgviKm/hj1fEwfid/b5FQeYnCKPuLB
TNSfDnikrYuDDiwT/HlumSDn3McNftThRmtT+v1ojIvb/JyGTRr5NGqdMJJ6
WNQtp27Tod2wa6ntys4d1NRMrtfi2qrfshm1Dv2WHTaW+gO1HjPDkMUgCt1h
BzGiY9F3xEcryv0t0geY5A5hkekUx1vtYftVR4Fw4qkSrh/CIm5TLyupOY4o
6X1Eh27crJLOWq3UK+dFu4RETFiuscuHrcpNCGRF4XfBCWTJ2ghp2tr4kf4Z
Wn4E+RQkOI6bhe8a/DPstoVcdj/DU1jEcFm6XdjqhJMK/+u3GKnH0m2O0nmz
hRx4AR8wm4Wb23UeCamo5VLnNuqxZCe99K2Z5P2VWR6fU2Z5qukYcxekPqQd
pL8i24dhJOpUFr1tMZtutfQuPs5EtXL3yblaNmZgt8tLvTllmJFr98oiyQ/+
gnrwkQqZGjUe+ClFH/XDPcO9IAkZlgH6RZLNwz3YWHbduk2z6tCuU9O+5rtd
s0qxz1/9xT/85X/8x7/8j3/97//t3/3Fn/3tX/6H3/3mH1c+/cG0se41w7V2
FGO+ejbUr7H8qIBOX2Z5/l/aqn/VTkCKCSMFbvaV3mka9pFiyrKeUuYQA49l
FX3U1gK1k01UEgbV9JAXDfXUFWIceQHWoJzqM6m1CkB0QUm2rHS1IfAZNhTh
bEqvDYiw+p29jf4qmiSi6SFeoi3br+YFU9SMBwIfqV80clRfFmugKnKqlU01
b4/XN/EjaYTMSl89vPpsxE0ZkpAL7ncy4OBkiOptLjml38GCHqU6E6PDb5Vk
0ceXKbWbdzFom9xKnEzm9B3lkC0Rh5JhxgtETu5dUW4JPaIHnYv6K2nS/FIZ
hlW1O6JuaFU4yyrzs60l+hR4FdULSdNJ4KNCz0d//lcqpZyjS3IfXUj6jVXZ
Apl/x53OTqlRHv2ECKQyj0+EC053MEzAM5d8CHWpkStOUGJVL6jdWhaxlFgM
dGGmNLXPYgT0+AVo7Ng347LNw7TcZO7T8OJPQjTk4PiLogNgEEI8fGTFgWQ+
fIZsUtvkW1vkn4Tcu9iDLcUit5wuuuzPLzPzBEBqRkUK6B9yKUuFDm7SbhVS
NQp/wrkYSdymljNBUdgEpxhVM+MmNoeWj/qp+IObEKfoqWHPSKOUgB6XgXqk
yWM34BmtywDDqMejixqnaXlMZBWpE5IWZ9LsVuF4oYWvgIabbGSx4RWTUDVF
EH5e7OfQSBFeoHahcwYp9yuBbFUlShXUxjMfc25qJlOatej5ErAbPmqZPSXO
w8CQAoZIkI6UT7ukGMhdB9wqU85TFTLPJpSKPow+QEwEO36rHAYdgBhBjSwA
MRaBLEIeGri20Ie1W2IeInsvsE5Qt5TqsxixZPZa+XS3mO0Xsx04qEVYoVy3
mCknw9Q5QI6oPxt2J6nWCcfPEnKauBtQa0cApSO4d+gA9xoKlwxbfp6GS/ip
XzTHHemkTptLvOct+ZbkY1ZlTkVSRBJNvWZR2TQOt5n3eHkDKvcdl3UAW/wO
ZXXbiXlYTWcNWjtLhRGmyC7CliKEbHMZokKqi/gsNgEggR55BPpQI5+VeLP9
Nk3MYyZ3mns5JPb5uz//91j/9Nd//i//6e+Yq+2rXa8NOqyZoKeWCvZKsXEz
O+2WWTW18atg51dt1b9An3FbJnf2t5tLehy8TATXcLRIhUcCEBVupJta7anu
AXS4S43oqYl6Gl9uqluOD+vpUSPDzWxZhDbqmA9xh5aSnVJC1fQROTkcCRrn
gefJI6WqUAJHcDUeL63uEKNOnWpDFG+KLB0NrQzrxY/3O/cYK5jysbVGlTxT
LYZqThmJkjV8R4AeEmQJkHJByEuKon4XpY+YtVhFE0EQyaYqhUi+wIGXtXTG
LFKs5OYr5ZXM/Kn8CCcQlHeLcXO12t4mGMdKPQQ9qpS2Ol0uGJSN+KS5mmjz
uYOLqfupIeTj3JZIAKtKRorIXaMoMaOoSzSWFcxfnfxlruA9m8fYTS49tkuk
hIUbQRj42XMmxk5u39XjkTi3aUiQkIWxg1xHj1WP5caFReeipL2GbCYx1Bmo
pcFGS5rWaA/dgteKSleM8wlq65GQe4fpN1IjGSdDrOTB2mnB/ML+sKQCzUAB
YfH3y8dXVTbEmeRbpsUKkrURtwKq/cAq4nxcqtCt7Koa8vwCrBl9mvkETB+B
NWuGJgMu/OU812MOkPGHRTX7LSafGYALRMYHsSwJpWn0CX9/KuBLB/2ycD7h
eMi2p0RnnIJ0mGg36+/gnU3c4GSg2SjAE+EXue4Ow6bDuOWkznPy4RmnjIBy
qvjYzAGHFZFCxENTZqkgUT3I/KOoAAj0iN6ZyI4LL7oonAKJftVvwBdKUUNd
kgFWYKv73merKDy2EAoVyGCWJcROVBCPc/iTj/kzARduGZwQF8/w4gJnBriJ
I5cNk7VHuNGVDGGzMidhZeKWP5n0zndG1weT28Xu3fHe49nB0/nhw+nB4xke
F/cnh89nh0+nB1iPJ4dPJ4ePxwd3R7s3h9s3h1P8yMPJ/OZodrWYXB9Nrw63
z+bDg22qTcy69VG90i1lSbYj7ElQ27we8ZHThB3e8Fq0OP9xnz0X9eHehG+j
RCjdFonAtilOGbdJrb5Xk1xuRmwUThHOEheGkqov3SqJH0g91XgB0EdUGIR9
XYKgjzupPPY5guhUBrVcq5DIhd1Rt0mwBkBDbRUuY9xtSlOjoDkTsGOlQ5Tr
xmMh7qukgo1cDOjz93/xHxD+/PPf//Xn3/1m9fOPJu2Gz26O+VzFeLCZjw7q
qVm3SPkoGnhp8qpLnwCtD+izM3jvLlD7qCnYYaV4LA58msIkgGBnu0XjokQa
gH+2q5R84+KOKm89rOd6y5AH6LOc5cnIGClAB2vWIqaCXeJqIyKdSSM/pIme
pAo9hD6VjGjosMxiCa8U3FH4Tt8b26ilTYgUYDHURlkVUD5mh1rU4xTDQlDD
wsEpFZ7UFNwvfqSYrsKcZuPFFMtpMR9IJujFktn/FDBo2Xgm5e+Ye5lNYj+W
eq5+kTSzcC/We3AUdVuWytfL9/FYuN9G3s3OSaolEimxkp2eZ0+V0yMOqfiI
8clHgzJJSpyfpB9XZ6kgkfJRiMdZ8o9YrFUHVc2WSKqECbgU/0rOuQrlH6Vd
1b1SgsdSmlqSkhFuyXCrUY+IVlOS0AXodHBkZ014lXKMvIBByhFb6rHShGbI
nQ4qKU115DDpd1BSjveKMpAuCzVvO0k/ImjTh21qKZlWkPxhJSmnOPnAHc5Y
YgNTpJlI8jpiTqVUIVZUBF5JZEfRmGhxOq7K5A+F7nJ1qtSe0Sb8TX2sqXHU
mVe7QJc0toouIevVUooS7nSJWtl9yRAslVMcEq5iU2GCibWN6jhnJugrJyKd
Ilz0nNwXu73WYntwMhsfT0cnWLvj8/0Jrymr8o0OJ93DSU/kLXb67GbAMaPq
CbF6Ck7hzOA7wm/xWBAraVx6/HYDHvmCqkL43yURQVKybSxISjQFUqwRMWuV
Gl22S5xwybl9DHm4ZvHeUbDUus2J4s+4BZMixqq5N+iQqF+/TVXmflNucHzw
qgjzBVwJTudyeKjHYQAY4aZG/DJjxicmfSLBRBLVmpG01tHO6Hx/dnWwS4Tq
i+nD8e7T2T7g5un8+PH8+Pni5OXqDAsXzxf8eHX6RNenLxfn/Mzxw9nePSHU
0fPF4uliQVB1dvB4sf9wtnu1GB/P+sczkqAFGJ3vjY53mPG+3xJmIWwdDAgO
nl2/KZPROJPwDXh4OTesk7prr1YWCkEJDLmMSC3rMi3Fz7zncpd9CDnuvcxx
O6vS/IZYicSP2NvcYS0wSSkfTPrAx341U4z5gnYdjSSb1iXPhsAn7rVwFcCa
9JjjLiN1pDsNGb+tQq160X41D9NxNOkfbvck9vnhn/9x5dPvDVtrLpMetzDc
8nouhjdnipjydrc0IeXoxqyDVWcxuAaXS+r//2k3Rp8O0RdQ2o2+es5rlUVJ
DSHGlNjVajMSs65uMy2YsOVIC7TIwynzOzxDuiTMUSs+RQEgZm8j9MH1qJb5
CD2UhUNMWi9yvzSzifaqv0KfdwDqKNxxY9JSLKoFjo+PSuIon0S8CYeTUmq5
BHXB/fLb/BguUXyUT9XSijld3q0U+6S48SBFJtElhlEp+vioHiRFH3yVsuI+
G8/F2JnC16YOdgFflNnSJawsezglfc0ZaQcPFLjeO98IfXwU6chiL9dHKWWG
G7nHBUdUs4CDpzCQj9sqNZ9UN6S8ruoFfFRgEfHWj8685O6Ww6oUSCJkkEBS
amrleDBPkp3eeMAV8TmY0odEMwvxAA4wNTCkYthP+KIiA8FytKROSwFsH35v
daeDL7pOErRw23rk4eDUwfVtF+i7q7C55uyHD/tPrDVmWEgzQwyxqAWViT+q
YtCwrRWhJTaNuh146M+VjXjyNAoarqVjHcKIwoBpVFXQUXFHlF5VeSOuBJUZ
ZBHac1N6pdCFOeXkG1zQTlniZRl1SeGVavQkS9rdsXskThH1AVCoRxdBmdPs
o/SjFYeHRb2jgJhBrbDTrx9ud052Bud744uDycX+9vl8fLE3uTogE3qzmN8v
9h6O97Huj/YejvafzslUyiNfnD5dYh0/XmAd3Z8e3Z8tbo/37xbzq73J6c5w
nw5DV1E27LenrVqvlKtn4tgZHoRHcBFMUUuDXfqHabw06CmRzlFBXBpZarAj
8Y4sqfioAgpqto3tqlptz3ENvSAd7AxARUpAdRpAHwV6+u3dUXvYKbfKaRqb
QkwNpIb74SHhuXTYU4gF8De38ikW3qI60XaTCIEn7Tql75qVHWD0ZHg6n1wd
790c71/szU7mk5PZ9oKkIrosV1QdNKqDWrVbLrUK+VYhV00nK5lEOZus5FLN
XLZdKNRz2QYNzeWYJZUkBZkOi2SpDyaD4/nkdH92fbJ/e7p3f76PdXu6f3U0
J/r07T6OFtVcilnhJaA+/wK1jOZI/cTMc9Yabg21pkL+fCJS495+SbyojanS
S/kxM7N0CGn3pDYktyfdpzVFBwS/mnaSnYFhs5xPhKTRlDmrv7mNa0E7DfJw
G7mBM2+bPqsmGXDUs9FOKTVulWa9Guz/sF4QPwp3Yr+aY4WFf9lc+WzXaqIu
O1zxSjLaK7MWfKcix14d//xY5VGDL6blbMr3K9Rtc242YLnSDrW3DfFK2HYE
OwWRqJboRtJrk2WeTXR5FEnrWm74QZwUq1NKCjWBjJeqatdcG1KuGbbwg6Km
rSx5Q2Ew2GHc4b+n9nHR872lYFynQfqSnOh4d9RxUcpgdYrUcUQNM8VEs8CN
WzK9VcwgrinDbGZiuKgCmJYN1VVKHwWI6y8ehcGkOcRioo3orJjsk8YcycyJ
s0EBFxHIU+pVomMsdTiRhrxSEW5nDXCzqz8fCaQD1E/LdJ2OmN+qpt2UdBw1
3ut4sMskZRHpKMbKhb3cIhsUMyVTKsTPBk+AOIWwRXTP7tJ32tvtd0W9jqn2
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
YaeFhZCIZx7HL+zQA3Q8JJO3btV8w/OwYETYWM1Kc8J80MNX/3p7RRL2TwwK
b7evrzcvL3fPL3evvAhxltHKK8nmks7j68vFKytwPZJg7vnDNdbZ/dXp/eXJ
9dni/Gj//PTwEmf47Pjm/Oz67PT86ODi+PDq4uT2+hzr7ubi/vby6eH2+eGW
Hh/vXp7u314e3uTXqeuZ91bRi+dzjq/y8ert7vzx8uj8YHo47cNNasNk1XLb
jXLIZrLpVv3E80nRH9coEa07JBHBU2y2cipCM915Kf2kVEL1JQBhSxNcVgP0
RINOg8ey7jVpgT6sWrKu+fpb68YXr2HdqSM9I93KH4xrn0uJECzk1eHO3cne
683Rz3dndJM+Xr7cXTzdX9xcH58v9o73dg5m2+NeA3fWoFkG+kib8U5XoaRm
eR0qpKrFnY9LnehRw6JJq9IrZ2uZGHzdYsRdjnmqSW8z62/nw91irFeKdfLR
di7aLSREP1S0REVXdOcDYbXM+EyYw22C/0VU0iHqA2AWIGZIVDm5cbM4IkSQ
ZoMsE++899GpoKOm9RTE+TAntcRNQjQcP2x1KRliivVQIxPuFOIUUhFbRYZz
gIVZq7Lfby3G/f1Bd0pRRrVbK7TweYvpOqwuHNdavtcsDSkJRqYbIczhbHjO
bZNwoihNcbwHJ/z+/IgGAa7PXm8RVl++4d4kQ8r28/5CWWRRzx7PD3kWYPFw
fvRwtrg7Prxe7N8e42Jxc3x4tr97sr9zcbh3d3p0tTiAnYS1BBId7YwR5C6m
2/Df4PQiSppK0NRpDXnkGWcjaCXmwyApk5qEeTvus5IAsZJBMpaSEcm3S4kc
S1qppT1MnuH6GpHaUQapnK+k45kQkQ2mghQL5KOeWjpKpd6gK85EQMW4b9Kp
nOz2ES0eTLsI64ZE/VHuVAtczKKC9e6wv9gZXyzmd/CXbo5fbslfYp/8muwb
DMITu6CKyPj126toZ6sWEjcpGQS+vnl7V9y++ZAAuVVM7uuDiE3//PIAu0rS
qPBvH+/eHgiJ4F4+X58+X589XhxfLPaP5pP9aX93iM1sbrcpqOyUckm/i1hQ
iPsUGKTwuzKNjB0OvNeqz0R8o1aVuVXTUgL70GCgsA8pfPh5ZU48DfMLI0y0
nNawU58N2RNuY9imJUYCkyFiNw0rucW4O+vWuorLCncdd0H1cHt4tdhFXAMM
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
hMwu56aAqhDWQyxqmE4k1oPbha/wR5T5FnCSrmfAwohRtJYVA5eRoBvSjXGk
YGfT0aWZFMhcNjafjc1l4vOZBGr1iJowogJcqKQkPKyQx2/TmWVD8oFO+F59
rc3dZ44NtjWPdbcqB3thGQYdqMfQdCIMfyTQ+RvLSxdmpq8tzd9YBmq/cHUJ
yfXlpSuL8xcXZkEuzOXO5aaANsLJ1YtLb12//P7t6yDv3bz2zrXLb125CHLr
0vkbF86h2vWov/nSDXh58dz1i4tXLswBVF1anIXfcmN58dri7NW57JW5zIVc
6sIMDFEcFmYCaIXNZNPIVeL+4a4zgx2nelqOg/SebZYO9ISc9gszmWtLs1cW
Zy7MTi1mU7lUJJeO5tD8jM4kwoDCpF0XmY1rAUrSyI9E1nCEKIB7wQdI1sda
KJO068XMyEscerM4PxbGc60kNZxnY0j/L2SiuYQfwN2oEMsHOiS9rdL+NtVw
j1E2DLMaZ1zHZ9PBTNS94mTDLjjgQbOoyCdpVz0xm8Tl19IALqiHzlwqAOdw
BMQB9JlJogY9+Ohfy7uewbcQdxnOnfOt7kV1A1dK+u0gcE7S1RbT0cszqesL
UxdnkiSlgTAdtCrTCPhImgFCbWzqrOYU4YB4xIupUBBZUEmkQm169bNPPt5U
V0MpLmCUFrOo5VwGRchh1HBZNTwmn0mpKCkuWoGbdfl569b/x3958G8dANB6
AKDi9fk8KuNbX/yKSiK7ceXqYm52Op1JJZKTqXQmmZqezMxmp+HN8wtLl86d
T0Xjg509f3r091954PPbGhqEDCaXjtCHU0lhV5SDDc+pqKQUFlXk5bHLyx56
8Efq4SFULBp1wlLhzsKo4JVdr7LrAIOUqKwopvxWpdSilMA5aUOMGZACJ/fa
V4OwduICIj5w4irHmjC61lYVoIcImFskx4Csd5iHyEeRiZP1TlI4Vng6nn4k
/21N5lKJ6XiEVK6Gj7o4m72Qm1qcSgH3bztx+Nc//pdaLotdUVrDoW8QcDYg
fGHcUcO/p7Fma61go4jbJGA1CtgbRbwtQu4nGms+0Vh7b13NndXV99RW31tb
84n6mrtrRHfVVm2tFm6qFW2sETUIeA1cbi2HDVLFZIgYND61EqBnk4B7Z5Vo
m4DfxOU08rmNHHYTj7OByxJRyumF+Vtrqne/vF03NubQ62QD/TiW0atFGb9g
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
VYJNNVUbRII6HodHp1JKiovz8wrXry+AkczLAzQvzFtfko+yOCoKijeIqvfs
3PXO7bcX5hZmUpNTiVQ6Gp+MgTmXnoqnssl0JpGcjCWyicR0MjmdSk0lE1PJ
ZDY1mUtnFnKzy3MLS7lZn8M13NO39/UdT/zmV/dv2yKiAdxUCGlUPoUioNNF
DEY1iyWi0/kUah2X88NvfuP43r0RNxg8Ho/J6DEZHDo1KqemGNWODY72dAx3
to10d2jHxBGPYymbhiEig0PiEQs4gWphMoGSK/BLEj4jYz6bwm2hcLwMhg54
Og65RteiGMTTTtI5cL9ynJ6dDAcdJotaoh7pE3e1DLafgmXr1CujHjvJJoJH
AFYo6F6P2RBw2CIeVzoSWZzN3bp2+b23bt2+cf384rlMLOW1OZViScvRkzue
3/7Yw4/+9LsPfvtLX//C/Q/cd+c9d9RvbuTXCek8RgmVXkShFVbSisppRWX0
4nJGSSWjpIJVVsmn0kV0RjWbVcNl13E4tWxuDZ1VXUmvo7GbeKJt9Q2fufOu
b/7TF3707e8+/NNfPv+np/e8+npH8ynFsNhttWRTyfOAiZevvHUdrPX56XQi
FQ4G3Q6dTCIb7FePDNv1Gp/D6neOW7Uqm141blBbdQqDQgL2wHAncs0lAt4L
c7mLKOyO/MAkNwNGHoaLOCrJlvxkwIlD2D68UdcCM5xEKnGvbTcJsZGkLJjh
MOcBr2dTMY9FpxjuHWhrlg10meRjBumIVYma2aEgoFaulYol/V2D7Wflw70O
o3IqHrx8bu7dW1fff/vGW1cv3rywtDyfQ4wG2ETAC4LAIhlbQCE/sOumLuam
L83PXlqcu7w0fwmI4dwMUKRzs9Pz2cnpVHwqEZ2MhafATkvEMvFoEighgE4s
nEnEIgGfe9zqcYz73c6w1w0S8Dhd41anzep2jPucdtQl1jcR9XtjAR/MkRQg
Vyo+mYwlY+EYfEg4lJtMAu4vzWWBkd28eumdm9ffvwVcbCkZ8NkNatlAj6Sv
UzM2ZNXIXWatx2qYsBlsOqVeNqIeGZQNdMO3NsrHMPFHpV3IOJOMQZicqx6V
Fa872TcUw65jsqEA98T0ktw2kpMJGsNlVCjFXfLBDiA1QG1QjxJAHww6cKId
6wOjWtLXqhzu8lp0yKs5nwX0CbvNLqPMb1WG7YqAVRqwykLj8qBNHrYpYnZ1
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
4ZUU4pYU5ZMB4WUTZGfh0lTTri6rSYxJSk1Ii4uMT45LiQ4KHesdmOgfHOvt
pQ4PwqCN9nYlRIROjw6N9/e8PAJWMw9sCK+RBHDzo1oQqq61u4HVPFo9210D
db05T0XJw7eWZ4d6FieG4OXWAgpxX54aBQ0D/fFe4jAZAKihjVDUSCg42998
dby7Q5s5WlsE9AHcwdLpHP+o5oMjEd7BBa+2cPvqGBcAIECWT2/P8U/h2ATy
oxQdhjjoyW83b768vfj99s3fvr7/29fbP6PTn7f4xXA8RS1+aLizPLsyM74+
P7mzPH28Rbs83DzZpK3PTtImx2bwAiXjo67W1lyMTHIiYpoKimIP+dkfPGCg
u/8f7mf7f/eDFCvmSbuPmdn3sHMc0H6crGx6j5+kJiT5eHgxMjDgTqd7OP/B
3oPQ5/5PDAt96t4DOjopYWF/T++slLTM5NS8jKyK4lJSc2svqRO2Tx+pc2aM
UpyTlxIdNdHXuzAxgqPP+zcvfhQ9wU9/sFyOZzevjt9iNU3enu4erS+vTlN2
aHOH60v7eOrstaWZ4aEhEqmruaW6rLy3o5Pc0hrhHyjIycNCx8DGyMjKQM9C
zwRkAWXGu//LL9gfiQdV37/374swvP/jBwcF7EaVEL+AAC8fDBRgAbASgANg
JUz3GZjokDDTM3GysIvxC8lJSD9S1bA2tfDz8M5OzWhvaqMMj6/ML20uryMn
Jw2BEUASoM/q4gozAzMaSTp6FHiAnTPdBUMixob+USaM+zy4Ty/OL+Tt6l5W
WFySW0TIJ1SWAhwQB7v7W+oau4lE0GMLlMnC9PS60pIV0Gl9PTtLC1fnoAz3
Lo938Zw5oCFfHSFnxbeb16AnsaxuiHvury3WEYr2Vpd3VpbmKaOzY/3LUxOT
g/01pSU1hLKEqLhQ/zBCYWlUcKi0oJCSqLgEn8BDdg5eFi5hzodivMJSApJS
wCBEZCSFZaVFFGSEFWRF5IFWSD6UEOUVF+KSEOaSEuGSEAQCgpiIiACHMAjY
7UIcgsKcQmK8YjKCUgpismoyqo9VdIweG1gbmbnbOge4+8UGhydFxKTHJual
ZBSm55Rk5ZflFVcUlIKU55eUZBeUZOQUpKZnxSemRMRG+4cHu/l5WTs7GluZ
6Bg8klNVEpeVFZaS4hcT4xMV5RURBtOdS1SAnR9Mdx5WAW5mPkS1mPgAB1nu
c2LC9lhdx8bISlZUOsQvKDs1Oy4yMSEqJT4iMTkmubW+eaivn1BcBHY4jTrV
UF6RFBWxNj8L6EMd7IVRxcrTHGGlqe7qyr2/fHF5sne0ufI9FusADFcacrtN
5iQnjnR3rc7OUUdHJkeGV2dnaVRKU2V5QngobJbsxKT8tIzK4tLezq6GqhoJ
AREtRU0tZS11JcAgNVUFVVU5JRVJBVUpRSVJOXlxWTlRGHwk4oISovxAVUSB
5QlxifAjkgJYIAR/Mh+bCB8b9EV4WPhxAaznZub/frWKn/cBPx+zAA/TQ2gf
sgiil6yC/KxC/CyC8BL6fGwCiFRiAn2MZop8RzdRHLmw4Hk0y0Lc4gBGgC8i
D6WEeSRhAfCzifLBv84mxM0ixMsmws0KBE1YkF1MiF0Uvl9NVs1Y3zAlITkn
LTctMS05NikxOr6KUEkdHaUMDw/19EBneX62t6M9Kyl+uLsTKCegz97aMpCd
8z3gONtY4bkdXAB0wL7CywSDnGyvbNNm9pbnDtYWUaWMvfX1OcrCxCBtcmgF
kaBxwCAERovUtZmxmeGuic7Wnsaqturivta6meE+eAOgz48qorhgianP8Jo+
eF25T98rzeEgdfvqCC+x/evtJWAQfsb9PZU3ev8PMvXt5tVfv3z47ebt7cXx
+e7q7vI0ICaeEhOPXcGrZW3RpgF6dlfmDtYXX+yvTw13zY8NTsOiJLZWFxV2
t7fCaCRHR0o85DPUeawpJy/AwcnJwsKITk7wE4f/EX/oMNsbPyRioAeORn/v
p/svPyvtu7wKwJ7u32O8f4+LhfWpula4X2B6YnJaQhIAUGt948TQSGcrsbu9
Y2xgiNzWHh0aHhUSNtzVBSRlcqCHNj64RZsCXoPV37mrhAuYfoEqC2y9PNqG
X6FquUfbK1MTqATD8vzW8twGbWZ3fWGDNtXV0tBIIDRXVOemgVZvTk9IEuDg
ZqdnZL5Px0JHx8EAAPSAAdgDfmn078f7/zFL3j//wDL7g/vgcQg/RWXfjcMP
PvWds+BBa/T37zNi11RxgT4LAxMnMzsfB4+8pKyTjUNpQfHa0tLOxuba0vL+
1l5WaibDL/T4xwGAcAxi+BERgQ6rkGHwgI5elF8wLjQCkL20sKiiuKyqtLK3
s2e4byg/s6CnvWdlfrG+sjotNq6quGhlZmpqaGhmZHhjYfr21YsXezuvDsEU
34RRRQdt5wfQx7LT72Ix2AcfLs9WZynpsdEH6+t7ayvTY4PjfWQsfyyttqQo
yNPLy8k1JjgyOyUzISJGXlRMW05RmIubl50DyIiskJSskIyciKykoIwYv4QI
jxiod6TN2Pg5mDj5HvDzMPIIsAqJcIqLcomI84hK8klI8olL80sqiSk8VXns
ZuOSnZTR2URcmZ6/PD779f3nf/3tz3/9/U9/+9Of/vr773/+9g3kL99+Q8ki
Pv/6L19///XDr1/ff/71w9dvH75AB9rfPn377ePn3z9//tPnL//y9SvIv/76
699+//1ff/vtt0+fbi5e7SxvjHQPlGTm+zp56Ws8VRCVFecVFuIUEuEWFuZC
l4bYGXjBGmej5wQG9EjlkSAPn6+zT2F6fmJ0YnxEbIh/qK+bX2xYHKmJVJRT
QCgqWaLR5ianYME319Z2tLTMTo7PUcaoQ734VQtAn/PdO88P7gLCIwlRyR5U
T20bu+o4sjE/O9JNTomJAfNpc3l5bnKSMoBCGbeWFmbGhrOTE+JDwqIDgyIC
AmH8LZ49F+bikeQXlRWTlhaVlBaTkpOQBdBRlpRVkpBTlFZUlFFSlFJUkdNQ
V3ykrqSpIq+mLKeiIKEoL6ogKywjISApxi8uzCsqwCnGxyYEBIeXVZiHRYiH
RRBIKBczP7QcjLwgQEX/6KA+D+cDXi5Gblw4GLnZsRaGCwQ6XEw8XPCGB7w8
LECy+FHLJoCDGg+bIC/mnRPmEhcENsQhJsQpIcQlJcgtIcwnJQh/DZc4N6sQ
oD98J9N9VgBHbxefgqycvPSstISUxOi4qtLynbW1Wcok4M5of/8shQIYVFVa
mhwT09dOWpicgIGiDPYdbKyCcYWXnMP1CZ6HBwQvWgeCB8IdrC0Ai9ldnj3a
XLo82bq+gI0AGDQ+PdxFmxjYnqdsLUwCP1qaGl2bo2zMTy1SBil97cOkxoG2
uvEuYvEvv2A5xPBs2K9wn9tnVI3oFEcfEBx04Al+ro3VyHuB+9ZA8DNBPAvZ
+0vEj64vUIU4rJLg4c2L43dnB1fnB29Odq5e7P+oFIOnEsLz0WGUZxavMnl5
ujPeTx7oIJKbG4l1NW11NaTGhu62ViUpyQAP9+jgYBEemBpmFkaG+3dk439Q
9AF1iy7ygDXLyf0PB1N4iDV2DIF8UGCE87BxyElIWhgahvr6RQYGp8bG56dn
lheVgmXYQ+rqaGnvbCUN9w72tJLTYhID3L2jg4Kbq6q7W5oHSO3L1InFsQFA
n8vTu5grPEUzirk63kZ10E73cPQ5XFsaIBGPNtYAzdfmZlBY1/Ls4c7S2gK1
oawkPyUlJiSksrjE18VDiJNbVUaGhZ6O88EDblYWYCX37y7g/vKztxDPHPFv
//lx6PPzWPwDfmFB8zAs9P8g9IDh9xkY7zEAskCLyNE96NAz/AIDyKAgreBi
71KYU9Df3fPkkfZdfMh9OsZ7iEkJ8T000HkCLTwBYWdmUVFQ9HZxLc7Nrymv
rCgpra+qbappqCmvhm8ozi8mNXeQW7syktICvX2zkpN7iG0jPd2LFMrMCLoJ
dbG/A3K6s3m+t/njKgRWHO0MDEKslPP+5uLU5uJMeW5mT2vL+sL81tLiPGV8
c3FhfW5meZra1dLU0diYEh0bFRicFpuQHBkV5e8vJwKaUEpLQQNwRAwQB/lz
RLgecHOCaqLnRlSCjoOdkUOYQ1hZTF5PVcfsqbGnrWtscFRpTtFAR982bePm
4t1fv/3lf/rzv/6nf/nzn7/99vvnL98+fAT5cvse5PPN7eebG2i/Xn8A+Xbz
6ev1519vvn67BtD58uXm05fbz19vP0P7+fbLZ2jff/j8/hbk0+3tx9sPn24/
fL798OXmw7f3n377/Nuff/3L3/701//8l//0n37/189XHzZoK22NbYkR8daG
5rLCcpKCUkI8QhxMHJFBke2NRCsTs7jQmIzE9OTYxITouE5iR1c7ebBroK68
boA8MNgzXEGoDvDyCw8MoY6O93Z0TE+Mrs7PzI4NYkl1UMFZGHDc7fO9IjmK
eMfvmcI6B+0xPzFCm5xYmJhorqpJioxprKqZHBmZo0wuUCepo0PT48PLszOr
cws9xPaSnJzs5JTy/Pz06Gg3GwdtVU1pMUlJITEpIXHgdLLCksrSCkqyypKi
MkoyyqpyavIS8gqSioBEyjLKSpKKCmLyiuJyCuKywCsBdmWEpKQEJICQivOK
iSLiCTxIgI/1IS8LHwgPMy8I1wMeLiZuXDiZAGu4oOVk4GRn4OSEPgMHBz07
3v4QTgb0hIuRk4uJE13veoAgiRvFJ2A+wAcPuZkfAuoBKnGzINbJxyGM0R+g
XQKi/JIaKlpuzl75OUVFuUU5KelFWbkNNbWdxPbRwUGQvq7uoZ6Bvs7uimJC
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
BvQB6e/sLs0vrC2v7Cf3draSclOzfV29LY0tTfSNTXSNzAzMrM1sXB3c8jPy
gQrBrslLzShIzyDW1QyTO6mD/Zsos/0W7qrFL/tgGLSLOcbBVtnYR+lcJpco
lIr8gtSY2PL8goGOjoHOjo6W5rGBvsVpyvTE0CxlbKCrs72xsaW6DuAvOzHF
wcxS4qEABxMT49+XRfq7RDr3/679qT4sPjL/dOUHsUKGu3D1O18cHYoFwAUd
MN0BF3ZYRIclhrj797B7UvBfQRHfsBJkxCWfammzMT14QMfAysDExsTEzsjA
zcwiKSBk+PiJr4srIT9/sLt7fHBwfWnxYGsT+s21tdUEQkVJcVNtXX9X70jf
UEVxRXRotL2lvflzc2tjG3tzJycrF2c714KswrlJan8nuSSnoLG8aqy3Bwzs
3ZUF2JKnO0B8znDz+/JkD+eboAyvXpziluH6/BRwn63Vpb5Ock1ZVX5aVkJ4
THZiRlpsSlVJRUNV7Wj/8OL0LHVsdGpifHF2jjo+QSZ2gh4AlKwtq06IiHe0
cJQSkORm4mS9xwLC8gsLFyO7ooRcU03Dv3z77b//7//tv/6X/+XPv/3+9eNH
oDafAYOur0G+XF0DAOF9wKMP7969f4cw6MO76/dvr0AQiLy7ff/29gOClfcf
3iJw+fLu48d3H+DJ7dXtzbvrm9c3t2/gbe+hvbq8un37/vbq/Q367fv3V8Cw
PgPQAJP69uHzOm2lt6NrhkId6OyqKyuHNZkWm5CdlFJZQgDy3tlG7Gxr72hp
qyopqSgpIxSW5KTnhPiFuDq4WpvZWpnaOtt6+rgG+XsGJ8QkdbWTt1Y2B7r6
YAsMdJImYE1OToCBfQGr93Abq7CAkmHiw4vH/Z7voajg0521vdV5GnUU0Ifc
3ESjTh1v7faSOvMysvLS80rzSmvKqqtKy4DjZCQk5qWkVBXkt1RWtoOZ19BA
am7pIXWMDw1NjY9PjIwM9vT0dnYRm1raGpt7OjuJrU2tdfWdLS3VpYTIgCBV
GXlZYTEZYREQKQEhEGlBYTlBQVlBIXlhEXlRUSUJcQUxMUUxMSVxcRVxCRUx
cVUxcWVRUVUJCXVJKQ1paU1pGQ1pGTVJSfitsqiYqpiEmoSkmoS0ipikopCY
LJ+wBBe/KNdDIS4+PhYOEF4W9odsXPycvMJ8glIiEmoKKs+fGjha20cEhWel
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
/KSYuOSY2Iyk5JzUbIx2lTfV1DVUlLdU1wz39o0ODIBBODkyMj1OmRoZ72xq
qSgozIhPcLd3MNbTU5SRFuLj42BhhjGnp8Muz97d6PwjFPvHsdwv2DMOFlZL
I5OE8Kj02MSclHQVeSV65G1joLvHeB+FGdDRIbcbEtz/dh/zxTHcY2CiY2Kh
f8DLwcPCxMLOzMLDziHKL6AqK2/0RNfD3jEuPLKusgo03iyFskabX5qfpc3P
rdBoWxurhwe7+wc7e3tbiwuzY4OD3e0d9ZU1ybEJbg7O+jq6GkpqTzSfmBqY
WRhamj+ztDKx8fcOLCkq7+sZaqpvTo5L8Pf2S4iOLsrNqykjtDfUjvWRYdPh
d8CxKw87P8KB8FgsgB4wqGDPnmyvrc/NTA0NkBobhrt6Dta3xwaGC7MKo0Ni
YkPiQvzCvFy8HW2c7a0cfVx8/T0CYsNiyotKQVGDfTIxPE4ZpUyNT64uLqO8
dpvbsE5oM4uLM4uUkYmassr89LyY0MiwgKDC7OxX52fXl5cgQHNw+vPx+urj
zTVyx13ffATW8xYVSHoPxAfJFcjt23eIAV3ffv3w8cv7jx+vAWJurt9dv3t9
dfXq3dWrq7fnb1+dvDrdO93d2FtdXJumzPZ3D7Q1tgBfqy+vLsnOL8rMBSqX
m5JRUVAMq2Kgo6uf1NndShzq7hkb6B/u7x3s7W6tqy3KzI4KCvVy8gBMN9I1
MXhsZPbcyt7S2cnWFXhlgHdQbmZ+R1vX+MhkfXVjSnxKdFhUQXZ+bTlMZfsC
dWx1bvJ0d/10bw05fw73Xx3vXV+gaPYfYcAwyIA7oBWPt1bgP7q9NIvmuLOD
1NBUUVCSk5peWVIKBJM2QxvuG6wuq2iqbRgdGj7Y2b44Pjrc3lqenevr6Kws
LMlMSE6Oik1PSC7KgYmuJDUT+zr6RnpHRnuHR7oHYeJG+gZhOwz19vaSyQBP
U+OU4b5+aGcnqSAzlAnYI0NAmkikbiKR1NDYWFFZX15eQyBUFhXXEsrIjc3N
FZVlubml2dnlebnleXnlBUWEAlD4xVWlhEokZbVlVU1VdW3AfBuaiC2tADGd
7SQyqQPaLpSQoYPYSmxvaycRSSCdpM72VhKxlVRf21hcUFKcW1SQmQecOjIw
3N3O1cnKwcnSwc3axdfJO9AzMNgvNCM9JyYmKdAvLD46sa25vbmhFfjOAHmg
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
1VhV01xb11xbW1sB81VWUUKoLCYQ65s7moht9S1gndZW1dVU1paXlhOKCJVl
FRWEKkJxeXlJRXFeUV5WXk56dkpSWmxUfERoVHholI+3v4eLt6erj59XoKOt
i5GBqaG+ibmhhYWRlb25A0IcaycXBzfYpyC+7khhggEZEx6Xl5FfVlQOtkpb
C3AncnVFTUJ0QoB3YGhgRGJkcnJcWlpiVkp8Rkl+yQC5e3V+FlTxyixla2lm
f30RNAaKcj9A1SuwsEM0zuf7q9hNH2CjG8B9sLuEm5dA/08Obi5O3786ffPi
8CXo9r3N8921052Vi/2Nq1N05fBsD3lKLw42Xh4ANm1ewExtLO6vzm4uIu7z
4fUpCHaj5xyPcMOL1mHHB/vYKQ8OMQe3Lw+vzsEU2b1G/rfDGwRAd/dGv5Mg
dNPnHYKnQ/ya2JtTUIy7eMA2igEG/nWwfr61dLSxsLlAXZmhzlLGVhfnTvf3
uohtuZnZaUlgkCeFBUYE+QZ7u/p5ufi6OXhZGtuaG1kDJIX4B8MaSItPy03P
JhQUgQ1WVVoKs99cWz/aPwh7rb+rmzoyur64tDgHWx8s/XZyOwmYbEtDY1tT
U09HV21FTV5mXmpiSmJsXG5mVkpCSmxkXGJMYl5mLsw7tKD8czNykF3X2Nrc
1FJXXVNTVlZVWo5KdRSUFOYUFOYUlhSVNVQ2tNa1NlY1lhdXlBVVEJtIxOaO
xJjkYN8QaxNrLRVNNWllOTFZOXRzTUlOXFFLQctc39TGyOqZlp6+pi6Irtpj
EBtDy7SYlKbqpoaqxsiQKHNTq6fauoZPjazN7WDle7mCeezr5+4d7hdYkp07
Pz62u0w72lh7e3qMJVvewwMMvscY7ODBV3gLGATTfb6zBhRpbxXMwolF6gR1
cGiI3FNbWpGZnIaiW8fGB/uHQAP4uPt5unp7uvt4OHu6OXo7WLnZmjuCPjTS
M3+qqaeppKUso6Iso/xE8wnsRIDFqNDo7LScvMx8GLH8zKzS/KLK0rKGmhq0
uSqrq8vK6yurG6trB7p7esnkvnbSUE/3UF/v5NgI8BGwt/vJ5P4ucl8XeXxk
aG11eXdzCy9IgWfOAaqFZ7HeWtvc3djZWd/eWF5fnF0cH50AoxFswqKC4riY
eD9PXyO955rKGsqyinKiEtJCogriUpoKyjoqGkCsHikoGzx6bG5gbP7c3EDb
QF/bwOyZmaezZ0FmAWxJUgspNS4NWI/+YwMAIzAXAzwDQv1CQ3xDfNy8o0LC
O1padteWzvaw1CI7K5eHyHjDgzpg5PFi2Xiya+SXQBOxD3oSFODZ7vrB+gIG
95SVaWoPbP56dJMoP6swISbZzzvI3cU7MS69pbGzu3O4rKQuPi4jKDDaw8Xf
1d7bxdHHyd7X3trL0tTFWN9WV8tES0VPXfGJnISqjJiylJCirKiKruZzs2eW
7k6eCdGJsGLLCkubaxs6W0kdzR2gSyuLK8GGhyfAUBqq65qq6+vKq0ryCkBh
VhMqgTL7uLkH+PgDp0uMjo+LjEtPTM9OzkqMSoQ9FRsWmxqfWlFcQcgvy0nP
8/cKtLdytLWwN9I10lBUlxOXkxaVkxSWFRUQE+cTl5dQUJQCIqn9RF3XUOeZ
2VMTo6fGhnrGxgamZoYWzjYuwb6h+ZmFLfVt3R19NRV1YQFhzrbOQLE9XX39
vENC/KMiQ6KjQqNiwmNzM/I62tqBWa/Nz+6sLhysL2LKahNf1bh7E15ev0QG
NpCgS2ypg6L7Oec/PLnY3wGL/XBj+WB9eX1uFlYdbJmkyNikqDh0zygyPjI4
ItgXKKebq71zZHA4DN1g1+DM+Mxw73BLfTMo/8yUzJL80rYWEqyQssKymKj4
+KhEUEcgxXkl40MTY4OjYHd1tZOaahvgIx0tpL7OThByW1sfmQxUtIuIoiyA
GcHiB5YEndqKysKsHDweIzIo1M/L293RzcXeGUiitbmFuakZmJeAIB7OXgAi
MOB2lg4WxlZ2Vo6xUYle7n5WlvY2lsAcnW2tnKwt7G2tHOElCHTwvh181tU7
ODAsNTmzrrKhm9Tb09HXXNMIdDLYLwRs+CD/sIrSamD3AEmx4QlxkQlYJxFA
n9jYtjQ1vUWbQ1dBsbOeo80lGPwzBB9rQGR+qqcAoINPCsoihaDkcPtH9gm8
GBBeZvH6xSl2LWh1d2UOv8IJ/ZPtJdhEwDjOd1dOt5b2V+Z3aKieI55pB3e7
4f60H5QHozMIgL7jCxZvcIHSr92+QmCEAqcvjt5fniDwQp+FT+0ByuBhBvAS
d8S9Q2U40NEPZo1vvtzfeLG9fLQ6tz5HoVHHpkYGutvbejs6wVqkjk3UVtan
p2SHBEZ5uAZ4ugZ5uAQ52bhbmzqYGFhqqTyWl1JSkFbSUtMx0jdxsnWBOQKx
MbO2t7S3M7e3t3Rwc3AF7RHkExgTHp0YG58UC4Z9UmpiakpCcnZ6ZllxaUZK
ZmpCWmx4bExYdGwEbIEIUGKgchHVcvcF1epgDQvA3trUxsLI3Py5idlzYycb
O29Xb9BL/h7+ns4ePm5esICtzWzA2DDUNZISlpIVkwXmAlqOn/OhGJ+InKiU
qoyiioyCtpq2ttpjZVk1dXnNpxq6z3Wew38yMiAyIy49ISIxLTY1KyEjNija
297DSMfwMRiNOs/MjazszB0dLZycbV1c7FzAIE+KjifW1u0uL7063MPjqL+n
9L9L5oZv0jtvGxBVVHEGdijQTIChTezUbwVo5vbSNG1yhDo01A8GcGNzTVll
Vkp6dBgYpdn1VQ3ExvaK0qqk+LRAvzBPt0BnB283Zz9onew87CwcwI411jXT
1TTQUtRWlFGBWZCTVJSXVJSVUJCTUJABkBVXUJPXeKT2WEf96dNHT589MbAx
tQrxC85ITIsKifRx9fJw8fDy8AkOCIkKjwYaVZJXSCgsBrOwpaGpv6evu6OT
1Eqsr67Nz8qBaUpPTk+KSwkNDHW2dzYzNNV/oqeloSMvrQh6T4hXWOShqLig
uISwpCz6d+WUpJUeqTzSVdPWU9fR1dAx1n3m5+GTEBkb6OnnYuMYGRCeGpOS
HJOSl15QnFOSlZwNk2huZKH7SNdIFy0hYHxALrycfX2cfMJ9Q7KT0obI5N3V
laOtDdgyx1sgy+d762+xEnJ4xYQfbmRgPa+Odr5nHN2D/QgbDTYpfGp/DW09
IE0LMObDfY3V1WBk5mYUpiRmhgXHurv4W1u4ONn5RIYnFRdVlxMa8nLKkhNy
w0OTfbwiXJ0DEQbZeNlYuFuauFibutqZudsYu4BY6Nvra5nqqD5TktEUFZQS
4BPl5xEW4BURF5aWl1ZSV9J6pK6j99gAbGMgevra+s/1jIwBXZ8YhAaEAaA4
2jiZG5n7uPkG+wSDYeNg6+Jg6+bq5G1uZAmoof/4mbb6Y02VRxIi0pIgwjIw
ufC1MN2qcpraqrpPNA2faBk9ffRc75GRwROT5/oWxs+sLYxtbM3tXO3dg/xC
k2JTCrKLKoqrqgg1ZUWVqQkZnk7eDhYuNiYOjtauXi5+gd5h/t4h/t5BAd4h
wb5hAHZg1E0MDS/PTW8tI+g52l7GU0ZgqV0QtfzhXUE6BDNlwcR9g/IZ7rw6
2Xl3cQjtq9OdiyMwDHbx20DHW6t7q4s7ywvbtLm5sZHaUkJmQkp8WEx0YGRs
cDRIVEBksGeQp72Hg4Wjq51rZFBUVkpmZWlFQ3VDc2NbW0tHV3tPU31rWUll
fk5xZlpuckJ6WkpmSxORROwgNre0o6MZYmlhSXZ6VmFuXn11TRepY2RgcGxo
eKivb7Cnd7Cnb7C7r4/cBZAEbwYMqi4tS4kB+AsN8Q8MDwyOCg0L8gvwdvPy
dvUCtePnFQDUJsAnONA32NfT39XRA3AHUAMMFSd7N2cnj5DgyJjohIjw2Oio
hKjI+OjIhKSEtPzcknJCTWV5LejMytLqtOQsf59gmFAzY1tANHsrB9Bp8LVB
/qGAnjFhccF+oWAShASGJ8Qm15XXUoZGAe5hia7PT+wsTQPon2yvAO7gMQYY
o8SdZjtY0Cx6jk0K8nliB0DotjWseWwLHH1+h+r5frh8+fH1q09vXmHp+A7x
rAhHW0uAa4fAZ7cWT7eXTrZogD4APRtzVCzi+vTT2/OPr8+AoYAAsmCIc4AJ
4M4RhjsH2L0eBD1/RL7dYRMCI6BO1xf739HqAO+8QzFvYBNuwZrBwrH2L5Hb
bf10g3awMrO1OLk8NU4FY4JMbqltqCwsRWk3iis62rv7uoeqyhtjIlNdHWEu
vJ3twTDwsbNyMze2M3puoa9rpKnxRElBQ0ZaRUFOQ0FOVV5GTUpcSUJUXkhA
AjajALegIK+wMKgpIUlQU5JispLiMhJiUtKScjJS8tLicjKispJCklIi4jJi
UiCyEnKyEvLQKmDFBAHgFKAVl1MUl1eEDSgpLyksLSEooSKrIsgtKMQrKMov
LCYojn1KTkFSAUiBlIiUlLAEGOE6ao9MDYwdLOxN9I2BHTvZuLk5eIT6hyRE
xMWHI1eth72HmZ6prpbeU82nhtrPzJ4YW+lbOpk6O5o6OZg72ps72RjbOFvY
+3t6JoaHN5SXbSzMvtjffnm8c4oWA5Ca3TdYVfHX6AbE4Y/DtZ9P6HDdiGH9
FqqZvr18vLm4tzKzTZtanpoY7SE3VlWWF5fmZxVkpuYkRKWEB0X4ewb5+4SH
hyWlJOTmZRNKi2qyM4qD/KOc7D3trJwtTW1tze1tzOysTGxMDK3NTewsTR0s
TOxNnls/0zXV1Xn+WEtfXVlbRUFTQUZVTlxeWVZFTUFdQ1kLWiVpZQUZZWUF
NRA0qhIKWgoaT9R1HilpailrAnBoqWhpKGuoK2moKarBeKIc8pLyctJKkuKy
YiKSkuIwJUoqSuqKskoq8qqayigx1xONJ7qP9Ez0TZ49ff5U6ymCEh39ADfv
mOCIQA9fsOrzgcOmZocHhrvZu1saWZnomz3XNTLSA1vC3NLYxt7S2c3B08PR
y93B3dXeBWyV/Iy86uLSqaGh3ZXFw83l/TWUAQ9Mtdfouu7Om7M9FMyJrqod
YopxGztTu6OcqMwZlofkJfJUbN1enp1jB7VnO+v7a4tbYOMtT89ODLfW1RZk
5YMeiA6LiwqNjwiKD/KJ8nQLcnPxd3HydXHy93QPDQqIS4zNzkgrTk0uSErI
jYlKDwlM8HQL9XAOdnHwd7H1AxiyMnZ2sPQ0N3Yyfm5nZGCj99jsqbaxro6x
jtYzbU19LfUnKkqairIqqvLqACVqylqqShrKcqrPngLA2KopaqjIq6koaWmq
P3mibaCp9viJtj7ot0caj5/pGmlrPlVT0tRQ1dZQf/JI7ekTTX0jXVNDfXPd
p0YGuqbP9CyNntmYmzjY2bh5ugREhiWkJeflZVUU5VWX5leCio4IjQEDHta8
2TNzcyNrUyMrGwtHZ1tPd0dfb+cAEAdLVycrNydrlxC/kIyktOa6+pmJ8fXF
hd3VpYONpWNQfXsbAOIf3pwjmnO2h1vdP06c8QwedxX9jnfgycvj7bcvDj68
Pf90dQEYhF8+RSlJj3de7K8fbYKWW9xdmt+mLSxRJ/vb24syc5KjEiIDwsJ8
QoI9A8N9Q8N8I4K8Q/w8A9ydvdyA9aMWFL67m7NPaFBUekpuSWFZfW1TJ6ln
sH90dIgy2D/S3zswNjI2Ojza3kasr62rqahsbWwC82m4fwDa1qamhrramqrq
+poGErF9eHBgDHPIlBYWBXj7+nqApesVFhiSGJ8cHBDqjRxlAZ5uPm4unv6+
QRlp2QV5xbHRCYA7MZEJ2Rn5JYXl1RX1jfWtgImAfVWVdcWFBMDByIg4P99g
Rwc3Wxsgct7+PkFgQTnZugL0ODvAX+Hr4+4Hf5Svhz/MCNBkeJkcm1JWRGiu
rR8fGqTNzWzMz63PT4FFursyc7xBO99ZxfkjVpRqF1MvYGjdcRwQLNhgA2M9
myfbqzgPwvBoG+0OxEFOb1+d3Vycv3+FMOj21QtUAwgTwCbAMhQYvzwHcrS+
eLSxeLA6B+oI4z7nwHrwQKmf9RiWMAcPJNi/QshyeI0hzjXmjrt6gTzh+NbD
l8RdwUGkDFGENk6CULaxg3UAtdcnyHcBNjlKnbFJ26NRd2jUtZmJ2bH+rtam
lprampKyouyClIS0AL9gVyeP4IDwglxCU317aVFleEgsmOIuDn521u52tq5W
Vg6mJrbGRtYGBhYgz59bGRnZ6elZaGsbqak9VVLUUpBTkwc1KKEsL6ksJ6Ws
Kg9qUBO2noayppKsiqKMspwkSqahLAd2nYKkiBQgDjxHoCOtCNsT+trqj549
fqYgJq8sraosq25hYm1rYa+j/lhVTlVf28DwqaGW6iOkCcHq1tJ1sHSICAp/
9lhf/7G+6XMzVwc3mPcIMFciEoP8IxysnfW0nypLyytJKKjLq+tr6pnrm1kb
WzuY2dmb2FgbWDgY29obWUPrZg1qyD0lKrq1unJ5mnK+u/7mGOm6F4ebFyfb
r87uMlviFTeuL07+Od3E1dnB9fkhtO/O9i+xWxLYEeHq2fbq4dri7vL09iKY
OtTZ0eG2+vr8zJw0UCGxySmxQAaTgvxiPNxC7K08wHYyN7EB0I+NTMnLLs7J
LIqNSg4NigzyDw8OiPDzirC39rQyA+LpYWMBhpaDEYy/obmxkbmBrtHjR3qg
tXQfPdN/AvpQH5SYuuIj0IFa6o91tHQ1wDhX1NJVf6qvpacNlEVOVUVWVV1R
A0Yehl1XW9/azBZ05mPNpzoaT7TVdZ4+0n2i9VRPR1/38TO9x88M9YzNDC2Q
b+e5hY25naOti6sz7LGQsMCIYK+g5MjEvJQcX2dvQ51nWoqaKnIq6kqahk+N
bE1tHbDzLKDGjtZOjlaOTlaOztZOzpYOge5elQUFNCplexm7p7C+CEYaGIGn
u2svj3auYJBRER+gk0evAV+Od969AB2IZgHfpK+/F/dBZbVRvusTsAbfnoJl
fgTmH8zRi/2dg3UafOfW8sz2ytzUyFBTTW1OWmZMSFSIb2iwd6ifb6gf4gJh
vt4R7q5BNlYelibOpoYOILZWnva23p7uIaHBCVERqeGhSZHhKSHBCV7uIa5O
/s72fjD+tpbuVqYupob25saOxs9sDfWt9J6YPNZ5pqn+VF1FB1rtRwZPHj3T
ffRcS+WpqoK2hhKMrb6OtqG+voWZqd1zfTPAoGf6gCwmz/RN9J8aGT83Nzex
trZwtLdxdXHycnH0AmbkD1o6JA7+9ajwlIjwhIiQ2HD/KD+PIDsrV0M9q0cq
+hry2oBcejoGpgZmNia2QPAdYIRtXewtnGzNHWzNoe/m5ejt4+pDrG0hY9V8
tmmLhxsYyq8D6GxdIAN7B8tW9OLm8uzN+T6uKIDL46cAyJo63X99hkofwiy8
A0vgHLGe84ON15ht8AbpHNBXJ+8vzz+8BjkFLfT65OBocwXjQTCtS4frK3sr
y8tTU8Sa+qyE5OiA0BBgHO5+AZ4BPh5+/j6BAb7BwMsCvYP8vIM8YRM7ezna
OZsamRs9MzExtDAzsrSzcvzuds4iFBHqq+raGlvbGttaG1pJLSQysXOod3B0
YKSb1NVU2wjS1d7Z1tBai1VHzcvJz8/Ky8vMy0zPyc8pKikoK84nEIrKy4sr
q8tqG6qbWurbgDMCecxMzwUiEx+TDDDk4uhhZWZraGD6XM8YLITn+iZmxlaW
ZrZ21k6AlUCOoPX3CvT3CACUcbF3c3P0cLFzdbIF+8otMiiiqqSim9hJHZnY
XdvYWV1Zn59ZW6CCBtiiUfdWZzEQ2Xp9vHd5dLek8RYP48Rv63wP7ARI2sBt
AJiXs50VLOQD3QPCK4xgRc+PYfBvX74AAEI8CM0CHkVw9uH1xcfXL7EiQevH
/zdb7+Hc1pWlD/4VWzu7v1/3zHT3dDvIViAp5ixmUaKyFS1ZsiRbVraClSUr
y8o5Z2YSzCRAEjmHh5xJkFS0u2emaqv2D9gT3ruEe7bqFuoRAIGHG873feec
e6520DzcY9R0AfBxlVHF2/b/jz5wQa42uLZw6Eds+RGJcAoDt9HoO+mjjOxw
w7iPU0foo6OteQZk45pufV/baE/7SE/LgKr5xYPbpw4eOLjrxx937gP9vnnD
VsBu9IXOX7pg/iKgZ8sWr1mxBJTplo3rt61bs/mr5d+sXLFx6eJ1dTXL5pUv
KCqsycupyJxTPDerJCMj/9NPZ//1L1/82x8//eP/+sv//S//+sd/+cuf//DJ
J3/6bBYw7RkZQMX/+udPPv3r559/Auszb8YnsxiMZn0+GyweINQnf/50xt8+
z83MmfHXz+d8MQdaXk7hqhVrCrKL0EKW1S6obKgtr4VWV1FXX71gQc3C0vzS
3Dm5+Zn5c8G4fjb7s7/N/PSvMz7725dffj5nzpdZuRm5xXMLCzPyS7OLy3NK
ynNLK/LL5+WWVheUr6pfsnH5yj1btlw4dvTVg7ua7naTphfkIYpckDlOMzRY
dLAkE0E3OzzDboSeOLGL9K2+GGhzw/vR+QYXeJCc3SThlnCslOXUaVABARsf
UOnwbO6Ozhcvnt66dergwW9WrNvw1cb1K7euW7nl66+2gmFZsXglqIP6qkWV
pdVlRRVlhVWgOqsrFgHuNMxftWQhcMV10JYtgkW6YXHD2tWr1m3+duu6VRsW
1y9fWLu0rmZRbc2i0pLqwvzy3Kyi3Ln5OXPz8/OKC/JLCvKK8+cWVJZUlBWV
5WXn5+cUZGflQqdBy59bCF8H+FJaUFYzr2ZxPYa9ljUsX1y/FFbWiiWrvloG
MmFZdeV8MAXFaC2LsrMLMjNyM2bnABkAblAytwigZ15OCfZtcRW0qsKKMujw
nJKirKKy3JKFFTVrly47fehg27Mnna9eDqvaDH0q01C3daTfph8iUwZdZw8A
gktWquKCB5gCmgQcFj5lmE8s5RXHoMPog2X/7XqnUY1RWjMsVZjqBj4UgDNX
9YNdo30dw72dg13tqsbGW5cuH9lz8PstO4CoLJq/rGHBSpA/wK+WzF+zdMG6
hbUrF9atqq5YOr9yaX3lsgU1AASrGxasrq5eWl21pKZqaU3lkup5DXUVi2sr
FsO4LFu0DljBquXfrly2aeXyjSu/2gRt2dL1ixvWYKmqevi0lTh29auWotRa
U1uzfAFwuZrlDQvX1C9YXVO1aH7t0iWLQX+tW7RwJYAOtIULltfXLamqqAe1
W5hXnZNVkZNRlpNRXJxdXpYDvVpRmltRnl9bW1JfV1oHtKG6tAZke3leeUVx
5aqGFWsXr9y85pszR08+unXv5cPH7S+buptbRnu7DIO9hoFei3rAPjIAc1Iy
GyWryWMzQY+FXPaY5Al7nBGvPUAHxbIxZE6LJ1gBAbNqKbUJiIGZ9xcoXlAO
EDgiHkfUA6wM98JH/e6g2+q1GR26YatmwDjUrRtQGYZ6QOHq+nvUqs6uxtcP
r18/ffjI/u27t32zZfXyVTDrli5YsmzR8pXLVq1f/fW6lV+v/WrdmhVrwRxB
AxGxdMFy4DDAZOrm1VWXYWZFVUl1VUlVbXkdwC48Ob+8bmFVfV15dXVxJc7A
kqqq8poK+LOyrqaibh5M7+KKytKqGvbtF+Eu8rrKekCN5Yu+qq9eWFVWU1JS
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
u3S9nbreLl1f91Bne+uz53evXD975MSerdu3fr1pzeKvastAjFRWl9XVzptf
Wz6/rqK+dt7i+VU4Cgtrl1WW1JUVVM4rqiwrmFecW1KUU5yfVZiTmZ+TWZCd
kT93Tl7mrJxZMzJnfjlnzsysjFlzs2ZmZ34xd86MrFmfzf7yk5kzP50189PZ
GV/MBVtXmFMCb579ZVZOVgEIzNzM3LxM1EQgTrMzcgsyS0pyiktySwqzigsz
iwqy8otzikpyiornFhTPzQPQWVRVubiq8qu62g1LF+3ZvOHyqaPNj+813rvV
/eopMF67dpCL8UKDCwAgp05Nh5WYYWkArNBxpWaFNaH3hgYCRwT6inpPdi/Q
nzZGH3GQn1gOSqFdEKFWZhGy3aOziSkvTs8HE4O5M6r7DH192l6Vrl+lVrX0
tzV3vHzR+PDRmcPH9m7dsXkN9P/qJfVL6irmg9mZV1A1r6C6HGx8XmVJblVJ
fnVZYU1ZYW1FSU1pYXlRfllRAZCxssK88qK8eXnZJXlzAcSL4Q2VpQuLcquy
55RmAi+aDRhUkptVkp9dgQGjzLL8nMqCXKAQ8/KzS4tzygszS4rnAu2uLS+s
LJhbXAAglVWUn1mYPSsnf3ZhaXZ56dzSyvzy+rLq5fMbvv/6m5MHDl44fuz6
ubPtL18AzdYP9Ov6e7V9XfqBLm1fp2Gwx66FaTYIjxIYMZshEfCkIv6gE/oW
7J6RehW5N+AO+W2c4yGJNKaeWTdbG07sjMCb2YzAcCi9jc/TQqBreQXxCI4F
pfGILxnyjoXQ3KEvKOCO+VwARkEXmFyzB8MZWipx3KsfUhnV3UZ1j0nTaxkZ
MGv6QSPAD9F0d/S2NLY+e/z64f1HN67fPH/hwrHjx4Dqbtu2fdOm7zZs+Hbl
2nVLvlrVAFizZFndgqXV85dWLVhcOb+hoq6hsr5+Xu380tq64mpALkCNupLq
2uLq6rIqbPBn+fz58IaK2vrKuvkVKF6WoPJavGLBknXLVn27dv136zfu2vL9
4T0/Xjh+4s7lK0/v3Hl1714nlmJ7PdjRPtoH7KUbOhnwZbS/faQXqzSP9Lbr
Brp4ww7Vo9ZwCgHoF+JRJk6SYcalVOowkd/MnmZewObI1p4kEvZ2wGUKU1XP
AG6iEfyK678Z0gtNiyrTHAyCzoexSIUlWGtwQU45Nz/J6MPJ1ZwazWkDaYkH
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
DjYo85Cm//L5k/e4sY+eyghpxQ5oIhj2Jxr5Izo82Pj4YvvT8e75i52PR08/
H22fH2IAuGSb50dbX053PmPN0dH+Y6n7+WT3j3fHf747/v3N4aeT3d9eHXw6
3aan42T728vn398cfX9z+OPDyddXzz6f7vAtsftvkKXnMBYO/vhw/MfHE8zl
88vdL6+hqDz/8mb/z48n//j88tvrPbTzBvPFiuGGPNoQhp7Zl/tYljfPafBY
wC9nz//t/NWPD6foGt19e/3syxkafIY2z1/ufn17+P398W+vD85xP2MW+5u0
8rhq+08+oC7KvNrF2L69eU7lT7c/vtjEHH97tUfpm+d/vD/ESL6/Pfjzw9Hv
7w5/e7v/DafOdr6/fQ7mj7dH398dfH+7jytIN9XR5te3B79/PP7tPczeZ19O
n/32ah9lfrx78dfH0z8wjHdHNM2zvc+nz35/9+LP87N///b232HOfHz14/3p
j3cnmMU/zs9+fDr769PZjw8vfn+zj65pSU92IYgwPDxQWEasLd3GB1tYB6wS
rt37oyc08jOMbffzKZ19/fzx+/3186PNTy825Hq9efYQgujt/hrdeHSBnqIK
lhSL8Nvrva8vdz9j3c6eYuIfcbMdrr/aeXCyvnD4YPLpTPuDAddqn22xq3Sh
vWChvRByfqYpa7Ype6Ype7Yxe6Y+e6o2c6Y+a64hC3AzWZ8xXps2UZc2VZc2
Vpk47Iofr04dq0mdqMsYrU0fr82YrM8ar02fqMsED5qQtC4T+UgJsAxCrVGm
iZqUSabx6pTxmlS0r2kSPdamTiGtIX6MmsIYaBhTDZkgMJMN2QJqswxnIMKj
ruKlnpLVwaq1qc5nyyMvnsxDWu4/njtYmz1Ymzl8PHPwaHr/4dTe6vguhZbG
n90b21miWNIuaHl0Z3mUcogZ2VkZebY6uLM0+Gx5DKe2l4Z2lgZ2lzlKtTLC
/ODuvVE0tbfKoahlFB7YXux/uti/vTywszz4jEJRAztL/TuLA9t3+7fu9m7e
6dm407O9OLC7MryzjAb7d3F2qW/7bs/u3d6duz078z1PF7qfLvRs3e3bvHt7
a6Fv4073FqzUu907i33bC71P7/aAtkDz3Zvz3RtznZt3ukAbnKIYFZ7r3Zrr
3pzp3Jzt3pju2pjpeDrbtT3XszXd83QW1L0127kx3Y58MJszHetTbRuzbRsz
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
Rt1PRquejFY/GasErY2gkUYMlWULlaFOx+t4Lg2q1njNGmTOaA2kBwmQUUiV
agq4j6Dl2rXhSrSGAtQCyozW8lI0PhnFFBog9JCzBhE0VnMfQmaMmnpCzdZJ
72toarRubQRU+4jEUTWPreYx5NJIJeQY+kIVdApaG6pdG6p5NFC5NlS9xvEa
lMH0kQrzeLj68ZAbMu3+iPvRqOtRvwtVVnrt060543VpsE0mYdTAkKlMHqsi
o2YE4GKLG7RHDzqi++2xPeUxtyti+sqjb5dF95fH9pdE3y6N6ymz9lTEdZVF
dZfe7LFH9ZRHd5dF9VZQ4d4KS08ZVekpvdVXFt2L/DIUiOkuv9VdfhPUWXKz
qxSZ0b2l0T0lUe1F1zvLb3SV3eipuIVGuqlwNJrqtsV0lt3qKYvqK7+FU7cr
YvvKY/ptsQP2uH4bxhZLMOdOHq5MAY1UpY7WpQ3XpozWZk3X5cw05N9pLZtr
s892lN/tLFvurljqhsC0LXSWLXaVQ3IiZSpd6i5b6CxButxTvtRVutxdwu7H
8pVu23JXxVxH2UJ3OWi+p3S+q2Sxu3Spq3i5uwwlFzvKQMucg3budpTcEWov
oV46qKP59pI7bcWzLXnzHQV32vNmW/PmWouQM99ePNeWd6etYKG1eKm9dL61
GLXm2opm24q4QCl7LwvIzdhWSO7N9uKZ1sLploKp5nwwM635s20FM6DWfEWG
AYhaMy350025U005U03ZMA9B083ZU4254/UZEw0Zk8Do+mwUmGnKnW7MmTGY
qaasqUbKn2rMQZlJsi6zhGC6TnE7OAWUB8OmaAbQZx2P8ET1+kTl+jgeHDfS
jYkqMKC1MffjMfcjYpBTtT5ODzsK0x1OBSrX8cThVsejirvUoMfDbiLcw3Qb
Ox8OOx8OOR4NOx+PUA6fda4Nu56MOJ+MuB6PONZGnI+GHY+GiOjUiEvo8bCQ
U049HLI/HLTjkDKpKceDAeQ4Hg7bHwyi/cqH/IAYVYxOwaMMSg4gdYLoOQIN
ogX3A+QMuh73Ox/dtj0eYOq34xCZaPnBQAV6fDBgQ/UH/WjB+aAf5Ho04EaP
RFSdIqoPQYNIHQ/6K+4LUS3nQ2gUtx2P+h0P+204JXT/djnSR4N2kBxKDjp6
MODi1lzEGyV16inZX7HaV7baV77aVyHpvd5yEJj7t4mMjiqkwEpf2b2+spXe
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
/+f/8v2v/9nnn/4z0sD/+7/c8v/nrKiglEjvtLB/qcyMWRntnh/smOpqmGir
neyonuurv9vfMNtbO9lWOd7qmmqvmmqvnGxzz/fWLw223BvtujfRtzLaeXeg
abqnBoUXBlrnbzfP9TXP9DTO9DL11M101c721N7pb54faJnrbwZzZ6BlYaht
aah9frAV/MztRtBkX9PU7Zb54XZ7RlximF/GjcjEa6HXfa+E/frPgf/y37z/
23+58k//yee//qeECC9bRmR5clhpPNk+gj4EQAbulNG+AkVmOCBTCAzhFEn7
Iond/4Q+GncUDJlPcfTHgxcXgUYMwCLlNGOcipLwvewN+JUdccQUmYisnltG
pIarF0VdQBOGHj4lGwxuXikFRV3YdUDFyNv2i0IWVASs3CBCeRDxt7wk6FNk
oI/ZJmJf3C9sUgGS/pVTQp+SmF/KyNsGc+9XSSXHzOgCmhditFLGUVms2ul3
aY+6bPPTporehX5pQ7s+e/llqzj5CoSXkhIXIkcmkLqIOObokjkSrc7+5Mq7
pCqjin7J62fXmRhQurAK4LKskyfa7MFQZLLyfgbKvx8nV7cZOxa0YfIfGYk/
tyk+fLOM1e0oiW3YGv8H4L7k+bxkiZgHYzON0Gy8XGpH3wl6qS9HHCyXp2Nq
R12+yz4i08jtFr+/XZ/LNrICCH/Pe39GQEEY9TqGka95c6Y+LGNI0i+5K6PG
VFK/YKhEGTtwzI3oQwzgwvsgugvGF5N95Kd39l7armAGNfNZ8zdSNHNp50NF
3IXVsMUHcOonOwr+f8begz2O5DobJZg2aLVXkmXZli3rsyTbsmzJSdJqIwOA
mUEGmIkwMwgEQDATYRIiM7nMmdyo1SZG5JwTCRKRcZPke7/73R9yK54+daqH
9m49/fR0V1dX9xD1znvOe86R8S8MgHhG6G1rj9f4zzWWN+3Je/Xnf/2D55//
zrIXXkx4/rmE55cuem7ZoueeX/ziy0tf+uX/+skG76q0t97IT/WcqAvfG+6+
P9p1f7h9Zrjz/mDnzHD37Ej39HD77HAXa3MjvIn9TtZmhjqnB9unB9vuD7Te
6bt5t+/Wnb7b9wZap/rb7va1TPU13+29xdpk1407PbfudF2703X9bvfNqe5b
U903pnpuTPXeYsfv9jTLnlPdt+/2trBrzzTWBDM8hRnpWW+89fM//6vvLFn+
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
6ZXV33vhu7/6yc9rt1XUb/PXFK2pKcqQardQAQegiD9FxJYK10+BCPYRLh6S
w61GqA5kzR3ZCPcR1jbludBxKwYrkUu0DUASFzCQ2VIEYuAiAGT3B6AE+TSi
UeLuuZxPVVkUyaFpcVw/opsjeHPtVp2nsoyGC1bX+FdbhjWR8C1/NaSAE7ij
Gvtrqsk3zGgCjFjnVWLLW8TvaAwiSKtgO5UgiBW6YVmCWAwBlZLBaIbxixAH
ghSuMjMbSpxV143amMQEd7Cd9S5pgvAMCd9xbbZOm1oF49CfqNbjRWHaZn/n
cWDMoJZqu72iZ5A+MyWyNxKwHkGBl+zjEcU37af26sb3sb+MzFzjqcQmuKlK
4CZWVzQOv4v6KCYPpzxw0PX9x1FiuPv0XdUIGmJcv2IAAmPNt8nIMxDHBftU
s0mQneGKQRLwcRcBg819cAU6XlCe11lIa9ySun9rxv6t2ediJR+cqT9YVfZX
L31LQA+v7PPn/9dfrfOt4+izOi19RcqVk6e+mmPo0/t4ovsxZz2M+zDi0yXb
As9o3cG28+Odc6Md82x/pA3jDuFBxBkE4oQZkdUNMSCJRLdkomzRlCnvi7s9
f5od2lPsL8jKzFntTfztyr98+fuv//JXB/Zsa6zIixStCQVTIwJ9nMyifl+N
yiwqKY8XKl9jQoGhwQERMzVoNXLr1JgIRTiO7fcBAiK3NuIQMxqeD2YoEstw
T4Oq5KuEogyYKnMTZapqWziNLWnkKQT6rKrOc/R1GOMg3qcmf1VIoA9kt9Yp
r1dpEGFEZlVEJsH2y4TYq1E5hlVOlmx5ORtQtLBZoEGkyDaChsSKlwgVhcQg
Vm4ElHsnJpKChpFjJVSg4ozgR3tEXwJ/+zGdPUbRAXs1QwjluthG0FKMQ2xi
ZjypuUI6Y2ISFw9r4uERHh8/eCRgZBkCaAYkUiu/pocRMh+VkghJMqRzmXAf
rEt3Q0+CiVLsQWThxMUWsV47fYcBQ7/hktHOckiR1wi/B2IotZ2r9RW+dDNy
Cv1rQZMkRlRChaIu0jjj54FtC3VBkABVndnY5Cpvo8ChxwlrW4H5R+HRPEuK
UT0Y5ijqadiVxVu55W2LRJ+UprLUfeWZp0L+D8/sP1VX+ZM//z7DnQT236Ll
P/7Ln2atzspclZq+wrfel/Px1ctfzY4+muxhoPNwspN7fBjiIPR5yF0/HQx9
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
bAEOyvmI/mLy8nItGDBfkRMyr9NEiPuq/mg+am4ePn/9XcgOMXjVaibiJasv
S4/ml+9TPZEcX365+nvEWzkB3Uf/K9KF0X2GTVIaDNXMPSLvTXJExfh4VeId
vzSNemTSAGFvTI6gMSE7Rxh+WshuOsOATG4DB3WSPZ9UjwgbmhofMmPI+Dsn
i4U+CPkKwqqkY7K+dZKRVESZr7mOCwMQSq2g5QcBFT8lKpym1fKwUx74s688
rbEs9dLBXe+fbixdn/3SsheWJDz3l9/7m+TXPTlJWet8a7KT04437v+/H0w9
mex5NNEpI0wx+mjo6dStg23nREFtXVObNwkcZtYdUZRBJa8Wmd94GYXb0AT6
MNxpWxhqmx80iA9Dn0fjHY/Hu45U7i7MWJOzIin1t68dqtx+qHJLdEtOqDA9
HJDoI75ZlURC6g0AZTzVeQas2HGmrsiCD2JtQLVWuKnFHKmpa0wVdzzGRMAr
HjZh9lRlJh+AjyAzgOPP0BvYnEtcqMgOB6/8RMl3pNigKs9RHRCqEu9jyDSj
uSrZeNBQMAk+EvTBJAgzLBjT1HvD1hDkwF8TCLFiPI2/s8ziPGwuEiadsaqW
1+gEKEmOFXrkaqZlVNK5YDj6NdJ55Sm5QHE7jFjG5eMgIZZcbJMNVztklvM7
txP6K7mQqvlHLNmbXv8VaEowVasrX1o9eiFNimkcVBhqvwQ/PujoweSCb4vi
IuYg6qn1q5DYze6u7+tWnox+dPRp4qmTANwVPAU9gCxs5NpCrxMFjGCXyNj0
TwhncIXp+t3GwIukhBaig6OIU2/YRQunp6cnL9An4I1QEZqz/hP2p7eGDs1M
+gSidOcqBSucoRg/IeTvK4108qASaTgj6DlgF6rzp4RSLEr0wQo3VxjCGSRi
wbS6onSGPvXFqfUlvvpS35mGcp7uIJj7nee/vSTh+b/7639IeSs1OzFjrTeH
oc8nV67+af7Ok8le4dzplk4f2RDf6ZgbkbY4vp0badNp31T+Nyl4wzY3rS5o
VrWBBPqY2oPmucG22YG2ucF2abvTqd5aZXDr1/d6rhyoK85Ym/164roViUdr
dh3YUxwWWQ4iItFBiOMyoI/XyZDDscZLXDxEYEDQR6YIsA1utoCtJp8u6SAq
sHEHSJCNTTVmmA9wFpgVsDNXgx5oDGB/76ZVBNQIAJkOIEl2ErXcWmkPJO5g
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
dw8YEonwQMJ9TFNaBj11xenc71OWva8881jV5o/P7Wdr+Gs//2XSKyvW+dK2
bM4LrM+f7B94dGd4Yaz3wXivEBV0z410zw53zwx1Tg923B/ouD/YcW+gfapf
tIHOqf7OqYGuqb7Oqd6Oe6hN9bbf6227P9A21dt8r5+12/fZtq95eqBlZrBt
ZrCV53PjKd1aGU4tcF8Pt7bZUjdI8sYwSGBizzfTQ+8dbzwe27tvd1FNICNa
mC7S7KTKvDrY9cOYjsR65P2RoKP4Djh9DEjKd8RsNfnJhuAN5Nb51J/iChzu
LIP7ULj3R9IrUgjblewQs1u8DgShHLjJSwSUcVQEbhfapkJnTOT3YYtPyJ8E
P3ukoSxqxYQS5w4GC/D+2P6aeCMAeMVz+tjrs8sKTH4z0wwqTvCmq9IAL+Ao
kjSpttAJzI8h/RtRFxC/kg0rMTPIFHfD17pUbfB7ougurtBDn1EnKdWWN6U6
EIshTxRjQw9R4tkrfzxMiecigZXZduXD9hk5DYhTSa51uH9ESqPFb28Yiiz7
Ma1esANOXf1ENjKSdRhWYxsW0YMbHhPyxlz8KVaxHlfUgDk846Dx0RoWx5aa
4yjAIvl5YmZMK3mcmLa8SeLD0EcY39IO7V73+9MNFw/WJv7bb3yvJ671pJbn
Bv3rCqYGx2cGB6cH+6eHemZH+u4PMtzpnxroG+vpGuvuGu5oH2ht6Wu53d/a
2tvc2n2zuetGS/fN1o5rze3XWto+v932Od/h7frN9ms32z671vH5DdY6r13v
u3m9/9aNoZbbw63NrE10ttzparnb03Kvr21mqIO1ucH2ebZFSd4kAAH3eTzR
zRjZn2aHr105frqhev+e4lAwM1aUHi3MCPlTZVltJ6Vbngf8PoA+VbmrAX3E
Srta5tUUq2tytZbAKZmBtrBBnClAT2WeYyij2jArJSlwH4ghrUKZCmriqA6k
vcsmI4AR5JS0/kFmHuz0cUxzEm4sAx12A0G0KYZCCZpS8wZ5CcACBiJh0K0R
qYArZIAY25EumLQIS6nlESP+NJCMXeRkbbdXfjUOQh82WszUTscDC3vptmkL
YTpkSsCeSOGzqJWMFHbCulq3Om5KIyK6Rg8BOwKU6HKoNi5ldT57/kSZgJZo
OY43Zi3+RGZgswZ7tbf95q6dXZsr6yEgZQMiTFL2iSjHkOO1IfeFNVMdCVLt
NMYgAhmE10R1qBHugKGBvLF4w+JGsInMjaCGfZZoA+KdcgW4KMqQQC4kN4oh
zYb8CuoK0xqKM5q2ZLF2sGL9hyeil4/Wr1uVmPaab2Pqum3B8tieyFDnQE9r
V2dzR8et9uZrzTc/u3ntD7c+ev+zd69+cuH8R2fOvH/i5NXjJ949fuTikYOX
9h+43NB4IVZ7rrb+Yk30TFX4JGs10dPVkVNVoVOh6Lnq6Jma6KnqyOlQ7Fy0
7kxDw9lDBy++fezKyZMfnD/90ZWLH/3+/U8//+ja7c9utt24OdjWMtHdNdXd
M93TdW+gdW6wbX6w9cFwq3A8dT/gpe46H052/NfcaOcnV9+O7mramR9ixKcw
w6krV+CTJkpRW4HHRlWLVAakhByprI23DtPRugIMOtUFLvFBNlnA0OMaBCRp
F9YSYN7hIi3ISwQ/UdVmXskUA4cDYWyGmzlJAR04ojarq/IMCLMZkG0/JPPH
6CMV144FWNnBHAYklWw2N8GqOaOOtgQdhFzE8hYVQgXDTG2G2BCTl40gUb/j
YdFxnXpBdrOJacVyfNOcW+Y3QkAIOOLycybeuUAANrLhuxO+ZrMkDFhqWL/M
t+zVAGS8K9f3JjujGtMUSogRSVm3sHotQIEgpkVlBMjs3/8Eg+LBHB7BlSUR
YMI8C7DAnokK2NdyBUxe8OWg1sNQQrCJPAigj+tx/D5dcUd0cOE+z4ASfDty
oQ1YUTMDj3M84COpePBOPJTE71+iz77S7H1lmfu35rx3rObq8cairOz01zy5
aevLC0ovn3/v0pXP9h252rjval3j1WjdxUjdhUj95crwmT3Vpyv2nCndeap4
+9tbtp8orDhctPVYsOxosOxYcOvxwvIT/i1H8ooO5xYe2Rw8uiH/UGZuU3bB
Qc+GWu/m2vT8pqS1tSuzI74NjSnrG9I2NnjW16etb1pbcCC/9MiWnSd2hU7H
9l8+duq98+c/+sO7n3V83jLAkaj1/mDbzHDr7Gjn3Gj3/FgvR5+Jrm/mxoZu
/eFgZWlt+YZwII0RH6l50zl2VHipYEBYb6DxQmfaqbZqyZHFVrV8DAEOj3iG
4cvVECePSw9ODQoUrbJU0C7oY3lwXNCKW9iUNNpGGXtMrDF4RhpSgFrWRKYd
h6pghyZRCJDAUpzNI4KSgRAPpsNrUEoEciEMDnY/4u0lSVFcs6OAR9jWEmh3
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
v4RKn94LmnxHVIi3DD3c/98e3/wHQcwnKkSUaCg667t//+FbOvc/aYTPhGhv
//blPQMQd2Aa9e+P3/3t8+/+9vm3/3xPAPSO4Ia2AKM/b9785f7yp/XFX24v
/rw+/3l18U83pz8vqJz8vDj/aX780/X0+98R+hysT1lDvuD1zqMbpESXx6e3
hBd1U0d1M+1BnuGlcRtA0+k3cbNYAot2hm/11XH9pgexiYzmQxOO4Mo9TYfq
bGoXgcZrRU7nF+qEs3hL4dmzcOIpNIyxDlrHDRTXT/lx5nXo0SiKe8pV1LqN
fLf14LgjI878i0oJ1q0H82m5jTwQ/TURShwv/JSEUMmFFPUJsc9T0rjGFZUR
M1XiuRFwvU+NUE9GeDCcEpI17T/lQ4+zX8GakMxlGdz9jQsDmmH8lIM0Tuvo
6SwpU4NMa93A0QJoDh9XTizKt1bRHZ+lBaOoClCfTu30T16bhQkk5m6eanIM
xRfe6frx2d6vntw6sbOjzCJ5hZSbaHCY6PFp0acz7BsxJvnf7M/rwKSy9odL
WJMruuuT3dvz/fs3L75893f/+Ptvfl5M/np/8W8Pb/+TwOXx7b/fX/7t/uJf
H07/4/Plv3+6+PdPl1weLv7j4eJvD2f/+nCO8reHN3+9P//X+7O/bk7+dnf2
r3fnf707/5fNyV/vTv9lc/rXDR+i8jfqc3f2N+5PY15IH+7wN6rcXfz1/vKf
N3Tixb/cXdL2r5s3f717Qy3/vDn98+qMy/L0L8uzn+cnf1mc/Hl+/Jf57J8X
sz99ePXlu//18HafuI+iz1TRx2mjE59Uip3tMDncMffmrGofg8iNsUMcMU95
81N6607K0+LXR9M8x85XBoUgXJ0avDRyxLWn3DoR9SIAJSz2QXzMWnWQxQOJ
lbS4s4BhrbZpg+kU3Jl2nxhd5HHiXUwq1UFLhRK4RGxK8BTrv4AIoBtOOlBJ
yOIx3CKfiiNEwHoKpzofIQ61aMThRbM9q+R8NngZbV4vj0qvrn4J+SM8Ykqa
lhMwPVWJrvCWSiQuE9EtsRg/vWVnsX+8SkQih63Ox1lOx8tKO1eBY7pbPddl
A9MqG12LHZFuzINuLb0uR4f4mFFL0KoCOtf++CDLsN4n3VJc2tOhoK7ZkEHS
k8DELOlwBya7q2klbIDjbH06vj3bJfrzPQHQ//PNT9evf7p59ZfF5M/zyU/X
Rz/fTH6eH/355ujP14c/X73mo1ev//Tx//7p+jc/z7/5ef7qp5vXP9+8+vn6
G9r+09Vvfrr65s/zVz/f0DjfUP2nj6+o/89SvP5PH775x9//bxqE+0u3f/zw
v63++me60PXhTx+p5+FPV4d/+kCDvP7T71/90wfeolD9n37/mz/9/jc//u7v
vnz71f3l3u3pLryEvtL2qolvEBXX3h6Faj5R/3I8tKfm9s5KazfrpkuHuTEC
4lModmVxDxJ2RBDpvNWnQi543Y2TcfzoNmLVweG2xcbR4KIxb8KNJ1CYKEK5
EubmqFEjNPBklp+++3TmR9FPZBY5DTOidjYPMb1AiJhJP7hF+DO75BrQGDgD
xL3RuddnYBUe67aQHQ6qE+Z/RxlHH3PTFPYUIuHMbVXsMgxeYulYNFG5UIQw
x5FsVfP7XLqXR5XSni1CX4i8opLrYVHXPZUDfkQPxeOPkKKy2Cf6MGQikLlu
FmbvkAQheUPKOCHYTofHJMb/1GnTTE/SB0xHO5s/ZaVZD4bxHjQsaoh+AweQ
R87RKD1CfGxwHPV0Elht1Lc5fIDntVQCQnAAH3KtucyxS6ubtc3jbQ5V5mcJ
Eewd6qumE+GLoa0/nb8u9ePDShZiuJlkeugawpKa4Shs1RDan2tYHn2rfkWo
uG07sC001bC5mfPoyPv3b8zTUeDJhApXhkHujrcs2yMCoLsLWfXz/uvvf/vV
H/7P1z/+w9d//D9//8Nv//7H3/39H373dz9y+V9Ufvjt13/87dc/fvfyx9++
/OG7Fz989/IHrtDuV3/43de0pfLHf/j6D7/jyvffvqCt9PnaT8dQci4dfenF
Wr7CaHzWdy9pBGqk7fffUv2r77/7+st7QsmvPr9/8ZkrX39694Kh54yfwgNZ
RKVBtCm1633a4G9X9ZKfTndJmqvTVB/5S0uCEnJ1gkuCiac6JFhJ8PHxdbUk
tj2xXOJVd7ydMn50KpkAj9AHEdhigrmnguokiU48GkVQbcCcNqaBH3pqcJdg
Obey8ClVyBro0/RasyoeS9KnJQ1bPLRE8LemMVSKks1TxdXj9JtgOANXysUO
QVlXpbFLt4pwQEkD1hmiJ+abs0ZPQldeThtsJ4wf9WYjLyYza0VrlQav/bmj
ajFVsmBvltVurt9rYhlVL9yVZn6rTbScKJmjW7WUcMplKlUklHgx9s6NOfQX
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
8V58Bf6X+xsXLmltMp6MQ873p2gXCnilTf7kX6/v/NibVGUmTGd7k0nUtYh3
4k18m7lTmZpwI8CrO0BnVp5GPrRkAJDpsUC0RTfYHDvfGvdSYLDN3tZuiJ1o
+71RyE4Movyonb+7YTE0/UcP1aTxSKKf0ceLj0kCVS+dVLeciMu4E8EgpBoi
e8nyNFrqJnkzKXLjGv2ooTB1aZux2VYwtXZap1NkWmv7b9qa4sfOFEiYTvaC
NjyqUhkY1yPCcpXh+1TWBRL9Cm4oCqeVaNdBPSFxEJDK7S0yA6DxmNbxfd5F
WAYKGsI8j8WIqsvM3tvhrJSUFSsk+FiQGUyvKGusBfPpr5ZZJI8kuBEAIcRb
aG/pdK9+Y4QB0agKxPm0Nvy5PPJpVVbWNSlpOAFKwiCeyrUy6MdstETa20v0
OaUadgTAYU07AlP3sKY9LSN6qQV8UpOW0R/c45MDvpxsBDSxUs5CUNJRINVf
B+PkNhJwsoo1aR6sfrcRApkYjZytm9rRukM0jgpqMaq8ZEEtdsT9R9yXV7L1
mvZycrx/3+WGRJ4/oO051nFxYyY4Z8gQjBrQMOF9kf8Cf9BjkEqAGmCekXX8
tTfluTd5CGpInj92tlc6Pyid7bFKP/e59RXJ/4qnHNAwTEX89+vpf+m0BFQP
RXOmvTv2156MIrYLP/eK57vFX3vM+QyBr1jVn/vGnfGIX0AQTM7Z+WXFN2Yb
ctvg+WwEKtCkRgP4Wh1EjuFjHFDPXZailqG9NElTevATsVltEd2hLKOln/wx
/ummh2cpqcj8OQEQg1xWoo09JieyFfGWjZOLOjR0J8mzXPvgOshGsoVgf/hW
tjXmiDWotkagbLVJsffYc8JKMSnrWOImwQ6lh1U2KqZy0abXViv4fLfeWBDK
NF1BxcyIzKOiWDqRJjM/d22APaYvLZ3jz1LQu3O2OXGmrSLf1sFedKaQzIq8
QHPqVe9K3idsnG2OS6aW/nbLC5GlYO1PaXHsh6z+eEwT5120o7OAwGWLMifw
Nt23KThqYu2cLf1Sq8L1MRoes0J2ysi/dqe9ACotJc8PObF9qXWVm4LmnUkv
dWnRCnJEyZM6Ku62aJF+tj19vgvklaDN7asEqaydv2Ci9K8DtF4paFO1/PdT
5qA/9rVJakPnRO1RQv9LLZyMi75rp4/3sNcmVLuU47hR7tXUf7+9x2G7U/zr
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
IP4h/515EeCD44iTTPU3/TsNqxaPL7IUJYwuCm3eACgjCTghb7ZtS2PK7sZd
kOCbw7mdV8DjUXE2Q28M9wwqrUYlCd/SjGzJuMCE6bZV1NRupcp0s1tpg5yh
NQ3DcKc8Pkfx4alMX/ihpvJUK6gSr83FT6lm/LwVd7qtPNmyrktyUej6VJOJ
t+giwhQZYEW0zhD9fd4431QmG2yuoi/5at077eWJZufJS3h5yzw8TfRPtFQn
kU/tHl5fQK97eFvWda28L94tT4Tr41fHGn2DfLhNnhHC5bx22YfRXSeayuON
a6QG+ieQqol1m2iqMucmPTavTTatTTantGu8s74FtVqPN9RXJtrWx1rL400V
XmHftI7AsSZQBRmO15cnGtYnVATqg7rFeuq+e1ZvfUK5IU99iMIZgTVE0RNM
tcYL7hvWxxtJqJVqi5qHjwKx3EZViRmGnPXIzPWl/FhUQNVYd9ONh9ZLDZj+
gttNzYiYbO0yK4m2rU9NkU0Vvsg5oLUnQrZrUy3xtyIQ1FYe1x9kf+C9yYw5
jszb1uhp2pjER9Wn/Nk4U216bNTtzK2ptuuTJv7HtYlGtE95stGeNbT5eKt+
RKg/f9Nkrf+sx07FfiU/gJJdkX2vaQPDR/3QvMsFucLs2+Bv4oFkg/LgN2Gs
yd8Wur2uk9bd080eIxomcBuqd5BDY2UaSTRYptt4efR0K2j9ji6hZg2Tpz1U
GI2A3Kbb19UC1VhQxQWp/vwcDs9QegVVuoNsOUirGu/kseDJGG6ctLSvT7a7
bSuxtoiGSlbFncyl18PV2OYP/t5Wfvik/stUe3lK0abUSkIBt8zadJMnXeU4
D4wcCR8OltWiR7oVui3k+XfDvGtDfscUByPbRDjQZ6lUv8qx0MgRMdZoWhlr
wFhAIDyr8ojC2GH8ieYVxUzdlT1z3CEYGk2BUairiFrW2HMaxRPMH+jh4NV9
33DXNDzVLZvMLcWvzEAadfk4xmljeawBVCFLwVQQY7OxMsEhic5WJR9jfEdm
I09hvDSuoRvDRR/G26nmwIR1O7l+fTPZAlu4tRzT/p3Iu/i/GIG5TTWxj021
rmDIZxkpMidTalkjo2ssa0iWJ1td6ApaBg11kUUoSYsuPW90zmuTaJPG1cnG
leA2rE42rU42Kw5pZQK/AN/VxFcTjdFtWsEvw1+AB4T/WOJ/5HCWi7+Tfl+Z
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
YdF88iHpvWQjScg2dmMSlw9gTz5cJXyoJI5ayKIySRj6lE3Jycgc6XSfv2xT
90vJuyQoKsn7vFkjZUzum/yvbbbJVyTcl19Oah+mFcTiGo8zYZm/S6PZWCkQ
yS6i+/BZYCXWKLSPoeymRXy64wt533yTx+XzXjbClwJ/ioCvwT53O/yhSexv
UlziZcqrBp4Grnl11sBLLrllks68CdZr2GKWFL1Mxi8FKOPa5ez+SnF8qE6B
HZplY4BSIKBJFw1lToxxSj34e+racJSFPagejndj19i1uAQjdrDQPppdhoCY
dbtQy2W1X9mWDHNQK+TvR+sDMX5/c2UPf12ysN3NFamxsxPvKCYyTowa8Ko2
4zQXKiNGs1AXofubMWg6u+xLSqi1TexvAe4oRQxukZGBPluVAtGN+uV7jct3
G5fvNa+AuV1bv924fKu+frO2dqdx5VZtfauyeqNGtHa3ffle58qd5tqdemG/
e/V+6wrRXuf6vcaVe8313fbVe3Jrp+hvbya2rsd2ri/1C2/0Cq9tr53bWTt3
Y/3N7fVzW2tvbK2d215988bqua38q1vrF25spG6XC3eqawed63udawe963v9
a/s9Gnn9sH+dJqIaot32lb321UFv46B9leiofW2/fmWvdnmvtr5by94teztX
4reuJW5did28Fr9b8m4XE7eLydvF1N1y+qhzedi9eti9Muhf22ut7TZWDztX
9luXD2nM5upBe32PkI7QpE1ruHyvvnqrnL9dXt0u5W9UV7fL+RulLNGtan6v
eXm3sUYl9T1oXxl0rw666wcd6ptlxOxcOehd2+9c3WvTm7l8t756u5K5tRnf
uba0vf7mzuU3b6yfu7F2nmhn9c1b6xe5vHLx7sbKAUl7QrdG7l67sNe+TIRB
7jXW7jfX77bWb1cLN0v5nY3U1rVLW6vnO+nXmqnPE7X8z9eTLxE1vc8R306/
0sl8oZ3+fDP9csN/uZH9XD3zciX1Yt37bJNa+p+Tmlc6a6/3rpzvXY+1r8S2
NxK9yxe7V5a2r8c6ly91mZb66xe382/0sq910l+srLy4ufTp4sXnNy88R1Rc
+vTG8gvXlp+/tvTc9YvP1VNf2Fpbvrnh3yiubm0UtjfyO5uFG8XC1vXsTjlz
p5K7W8zcpbe36d+8nuitXuivXWjn3+jkX+8WXu/mvtjOvUo1vdXz2/RO1s5t
FV6nd3JjfWlnbfnGlcSN9Rj9mlurF7cKF+ipt9cv9tcvEG3TglffpHG6mVf7
udf7uTe2C29Sx638uV7+XL/wJhEx3Rw/wlb+jS1p2fJeKV564fr5T18998K1
cy9cfePT1958/tqFZzaXn99cev76pWc3lp4rLn+6fOnF0sXPFC+8sHn+08Rc
P//c5XNPXbvwbHH5BXp2ehWllc8QT6+FqB5/qbzymdLyp0tLz1dXPlNeeaEc
+0xl6bONxMsd/5UW/UD8M73SzH6hmflCK/saPSm/BHkKevD++vkb15ZvXl+h
v9J7lfS9kn9vM7Vb9O9u+neL/r0y/fF4d8rpWyWizE36N9lI3bq6cuvK0q0r
l+5cX751len21fjtq7G7G8t3ri7durayfW3lxmbqjphH7m7G7hQTd0pJGvx+
xbtH6Fb179FlOUXl/UrqLqHbRpK+YO+xFCLhkAQhavfeRpLXQ5/ZJH/kc5e/
luWjFx/A9HF7//qKzaaCpDHJ3Y0VIqq5f315d4PKFWoGMNq1fXUE4KAC4p5E
FyMwGGHD98qJ+wS+TMIQElWS90rxe7LTxO5ttE7z8hMcLvfleRnE6fHpJZTM
0xmfCHtJDNZEPCDAHUjUyE4W++UfhwZxr0jvOXa3FAfR8likF0OSPEp8ULVx
+ssaYoADKsHsWcThmk1GDfqB+LNKwIhRphgS+Lv4BS2+yCBm8QZfioaXtQks
Fs2lceIE48T2nuTuuUc/pQlCCOAs4tPhL70qf2LtlhLGOleMWucIfT73/IXP
v3DpxRdWXnph+aUXV178zPLnXoq/9HL8pRdjX3gp9earmXTs8uZ6sVGsNMr1
+mZ9Y61Y8K8uX8ycfz3x5quJ11+Nn3stcf7N1Bvn/Itf9JZeTy6di69ciCUu
XEyceyO7dL5xJbXf3RzfaI1vtqd3+kqTW73p7f7kdo/48e3+4GZ3eLt/u1XO
x5Mrb/orb2bi5/3Y+ZS3lEtdyvrLeWKSl7LxC378UjqxnE3F8v5KPh9fK+av
djaK2+VKr1TpFq9tFUny1w96td12+V7j6tZmmnBzt3190C+1r6Rzly74l1b8
pZVczEsvJzPLyfRyPBPLeEte6mLMuxTLxuL5RCKb8POpzNX8aq9avdtp7m13
drcae0ydW+1mbePq1Uw2n/DTsZS3kvRX/OSKl1pOpFcS/lLcX06kLiUvnY/H
L6yklhKx87H4ufPFXOpW4/r9bnGvV9rrlvbaxf1eabBVHfarg35lv18k2utt
NtdS+fPn1mLJfNz3aPBY2lvJ+bE1f2W14F1bTa4VktlKYbVaSHc21g922icH
dx4Od9+eHHxpevjl46N356N3jofEfGk6eGty8Hi0/9b48EvT4ZdnQyrfnU++
fDp552Ty5ePJ29PR/GB/u1mrX7+2U23crFZv1qs3O80bzU6XLnvbt7r9m83W
vXbrYJt+l+2zwe67D06++vZb33zn7W+/9w7TO2+9/+7bH3793e999b3vfOWr
Xz093e21upuXW9c3m9fKzevV4toG/dlcyW9ez129ml1b9XKrqezqyiX6FfZ7
5dHN9nCnNbm1Nb29Pb21PbnRn97YGu/0Jjep3Bpu9agcbXdH253BVuOgWzvs
1YmOtlqHveaAyhut4e3O0a0OMVSObm8N6e/nRmd0oz2+yX9pI2pwo0V/Xcf3
to/v3pje6szv9B/s33rr6P6XxgdfO5v8q/e/+v33Hn//q1/6nV//4N/+6Id/
8Fs//vN/97t/+ts//aOf/dbPfvDBb37v/Z9873v/5oMPfvrBh2B+8sH3f+sH
H/7mhx/88Fd++YNvfv27X/vq99/56ofvvfcbv/ytH7//7d/8zi//+Lu/9Bvf
/sYH733pu+88/OBrj7/11uwbp6N35wdvj+8+3N95uHeTZj+9f/Ns99bJ7q3p
ne3Bzc7Bre7hjeZBtzLsVw57m9V8bDPvF1dzpdV8OV+orV6pFdYa65erq2ul
Av3XrZfX1jdzhWvpROda+nZp9db17M3rmZ3r/vY1b/uaf6e8eq+ydofqN3M3
N7I3in73Wry+Gmuse/WrqfqVZPtaul/MdEvpTtHvlXLdYr6zSWWhv5Hbupbb
uuLdvO5tX01uXyHEX9lZvbSVv7C9emlnbam3drGzdnHnSuLuZurmteTdYvpu
0bu1mbpxPU1Td9eXO/QhlH+dPmxa3hda3qsN74t1j3D21Ub6lQZ97Xifr6de
qSW/UE99seG/2kq/0fCoMdFrrcxrde+VFn0S5F5r5l9vrb7RXj3XWT3XW32T
qLt2/ua1xJ3r3i0C3KJ/5zqBsn9nI3mblrFJEBy7XV65U47d2Fi5WxQL0vWl
O1cv3bp26fa1lTtXl+9cS966Qri8dPPKpZuXL928tnxrI35rM0lQfpvG4aF8
akOAe2dz5R5h9MbKPRpqY5no3ubyneuX6JP+3kb87vUYKb/3rsfubMSo5Z1N
gvgENaa7d0rx24zscaJb15O3rqdvk8Chb4PNxO1Skmlz5W45fru4couabdIL
TLgITnSXGEKWEtvE+FbRY+PYBk0Ro0FubiTvXE/dZfRnur+Zuk8j02IIVkq0
bBo/ea/oUQNpQ98JQptxa1IjZEzQ+PSu6AvkLj3mRkymXiYgu3OdGiTuXqdn
TMhLSNBovEh6ZG7DGg2+E+jThfryIjdBMh3NS5/0xeQdVszp0yUF2i15u+Dp
A4ZLeIiSiua78mPdF/R5+pnEp56KPf1c6hPP+L/4rP/xZ7yPP5X8+FOpTz6f
+cSzaap5+oXc85/NP/9y7vmXCs98Ov3JZ1KfejZNzT72jPeJZzMfe5rapJ96
lhpnnno6/dSnVp595vwLz7/24nMvXXrt3I168+3J6CunJ+89ePTOgwfvPHz0
lcdvEb376DERMV97/NZ7Dx5/+ezBo/nZ4/lZu9p69lOvPPWpi08/633iqdQv
Ppv92FM8y9OfWf3kc7lPPZ//5HOZTz6XJvrEs95Tn84895n8i59d/8yLmec/
HXv5peU3X73Y3Cx++eTkrdn84ez4wXQ6uHdvOhicjUYPR8PM8vKzH3vmuU++
/MzTrz/33IVf/NS5Tzx14VNPX3r62ZVPPHXxmedjH3/qAtGnnl3+1CcvPv9C
8jOfTb7yxfTS0hXfr2SzFd/buHC+8PLnEs8+f+ETzxBdopafePrSU8+ufPKZ
2C8+tfwvfvHc//EvX/9nH3vtF/7FF3/hX7z+v/3zz//v//K1X/hnn//kx166
lrt8ePPWg/H4wWTyYHp8Njl+ND95fHr61oOHbz88+dLD47cfjA/v3/zci1/4
+D9/6eMff/OTTyeeeT7zzPPZp5/LPPfpwosvX371jdIbb5RefaWwnild9vPz
0fD9b/7Sr37nez/8/odU/uC7H/zgex/82oc/+OGHP/i1D36ViJhf/e4HH/zK
d+nWh+9/71e/832i732H2vzwA7r69nd/8OGvz6ePi9e3G9X97f7saPiVvcE7
rfaw2Tqq1vf29x/OZ+88fvjV+fStd9/+2lff+eb73/7eb/74Z3/y+3/yR//+
j/7w9/7gT3//j3/yG7/5e7/9b3/3p7/zy1//ldPxg/s7u9v17fZmq3q1Wbrc
uFaoXC5Us95GOrWRil259GaOvlVi51YOdm4+HI0ejaaPxkSzx+PjU2Kmx48m
x6eD0dlk9mByPDs8OhtPqZwfjagc7w2mB4afHx3NDg+nh4dnk+npeHIyHp9N
JsQcHw35cjg6pd96Nn10zH8Aj+klz+dffnD2lUcP33v86Jvvvvv+N775ww8+
+OZ77/3ZH/7B//unf/qzH/34H37+8//5j//4v/7H//of//1//uN/+//+8R/+
+9//zd/93V//7d/9NZV/97f/8W9//lc//5u//Jv/9Bf/6e//+r/8/C//8//z
R3/+53/4f//V//Uf/uTf/9nP/+o//+Pf/7f/+vP/QvSP//D3//XnP//bv/qP
f/MXf/G3f/Uf/vxP/uQv//jPfv93fvePf+/3/t2Pf/J//puf/t5Pf/tn//pH
P/vRj37y67/+Gx9++OH773/nl37pO9/6pfe//q1vvP324+k4dXFl5YK/cqmQ
jF1NLF9JLl9buXQ1uXI1vrSeXLrmrRBdXbqwfuH1+PD+7lcfPfzm24+/8ujs
vcdn33iH/qdO3310QuU3Hj/6xluPv/nW42+9fTq81b3q+Vn6vFpKJpZTyUup
2Pll+ji8dG7lzVcvXXht5c0vLl18fSVxbin15qXtcnF2d3t8e3t27/b8/p3x
ja3pzZ3ZnRuTW9uHN7qHNzv3OtXRre56fMm/tEyUWVqhf4zWxtXW5vp7Z9MP
vv7uh9/6yq9/+xv/+jvf/tF3v/2Db37tg6995We/9v3f+eGHP/vB93/6g+/+
5IPv/NaH3/3hL3/9e199h269/+5bX394TN9Lb433Hx7dO93bIjq+35/caQ9v
1Ac79b2t6l6/WCssd6+kWlf8+uVMdT1XW883rubaVwvNq4X61Uztil9Z94u5
ZLWQ7F9J7FxN7FyO99ZjrcJSM3+xnltq5JfquUv13IVa9nw1faGevVTNXmwU
Yv2r6e3r2a0rfi+/tJW/SApyJ/tqr/BaO0+g+Uo788Va4uXSyovFpc9eX3px
c/mzxUsvFldeKq68vLnyUoVg1Hu9v3bxxtXYzVKK1Pk75eytTZ9w53Yxc7Pk
7Wwmd4rJG+XUTilJ/I2N+I3rS9uXz++snycQ3Lr8/zdtFm5trN3a33vXlRZ3
lxbXhEBIggV3d3eXuE2MENw9JDilSt0FK1Dcrbb3+57zb3xr4P3OOVfv67lW
hskkeeaZ9bvvSeqWG47LDXMFFUS6F0a4FUW5AzELI9yL0BsgxNJYQnEMoSCG
kBdLzI8hAcsKo70Loj3BGxTG+BXGkotivYuBvPHeRdFekJcLI/El0YSSaCII
gnApJOhoYCiKDxDUJdGepSBgZZwn0LAwxgMYWnK6J6CnCCJzjE8JeihvlJsx
vqXRviUxKMUAduUxPigHY9FkDRG4NBpYDBAkl8QC0XxApXHgQ1CdgQ/+Cjol
oDcK9LgztvqWo/SBrITmaDgsepw4lD76pr76QBwTXz1ACUDEPNDkTogBWgTo
mwcaWgQZ3AnWvxOsax6oYRiobRyoaxJkaBGqbxGibx5icCdc3yJSzzxS3yIc
Hmrpk/UMiMbGWKu7Lv7e/tTiskahuFEoqBeI6kW1UpG4TiCu44vqT0eQFBFK
EYGUK4DtYp5QwEaiwpJ1tRxMTXzM7gQYW4boW4XrmofrWUQY3ImC8fS14IVO
ZRGuZRykZx5mYBGmbx6kZeSja4i3tXbLSckUQ19isBA6i0eHpsRmURh8BkfC
4XviiAY6d0yNXYBuBiZEXVNPHVNvHSNPLROCtglRB33oqWPmDdI39TEw89Ux
8dYw8FbV9VHX99XQ89Iy8NLUJ6nqEtUNvLVN/XRNA3RM/HVN/fXMAjUMfNUN
vG5r429qu13TwF5Rd72q6nxVxf6mOua6ioOxoUt+ehGjjCJg8uAz8tkChCXg
s7l8DiISiCViiZDHkwiQuJgEpdsWt9QwyjokJW0fFcNAZcMgFaMQVeMgTfNw
XctoPYtYY7MIsk+KN8FXKpEoBgYHe2WAmDHF6Jh8ZHhAIZcpFDJ0HOwfhGII
6r7BYdmQog/YNDQ+NKYYHFEMDMv7FAPdstHhiY6W/uJ8TmoqM79AXFIqKSwR
l5ZLyspq83N4fF6XVDLAYNS1NssQbl1rY9eoYmL60YuZD7MLX77OfJh5/fzt
9OPnL56+6mrp4lARahmjspCWnVyUnVoaFZIWGZYZBn0iPMuTcNowsSEYR7KL
HbEws0DM5oFqOIiYzQXowMnisxGEyeVRWTA/Yq5AyOFxaXQeg8mh0jk0Bo/O
4tLZbAqdQ2WgDxksLo3JpTNhO8Jkg/hMjojJETJQrPOZbB7QB6DDFcBLwOqC
V5Ei/HqwOnX1DZLatsamdy9fTY6MfltaWfgy9/7Vm4Odnb9///73P//+fvzj
14/fB7uHW2ubx3tHoL3N3f2tPdDB9v7O+s7hDmzZ317b2d86AK3Mr2yvbhzt
7Kwvf/t9/P37wcHuBtBqdeHz56PdrZXFxa/vPz+///DbzPzW8uqLx9OPJqce
3ZuannrweHLq4ej4aL9M3tMj6+7p6+jpaGqBj+buTHLDRmAxsVhckhMm3gmT
4OACinfCxru4JmKwCW5uiQ7O0U72fmwqq1EkbpTUNohrW6T1bfUNfe3tnc1N
bQ3S/rb21rqGTkijNTWMsjLAma092dIuyNza3+Iu+Y6Vr7mFt8UdL3MLkokp
0cycaH6HYGzgbGPukp2YLmKifIe5FcKUwiXDRmAOeTQmC/wbj8umVAvZTGc7
rLUlyd7W18HOy4sQEh0Wmxwd19va8frZq5mPM7Nf5uc/z899mlucXVqe/wbT
dTZpx1s7uyvrW0srm4vf9lY3tpaXFz9/XP86/+z+vXfPpkHTk5OPxicejI5N
DQ9PyhWjsgFZT6eip70kIyk5PDgyICgyNC7AL8bPL97XJ87XK96bEEv2jSP7
xIL8vSPJRP/4sNAaJmWwrb6/tWmwo224p72vpXGwo13e2SHvbJe1N8vb26Cu
5SHJUXHwYXOTs3KSsotTs8vSsorT0zmVpcUZCeCfqvPTGSU5ldmpPVJhZw13
sFWiaK/rbxT11Au6pUiLgCqqLuAUpxUnh8SR8VHoa5Oj/YOSwkLTwkKTgwPi
A30TQ/zjQiDD+ieG+yeGkGP93HKifLIiSXnRPllhpMwIYnaUJzyEIi0Unx7k
lhrklh7inhnqnhMOwmVHeGTAnyI9M2PIGRE+GeHeKUHE9FDPrHC/nEj/3CgY
vbOjvJOD8clB7mnw3GBcWiD2VJgUf+f0IGw6BMn/I/QWdyAuK9A9OwSfG06A
t5Ef7Z0b6VkQ5ZUXScqN9CqI9imI9MqL8M6PIhdE+RVG+RXDPhGkvFCPrEBI
tW5ZIZBGCblhqPIiPHLD8XnhhJxQGIm5YR754cSCMFIhpMtIwtkIgsh5mjqJ
aA6N8UQhGEUAOKJxL4ZUGk0siyYBfdR1MFqGJMgveiZ+euZn9IGIEQgA0jeF
lBEIVIIGq2sWpGcWrmcaomccoAd5xxRSDxSBuqZhumaRWsbB2sZkHX1PYxMP
T0JQWnImi0qX8vi1CK+Wx6tFBLUAGp6glicA4tSeFiAAUA0ikPD4KHp40JOR
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
WRGSncUoKxbSq+tZtPrergkuW8qm8RV9w4AePpPfWNvc09zd09R1Tz7Z19KL
0IXUUsiVIkg99Aq2iCuVitrYFLG/T2xocEZ4aFYgOT7AK9oDF3jH3CktMbuO
L+EzGGIuGBKBiIWefUAPQmeAVQBqCGgs4SlN0Ntu0OuoNG41DSgDrDkVg1NN
g78Cp6A+4xGM8BBwxqZSESZTyOGcHQq17myOFE1AwCMOmrKFkjqxtLm+YUQm
r0GQV9PTXR2di3NzKwsLSzMzf//4fry/9+Po8NfJ8e7mBmhnY/1ga+dMu+vA
nc29jS3QztoG1BBwQCtziz/39vbWVta/Lp1s7/3Y3Tve2v6xs3sEz11f+fvo
YHn+y9KXj6+fPFqc/Tw+2L/w/t3cu/czb989mpx48fjxiEw2Mtiv6OuV9/QO
DfTFRqfaWZNdnONdsCmOmCRHNPgkOmFTgDv2Lkl2zokOmBRHbMpd+zgr66CK
UgYEn67m9pba+o76po6Gpq7Gls6G5r7Wjs76BnlXt6y9HRiUEJduZumjbkBW
Mgi8rO15Tdvzsgbhkjr+ihbI/YK6GxQX1V0v3rLVN8RWl7EQBpfPgJPCPZ1D
rvCUOwiLI2SCWWLB5VxVQdXWdrythtMxJIMFNbvrc/eOe7B/HJeKvHn6dub9
5/Wl1a8zCwufFgDNEAxP9oDUqyf727/297/vbh1urp/sbJ/sbP7c3/p5sL22
MLPw8R2EoG+zX5ZnPr9/8ezNsyeP741//fQBJm1yeHhqdAKWcVp8uq9nJJGU
SiBlYfHZWGKuMz7LjZjv7J5nj8t2wOU7uubbOaebW/pFRWW2NrUM9vYDa0YH
5aODinEFLPVBGCeGxp5MPakTNybE5ifGVmemM5Lii5KSK2ql/XROaxWjWVw3
MDLyVMhvolZx6mub743e21nb+n54cLi5ub68tLww/+voaG1hHt7YPblM1t4q
5HIszR01ddy1DH3UDX00jMnqBj6ahtAiwJp6qul7g5k3tfAzMvbS0bGJiYgW
83jN9dKOlsY6sQAkFcHVBKZIUC/itzXUN0uErTXCgsxcB1uShXWgjWOEr19u
eiqzuAihUCRsbiOP25gYV5CaVJyWUJCZUJYclcOh8OR9A+OK0amxyYmhoeEB
oC18cDnM24R8YHSgb6S/B1bdPcXguLx/XD4w1NPFpVb5ELyI+BAvUqyXV5Ir
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
zwj2jfcmhPj7RqYm5TOpSEt9i4gnEEDgBYHlgGXARhBgLoPDo7E4FAaMaHg5
/R4HRuAOl8pgn5KFS2GwK2icSvTGKbuKziinnI3caiAOF6VSFUAKUMU8Ixek
JKAPrCsOFQ4LaEPXlZgvFHBQJ18rqIHsAwBqljZy6ezhAdncx0+H2ztD/bLl
ucWlubn//ufv4/2D7fWNvS3IPpCGds7o85/4s769821ja3l1f2N7Y3l14fMs
NChADzRVQA801cPtbTja/ubW1vI38IQbXxc3vi4sffr4a293fWFufX5u5u3b
Zw8ffnr56tHYuLyre7R/YGigp6utbaCnR4gIPDzC7JxiHF0SgT4OmCQ7wBAW
uJNsi9In2dol2cYpwcYhztI2PC21DOa/tb4F8k5nfcOphZZ2NDR3NTQ31tS0
19V3NqFpCJiLxQXqmEBgx59XxZ1Xw13ScLuo5n5BFQf0uaiKvaCCuajiAvrj
srWTR2x5OUvAEbCobFiZHDoXfBGsTO5pFGJSWGw6h0PnJCXmXL3tdEOdoKTj
e0svSMM0wtAq2sE1pbiQn56U9+bZu7fP3818nIXxxaMX68srPw6PfgB3UPQc
wET9Pv4BpD7Y2jrY3Fz9+hXoszI3M//h/eKXL68fPf708uW7Z89g/Pj8BVBp
fEh+fxSM/RgsZiYd8SGG4dyinSEPuqS74PKw+GJHXKGda6EVpsAaRpc8S2yR
FbbAyjnb1jEe5xYbEpQRE5kbHZkTFpIZ6J8RGJQTFVMWFlESHlGemYEAg0qK
AQQDFZU1dfWDbS2KIflDueyeQjbR1zXw+e2Hr19mDra3596/2V7+CmZ++9vi
5uLC3LvXk5Ameru7miDD1IWGp15Tsb+ohjmn4X5e3R3m9pIa8ZKW13l1/DlN
z/Na3ue1SRc0Pc6rE/9Qwt7SwPr4JUL/5PPFYoFECEadhVAp7PxCSnBwmsVd
P2Vtz6sa3td1gm4ZhN3QD9azTcT5lwSHF0PSEvFb2UxpXj47OakqBf2FKisi
NCc2Omv68dP7E+OTIyNj8sGJwcGRvr5RGSyqvpGBAZCip3ekv39MJoOVBmCC
OCzr6gZDctcu6uyOpQ22wN692M69xNat1N6tzJFQ6eJZ5Ugs8Q1jEsilXr45
1VW17R3DiqF7r169XZ5fWPjyae7Tp6W5eUi1G9+WgDgA5b11iLozcCqPtjf3
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
     "], {{0, 358}, {554, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{554, 358},
   PlotRange->{{0, 554}, {0, 358}}]], "Input",ExpressionUUID->
  "61ba2be6-bc0b-4eff-a537-0a77fcb1d3ec"]
}], "Text",ExpressionUUID->"455e22b1-f96e-4014-8469-3b286e4cce58"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["IDT tubes", \
"Subsection",ExpressionUUID->"ddedb2fc-2f8d-4f74-80a2-f43cd967ba7a"],

Cell["\<\
These are the tubes in which product from IDT DNA is distributed. \
Correspondence with IDT indicated that these are sourced from Sarsdtedt, part \
72.609: https://www.sarstedt.com/en/products/laboratory/screw-cap-micro-tubes-\
reaction-tubes/screw-cap-micro-tubes/product/72.609/\
\>", "Text",ExpressionUUID->"e6bf0c34-2831-425f-9718-5850fd2a23f6"],

Cell[BoxData[{
 RowBox[{"idtData", " ", "=", " ", 
  RowBox[{"ArrayReshape", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "250", ",", " ", "7.01", ",", "  ", "200", ",", " ", "6.07", ",", "150", 
      ",", " ", "5.19", ",", "100", ",", " ", "4.26", ",", "1000", ",", " ", 
      "20.94", ",", "2000", ",", " ", "38.76", ",", "1000", ",", " ", "20.96",
       ",", "500", ",", " ", "11.64", ",", "375", ",", " ", "9.44", ",", 
      "625", ",", " ", "13.83", ",", "1250", ",", " ", "25.55", ",", "875", 
      ",", " ", "18.76"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"12", ",", "2"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"idtData", ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<vol\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], 
  "]"}]}], "Input",ExpressionUUID->"ef15c9d7-b92d-4154-a0a7-d389bdce139b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"fitIdtData", "[", "data_", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "depthFunc", ",", " ", "cylinderData", ",", " ", "vMin", ",", " ", 
      "hMin", ",", " ", "offsetCylinderData", ",", " ", "hCone", ",", " ", 
      "hCyl1", ",", " ", "hCyl2", ",", " ", "hCyl", ",", " ", "rCyl", ",", 
      " ", "conePart", ",", " ", "cylinderPart", ",", " ", "errors", ",", " ",
       "err", ",", " ", "min", ",", " ", "cylinderRules", ",", " ", "tube", 
      ",", " ", "tubeRules", ",", " ", "hOverall", ",", " ", "idtRules"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"depthFunc", "[", "part_", "]"}], " ", ":=", " ", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"expr", ",", " ", "v"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"expr", " ", "=", " ", 
          RowBox[{"depthFromVolume", "[", 
           RowBox[{"part", ",", " ", "v"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"depthFunc", "[", "part", "]"}], " ", "=", " ", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "vol", "}"}], ",", " ", 
            RowBox[{"expr", " ", "/.", " ", 
             RowBox[{"{", 
              RowBox[{"v", " ", "\[Rule]", " ", "vol"}], "}"}]}]}], 
           "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
        "figure", " ", "out", " ", "the", " ", "common", " ", "radius", " ", 
         "of", " ", "the", " ", "cylinder"}], " ", "&"}], " ", "cone"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"cylinderData", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"data", ",", " ", 
        RowBox[{"True", "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"vMin", " ", "=", " ", 
      RowBox[{"Min", " ", "@", " ", 
       RowBox[{"cylinderData", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"hMin", " ", "=", " ", 
      RowBox[{"Min", " ", "@", " ", 
       RowBox[{"cylinderData", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"offsetCylinderData", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "-", "vMin"}], ",", " ", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "-", "hMin"}]}], "}"}], " ", 
        "&"}], " ", "/@", " ", "cylinderData"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"cylinderPart", " ", "=", " ", 
      RowBox[{"cylinder", "[", 
       RowBox[{"hCyl1", ",", " ", "rCyl"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"errors", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"vol", ",", " ", "depth"}], "}"}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"depthFunc", "[", "cylinderPart", "]"}], "[", "vol", 
               "]"}], " ", "-", " ", "depth"}], ")"}], "^", "2"}]}], 
          "\[IndentingNewLine]", "]"}], " ", "@@", " ", "#"}], "&"}], " ", "/@",
        " ", "offsetCylinderData"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"err", " ", "=", " ", 
      RowBox[{
       RowBox[{"Total", "[", "errors", "]"}], " ", "//", " ", "N"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"min", ",", " ", "cylinderRules"}], "}"}], " ", "=", " ", 
      RowBox[{"NMinimize", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"err", ",", " ", 
          RowBox[{"assumptions", "[", "cylinderPart", "]"}]}], " ", "}"}], 
        ",", " ", 
        RowBox[{"{", 
         RowBox[{"hCyl1", ",", " ", "rCyl"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"test", " ", "@", " ", "cylinderRules"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "figure", " ", "out", " ", "the", " ", "height", " ", "of", " ", "the", 
       " ", "cone"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"cylinderPart", " ", "=", " ", 
      RowBox[{"cylinder", "[", 
       RowBox[{"hCyl2", ",", " ", "rCyl"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"conePart", " ", "=", " ", 
      RowBox[{"invertedCone", "[", 
       RowBox[{"hCone", ",", " ", "rCyl"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{
       RowBox[{"conicalTestTube", "[", 
        RowBox[{"cylinderPart", ",", " ", "conePart", ",", " ", 
         RowBox[{"emptyCylinder", "[", "]"}]}], "]"}], " ", "/.", " ", 
       "cylinderRules"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"test", " ", "@", " ", "tube"}], ";", "\[IndentingNewLine]", 
     RowBox[{"errors", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"vol", ",", " ", "depth"}], "}"}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"depthFunc", "[", "tube", "]"}], "[", "vol", "]"}], 
              " ", "-", " ", "depth"}], ")"}], "^", "2"}]}], 
          "\[IndentingNewLine]", "]"}], " ", "@@", " ", "#"}], "&"}], " ", "/@",
        " ", "data"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"err", " ", "=", " ", 
      RowBox[{
       RowBox[{"Total", "[", "errors", "]"}], " ", "//", " ", "N"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"min", ",", " ", "tubeRules"}], "}"}], " ", "=", " ", 
      RowBox[{"NMinimize", "[", 
       RowBox[{
        RowBox[{"{", "err", " ", "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"hCyl2", ",", " ", "hCone"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"test", " ", "@", " ", "tubeRules"}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "finally", " ", "figure", " ", "out", " ", "the", " ", "real", " ", 
       "height", " ", "of", " ", "the", " ", "cylinder"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"hOverall", " ", "=", " ", "42"}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"from", " ", "opentrons", " ", "labware"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"conicalTestTube", "[", 
         RowBox[{
          RowBox[{"cylinder", "[", 
           RowBox[{
            RowBox[{"hOverall", " ", "-", " ", "hCone"}], ",", " ", "rCyl"}], 
           "]"}], ",", " ", "conePart", ",", " ", 
          RowBox[{"emptyCylinder", "[", "]"}]}], "]"}], " ", "/.", " ", 
        "cylinderRules"}], " ", "/.", " ", "tubeRules"}]}], ";", 
     "\[IndentingNewLine]", "tube"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"fittedIdt", " ", "=", " ", 
  RowBox[{"fitIdtData", "[", "idtData", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", " ", "@", " ", "fittedIdt"}]}], 
  ";"}]}], "Input",ExpressionUUID->"e0795983-552f-487d-b98c-b389c7119e83"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Falcon Tubes", \
"Subsection",ExpressionUUID->"538021f0-7c84-4b41-88de-a1cf7115330c"],

Cell["\<\
Liquid-volume-to-liquid-depth data was gathered as it was for Eppendorf tubes.\
\>", "Text",ExpressionUUID->"a6933d0d-d5de-40fa-86b5-7828ad66bc21"],

Cell[CellGroupData[{

Cell["15mL", \
"Subsubsection",ExpressionUUID->"a9995f3c-4606-4071-ab68-f69d64dc4057"],

Cell["We have some empirical data for the 15mL Falcon tube.", \
"Text",ExpressionUUID->"9cffa962-d8f4-445c-9000-7c96089d0960"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"hBase", " ", "=", " ", "34.93"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"goodFalcon15Data", " ", "=", " ", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1000", ",", " ", "19.78"}], "}"}], ","}], "*)"}], " ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2000", ",", " ", "28.02"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"3000", ",", " ", "hBase"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"500", ",", " ", "15.19"}], "}"}], ",", " ", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1000", ",", " ", "19.99"}], "}"}], ","}], "*)"}], " ", 
        RowBox[{"{", 
         RowBox[{"50", ",", "5.13"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"100", ",", "7.26"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"200", ",", " ", "10.01"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"150", ",", " ", "9.00"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"300", ",", " ", "12.11"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"600", ",", " ", "16.49"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"1200", ",", " ", "22.40"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"1800", ",", " ", "26.60"}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"400", ",", " ", "14.03"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"500", ",", " ", "14.97"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"700", ",", " ", "17.78"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"800", ",", " ", "18.57"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"900", ",", " ", "19.40"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"1500", ",", " ", "24.12"}], "}"}]}], "\[IndentingNewLine]", 
       "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"okFalcon15Data", " ", "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"100", ",", " ", "6.96"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"150", ",", " ", "8.79"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"300", ",", " ", "11.75"}], "}"}], ",", " ", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"450", ",", " ", "14.32"}], "}"}], ","}], "*)"}], " ", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"600", ",", " ", "15.89"}], "}"}], ","}], "*)"}], " ", 
        RowBox[{"{", 
         RowBox[{"750", ",", " ", "18.04"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"900", ",", " ", "19.48"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"1050", ",", " ", "20.95"}], "}"}]}], 
       RowBox[{"(*", 
        RowBox[{",", " ", 
         RowBox[{"{", 
          RowBox[{"1200", ",", " ", "20.51"}], "}"}]}], "*)"}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"upperFalcon15Data", " ", "=", " ", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"4000", ",", " ", 
          RowBox[{"hBase", " ", "+", " ", "7.23"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"6000", ",", " ", 
          RowBox[{"hBase", " ", "+", "20.60"}]}], "}"}], " ", ",", " ", 
        RowBox[{"{", 
         RowBox[{"12000", ",", " ", 
          RowBox[{"hBase", " ", "+", " ", "57.66"}]}], "}"}]}], 
       "\[IndentingNewLine]", "}"}]}]}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"goodFalcon15Data", ",", " ", "okFalcon15Data"}], "}"}], ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<vol\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "goodFalcon15Data", ",", " ", "okFalcon15Data", ",", " ", 
     "upperFalcon15Data"}], "}"}], ",", " ", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", " ", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<vol\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", " ", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"falcon15Data", " ", "=", " ", 
  RowBox[{"Union", "[", 
   RowBox[{
   "goodFalcon15Data", " ", "~", "Join", "~", " ", "okFalcon15Data", " ", "~",
     "Join", "~", " ", "upperFalcon15Data"}], 
   "]"}]}]}], "Input",ExpressionUUID->"459936ce-da21-4400-a130-ac179bbf79ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell["50mL", \
"Subsubsection",ExpressionUUID->"54e5a782-c6ee-4ce4-a9a6-9b7eedfe4f5e"],

Cell[TextData[ButtonBox["https://ecatalog.corning.com/life-sciences/b2c/US/en/\
Liquid-Handling/Tubes%2 C-Liquid-Handling/Centrifuge-Tubes/Falcon\
\[RegisteredTrademark]-Conical-Centrifuge-Tubes/p/352070",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://ecatalog.corning.com/life-sciences/b2c/US/en/Liquid-Handling/\
Tubes%2C-Liquid-Handling/Centrifuge-Tubes/Falcon\[CapitalAHat]\
\[RegisteredTrademark]-Conical-Centrifuge-Tubes/p/352070"], None},
 ButtonNote->
  "https://ecatalog.corning.com/life-sciences/b2c/US/en/Liquid-Handling/Tubes%\
2C-Liquid-Handling/Centrifuge-Tubes/Falcon\[CapitalAHat]\[RegisteredTrademark]\
-Conical-Centrifuge-Tubes/p/352070"]], \
"Text",ExpressionUUID->"b37f6f53-366c-47b2-b181-e5f65f20a84e"],

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"falcon50Data", "  ", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"100", ",", "2.08`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"200", ",", "2.97`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"300", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"400", ",", "4.68`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"500", ",", "5.25`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"500", ",", "5.12`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1000", ",", "7.22`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1000", ",", "7.51`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1500", ",", "9.24`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2000", ",", "10.11`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2000", ",", "10.06`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2500", ",", "11.78`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3000", ",", "12.36`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3000", ",", "12.37`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3000", ",", "12.15`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3500", ",", "14.73`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4000", ",", "15.1`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4000", ",", "15.37`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4000", ",", "15.07`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4500", ",", "16.63`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5000", ",", "17.17`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5000", ",", "17.49`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5000", ",", "17.19`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"10000", ",", "26.96333333`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"15000", ",", "36.33333333`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"20000", ",", "45.23333333`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"25000", ",", "54.35333333`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"30000", ",", "63.28333333`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"40000", ",", "80.41333333`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"50000", ",", "97.05333333`"}], "}"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"cellPrint", " ", "@", " ", 
     RowBox[{"ListPlot", "[", 
      RowBox[{"falcon50Data", ",", " ", 
       RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", " ", 
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<vol\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", 
       " ", 
       RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
       RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"cellPrint", " ", "@", " ", 
     RowBox[{"ListPlot", "[", 
      RowBox[{"falcon50Data", ",", " ", 
       RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", " ", 
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<vol\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", 
       " ", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "3600"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "16"}], "}"}]}], "}"}]}], ",", " ", 
       RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], "]"}]}], ";"}]}], 
  "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"bfcc618b-8eb8-4356-b5b3-22fbf89d5b62"],

Cell[TextData[{
 "Old, no longer true: Unfortunately, this data appears, somehow, to be off; \
we can\[CloseCurlyQuote]t figure out how to fit it reasonably and have \
anything anywhere close to the apex angle of the cone that we know we need. \
Update: the issue is that in our world, the \[OpenCurlyQuote]apex angle\
\[CloseCurlyQuote] is the ",
 StyleBox["half ",
  FontSlant->"Italic"],
 "angle, not the whole angle. So if the spec says the whole angle is 70 deg, \
we should be working with 35 degrees. Fixed below..."
}], "Text",ExpressionUUID->"42769d7d-acd3-4532-9b1e-73c45419b2f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Analysis", \
"Subsubsection",ExpressionUUID->"3b1db3cf-a556-46a0-9bd0-cdf10b8056e3"],

Cell["\<\
We currently model the Falcon tube with an empty cylinder for the cap. We \
might want to try our inverted spherical cap, but for now, at least, that \
doesn\[CloseCurlyQuote]t seem worth the effort.\
\>", "Text",ExpressionUUID->"eb516165-c418-480b-be95-8abe915cf1ab"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{
   "fitFalconData", ",", " ", "fitFalcon15Data", ",", " ", 
    "fitFalcon50Data"}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fitFalcon15Data", "[", "data_", "]"}], " ", ":=", " ", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "coneAssumpts", ",", " ", "fassumpts", ",", " ", "hCone", ",", " ", 
       "rmid", ",", " ", "hCyl", ",", " ", "hTot"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"coneAssumpts", " ", "=", " ", 
       RowBox[{"hCone", " ", ">", " ", "15"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"fassumpts", " ", "=", " ", 
       RowBox[{
        RowBox[{"hCone", " ", ">", " ", "18"}], " ", "&&", " ", 
        RowBox[{"hCone", " ", "<", " ", "24.5"}], " ", "&&", " ", 
        RowBox[{"rmid", " ", ">", " ", "6"}], " ", "&&", " ", 
        RowBox[{"hCyl", " ", ">", " ", "75"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"fitFalconData", "[", 
       RowBox[{
       "data", ",", " ", "True", ",", " ", "1000", ",", " ", "1200", ",", " ",
         "fassumpts", ",", " ", "coneAssumpts", ",", 
        RowBox[{"{", 
         RowBox[{"hTot", " ", "\[Rule]", " ", 
          RowBox[{"119.46", " ", "-", " ", "1.39"}]}], "}"}]}], " ", 
       "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"fitFalcon50Data", "[", "data_", "]"}], " ", ":=", " ", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"bottom", " ", "=", " ", "1.88"}], ",", "coneAssumpts", ",", 
        " ", "fassumpts", ",", " ", "hCone", ",", " ", "rmid", ",", " ", 
        "hCyl", ",", " ", "hTot", ",", " ", "\[Alpha]Cone", ",", " ", 
        RowBox[{"a", " ", "=", " ", "114.55"}], ",", " ", 
        RowBox[{"b", " ", "=", " ", "29.72"}], ",", " ", 
        RowBox[{"c", " ", "=", " ", "27.94"}], ",", " ", 
        RowBox[{"d", "=", "16"}], ",", " ", 
        RowBox[{"minWall", "=", " ", "0.97"}], ",", " ", "wallSlop", ",", 
        "  ", "hConeNominal", ",", " ", 
        RowBox[{"hConeSlop", " ", "=", " ", "1"}], ",", " ", "hCylNominal", 
        ",", " ", 
        RowBox[{"hCylSlop", " ", "=", " ", "2"}], ",", " ", "rmidNominal", 
        ",", " ", "rmidSlop"}], " ", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"wallSlop", " ", "=", " ", 
        RowBox[{"minWall", " ", "*", " ", "2"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"hConeNominal", " ", "=", " ", 
        RowBox[{"d", " ", "-", " ", "bottom"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"hCylNominal", " ", "=", " ", 
        RowBox[{"a", " ", "-", " ", "d"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"rmidNominal", " ", "=", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"c", " ", "-", " ", 
           RowBox[{"2", " ", "wallSlop"}]}], ")"}], " ", "/", " ", "2"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"rmidSlop", " ", "=", " ", 
        RowBox[{"minWall", " ", "*", " ", "1.2"}]}], ";", " ", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"1.2", ".", " ", "here"}], " ", "is", " ", "very", " ", 
         RowBox[{"sensitive", ":", " ", 
          RowBox[{"indicative", " ", "of", " ", "an", " ", "issue"}]}]}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"coneAssumpts", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"hConeNominal", " ", "-", " ", "hConeSlop"}], " ", "<", " ",
           "hCone", " ", "<", " ", 
          RowBox[{"hConeNominal", " ", "+", " ", "hConeSlop"}]}], " ", "&&", 
         " ", 
         RowBox[{
          RowBox[{"rmidNominal", " ", "-", " ", "rmidSlop"}], " ", "<", " ", 
          "rmid", " ", "<", " ", 
          RowBox[{"rmidNominal", " ", "+", " ", "rmidSlop"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"fassumpts", " ", "=", " ", 
        RowBox[{"coneAssumpts", " ", "&&", " ", 
         RowBox[{
          RowBox[{"hCylNominal", " ", "-", " ", "hCylSlop"}], " ", "<", " ", 
          "hCyl", " ", "<", " ", 
          RowBox[{"hCylNominal", " ", "+", " ", "hCylSlop"}]}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"test", " ", "@", " ", "coneAssumpts"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"test", " ", "@", " ", "fassumpts"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"fitFalconData", "[", 
        RowBox[{
        "data", ",", " ", "False", ",", " ", "3100", ",", " ", "3500", ",", 
         " ", "fassumpts", ",", " ", "coneAssumpts", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"hTot", " ", "\[Rule]", 
            RowBox[{"a", " ", "-", " ", "bottom"}]}], ",", " ", 
           RowBox[{"\[Alpha]Cone", " ", "\[Rule]", " ", 
            RowBox[{"toRadian", "[", 
             RowBox[{"70", "/", "2"}], "]"}]}]}], "}"}]}], " ", "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fitFalconData", "[", 
   RowBox[{
   "data_", ",", " ", "useCartesianCone_", ",", " ", "coneThreshold_", ",", 
    " ", "cylThreshold_", ",", " ", "fassumpts_", ",", " ", "coneAssumpts_", 
    ",", " ", "constants_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Block", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "threshold", ",", " ", "conicalData", ",", "cylinderData", ",", " ", 
      "conePart", ",", "genericDepth", ",", " ", "hCone", ",", " ", "rmid", 
      ",", " ", "rbottom", ",", " ", "errors", ",", " ", "err", ",", " ", 
      "min", ",", " ", "coneRules", ",", " ", "angledCone", ",", " ", 
      "cylinderPart", ",", " ", "hCyl", ",", " ", "rtop", ",", " ", 
      "cylinderRules", ",", " ", "angledCylinder", ",", " ", 
      "\[CapitalDelta]vol", ",", " ", "\[CapitalDelta]h", ",", " ", "vMin", 
      ",", " ", "hMin", ",", " ", "offsetCylinderData", ",", " ", "falcon", 
      ",", " ", "\[Alpha]", ",", " ", "falconRules", ",", " ", "first", ",", 
      " ", "second", ",", " ", "hTot", ",", " ", "\[Alpha]Cone"}], "}"}], ",",
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"genericDepth", "[", "part_", "]"}], " ", ":=", " ", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"expr", ",", " ", "v"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"expr", " ", "=", " ", 
          RowBox[{"depthFromVolume", "[", 
           RowBox[{"part", ",", " ", "v"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"genericDepth", "[", "part", "]"}], " ", "=", " ", 
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "vol", "}"}], ",", " ", 
            RowBox[{"expr", " ", "/.", " ", 
             RowBox[{"{", 
              RowBox[{"v", " ", "\[Rule]", " ", "vol"}], "}"}]}]}], 
           "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"first", ",", " ", 
       RowBox[{"fit", " ", "the", " ", 
        RowBox[{"cone", ".", " ", "this"}], " ", "gives", " ", "us", " ", 
        "the", " ", "apex", " ", "angle", " ", "and", " ", "rbottom", " ", 
        "and", " ", "rmid"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"conicalData", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"data", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], " ", "\[LessEqual]", " ", 
          "coneThreshold"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
      "useCartesianCone", "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"conePart", " ", "=", " ", 
         RowBox[{"invertedFrustum", "[", 
          RowBox[{"hCone", ",", " ", "rmid", ",", " ", "rbottom"}], "]"}]}], 
        ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"conePart", " ", "=", " ", 
         RowBox[{"invertedFrustum", "[", 
          RowBox[{
          "hCone", ",", " ", "rmid", ",", " ", "\[Alpha]Cone", ",", " ", 
           "\"\<apexangle\>\""}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"conePart", " ", "=", " ", 
      RowBox[{"conePart", " ", "/.", " ", "constants"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"errors", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"vol", ",", " ", "depth"}], "}"}], ",", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"genericDepth", "[", "conePart", "]"}], "[", "vol", 
               "]"}], " ", "-", " ", "depth"}], ")"}], "^", "2"}]}], "]"}], 
         " ", "@@", " ", "#"}], "&"}], " ", "/@", " ", "conicalData"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"err", " ", "=", " ", 
      RowBox[{
       RowBox[{"Total", "[", "errors", "]"}], " ", "//", " ", "N"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"min", ",", " ", "coneRules"}], "}"}], " ", "=", " ", 
      RowBox[{"NMinimize", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"err", ",", " ", 
          RowBox[{
           RowBox[{"assumptions", "[", "conePart", "]"}], " ", "&&", " ", 
           "coneAssumpts"}]}], "}"}], ",", " ", 
        RowBox[{"variables", "[", "conePart", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"angledCone", " ", "=", " ", 
      RowBox[{"toApexAngled", "[", 
       RowBox[{"conePart", " ", "/.", " ", "coneRules"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"coneRules", " ", "=", " ", 
      RowBox[{"coneRules", " ", "~", "Join", "~", " ", 
       RowBox[{"{", 
        RowBox[{"rbottom", " ", "\[Rule]", " ", 
         RowBox[{"rsmall", "[", "angledCone", "]"}]}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"now", " ", "for", " ", "the", " ", 
       RowBox[{"cylinder", ".", " ", "this"}], " ", "gives", " ", "us", " ", 
       "the", " ", "apex", " ", "angle", " ", "of", " ", "the", " ", 
       "cylinder"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"cylinderData", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{"data", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], " ", "\[GreaterEqual]", " ", 
          "cylThreshold"}], "&"}]}], "]"}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "hard", " ", "to", " ", "tell", " ", "for", " ", "in", " ", "between", 
        " ", "data"}], ",", " ", 
       RowBox[{"so", " ", 
        RowBox[{"we", "'"}], "re", " ", "conservative"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"vMin", " ", "=", " ", 
      RowBox[{"Min", " ", "@", " ", 
       RowBox[{"cylinderData", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"hMin", " ", "=", " ", 
      RowBox[{"Min", " ", "@", " ", 
       RowBox[{"cylinderData", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"offsetCylinderData", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "-", "vMin"}], ",", " ", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "-", "hMin"}]}], "}"}], " ", 
        "&"}], " ", "/@", " ", "cylinderData"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"cylinderPart", " ", "=", " ", 
      RowBox[{
       RowBox[{"invertedFrustum", "[", 
        RowBox[{"hCyl", ",", " ", "rtop", ",", " ", "rmid"}], "]"}], " ", "/.",
        " ", "coneRules"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"errors", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"vol", ",", " ", "depth"}], "}"}], ",", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"genericDepth", "[", "cylinderPart", "]"}], "[", "vol",
                "]"}], " ", "-", " ", "depth"}], ")"}], "^", "2"}]}], "]"}], 
         " ", "@@", " ", "#"}], "&"}], " ", "/@", " ", 
       "offsetCylinderData"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"err", " ", "=", " ", 
      RowBox[{
       RowBox[{"Total", "[", "errors", "]"}], " ", "//", " ", "N"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"min", ",", " ", "cylinderRules"}], "}"}], " ", "=", " ", 
      RowBox[{"NMinimize", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"err", ",", " ", 
          RowBox[{"assumptions", "[", "cylinderPart", "]"}]}], " ", "}"}], 
        ",", " ", 
        RowBox[{"{", 
         RowBox[{"hCyl", ",", " ", "rtop"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"angledCylinder", " ", "=", " ", 
      RowBox[{"toApexAngled", "[", 
       RowBox[{"cylinderPart", " ", "/.", " ", "cylinderRules"}], "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"falcon", " ", "=", " ", 
      RowBox[{"conicalTestTube", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"invertedFrustum", "[", 
           RowBox[{"hCyl", ",", " ", 
            RowBox[{
             RowBox[{"hCyl", " ", 
              RowBox[{"Tan", "[", "\[Alpha]", "]"}]}], " ", "+", " ", 
             "rmid"}], ",", " ", "\[Alpha]", ",", " ", "\"\<apexangle\>\""}], 
           "]"}], "/.", " ", 
          RowBox[{"{", 
           RowBox[{"\[Alpha]", " ", "\[Rule]", " ", 
            RowBox[{"apexangle", "[", "angledCylinder", "]"}]}], "}"}]}], 
         ")"}], ",", "\[IndentingNewLine]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"invertedFrustum", "[", 
           RowBox[{"hCone", ",", " ", 
            RowBox[{
             RowBox[{"hCone", " ", 
              RowBox[{"Tan", "[", "\[Alpha]", "]"}]}], " ", "+", " ", 
             "rbottom"}], ",", " ", "\[Alpha]", ",", " ", 
            "\"\<apexangle\>\""}], "]"}], " ", "/.", " ", 
          RowBox[{"{", 
           RowBox[{"\[Alpha]", " ", "\[Rule]", 
            RowBox[{"apexangle", "[", "angledCone", "]"}]}], "}"}]}], ")"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"emptyCylinder", "[", "]"}]}], "\[IndentingNewLine]", "]"}]}],
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"hTot", " ", "=", " ", 
      RowBox[{"hTot", " ", "/.", " ", "constants"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"falcon", " ", "=", " ", 
      RowBox[{"falcon", " ", "/.", "  ", 
       RowBox[{"hCyl", " ", "\[Rule]", " ", 
        RowBox[{"hTot", " ", "-", " ", "hCone"}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"falcon", " ", "=", " ", 
      RowBox[{"falcon", " ", "/.", " ", "coneRules"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"errors", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"vol", ",", " ", "depth"}], "}"}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"FullSimplify", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"genericDepth", "[", "falcon", "]"}], "[", "vol", 
                 "]"}], " ", "-", " ", "depth"}], ",", " ", "fassumpts"}], 
              "]"}], ")"}], "^", "2"}]}], "\[IndentingNewLine]", "]"}], " ", "@@",
          " ", "#"}], "&"}], " ", "/@", " ", "data"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"err", " ", "=", " ", 
      RowBox[{
       RowBox[{"Total", "[", "errors", "]"}], " ", "//", " ", "N"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"put", " ", "together", " ", "to", " ", "get", " ", "rmid"}], 
       ",", " ", "hCyl", ",", " ", 
       RowBox[{"and", " ", "hCone"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"second", "[", "]"}], " ", ":=", " ", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"rule", " ", "=", " ", 
          RowBox[{"hCyl", " ", "\[Rule]", " ", 
           RowBox[{"hTot", " ", "-", " ", "hCone"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"min", ",", " ", "falconRules"}], "}"}], " ", "=", " ", 
          RowBox[{"NMinimize", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"err", " ", "/.", " ", "rule"}], ",", " ", 
              RowBox[{"fassumpts", " ", "/.", " ", "rule"}]}], " ", "}"}], 
            ",", " ", 
            RowBox[{"{", 
             RowBox[{"hCone", ",", " ", "rmid"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Function", "[", 
           RowBox[{"f", ",", " ", 
            RowBox[{"conicalTestTube", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"toCartesian", "[", 
               RowBox[{
                RowBox[{"parts", "[", "f", "]"}], "[", "\"\<cylindrical\>\"", 
                "]"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"toCartesian", "[", 
               RowBox[{
                RowBox[{"parts", "[", "f", "]"}], "[", "\"\<conical\>\"", 
                "]"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"emptyCylinder", "[", "]"}]}], "\[IndentingNewLine]", 
             "]"}]}], "]"}], "[", 
          RowBox[{
           RowBox[{"falcon", " ", "/.", " ", "rule"}], "/.", " ", 
           "falconRules"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"second", "[", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",ExpressionUUID->"aa615510-dc12-4c6f-8411-89df124f5563"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "fittedFalcon50", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fittedFalcon50", " ", "=", " ", 
   RowBox[{"fitFalcon50Data", "[", "falcon50Data", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "fittedFalcon50"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", "[", "fittedFalcon50", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"N", "[", 
    RowBox[{"2", " ", "*", " ", 
     RowBox[{"toDeg", " ", "@", " ", 
      RowBox[{"apexangle", " ", "@", " ", 
       RowBox[{
        RowBox[{"parts", "[", "fittedFalcon50", "]"}], "[", "\"\<conical\>\"",
         "]"}]}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"fittedFalcon50", ",", " ", 
     RowBox[{"volume", "[", "fittedFalcon50", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "expr", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"expr", " ", "=", " ", 
      RowBox[{"depthFromVolume", "[", 
       RowBox[{"fittedFalcon50", ",", " ", "vol"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cellPrint", " ", "@", " ", 
      RowBox[{"Show", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Plot", "[", 
         RowBox[{"expr", ",", " ", 
          RowBox[{"{", 
           RowBox[{"vol", ",", " ", "0", ",", " ", 
            RowBox[{"volume", "[", "fittedFalcon50", "]"}]}], "}"}], ",", " ", 
          RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
          RowBox[{"AxesOrigin", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"ListPlot", "[", "falcon50Data", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"expr", " ", "=", " ", 
      RowBox[{"radiusFromDepth", "[", 
       RowBox[{"fittedFalcon50", ",", " ", "depth"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cellPrint", " ", "@", " ", 
      RowBox[{"Plot", "[", 
       RowBox[{"expr", ",", " ", 
        RowBox[{"{", 
         RowBox[{"depth", ",", " ", "0", ",", " ", 
          RowBox[{"height", "[", "fittedFalcon50", "]"}]}], "}"}], ",", " ", 
        RowBox[{"AxesOrigin", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}]}]}]}], "]"}], 
  ";"}]}], "Input",ExpressionUUID->"ae8ebccb-290b-483c-ae85-78e32434eefd"],

Cell["That\[CloseCurlyQuote]s pretty good, but clearly a little on the shy \
side.", "Text",ExpressionUUID->"8a31a02b-b05e-44c8-b013-8ec9230a6f3e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"fittedFalcon15", " ", "=", " ", 
   RowBox[{"fitFalcon15Data", "[", "falcon15Data", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"volume", "[", "fittedFalcon15", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"fittedFalcon15", ",", " ", 
     RowBox[{"volume", "[", "fittedFalcon15", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "expr", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"expr", " ", "=", " ", 
     RowBox[{"depthFromVolume", "[", 
      RowBox[{"fittedFalcon15", ",", " ", "vol"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Show", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Plot", "[", 
       RowBox[{"expr", ",", " ", 
        RowBox[{"{", 
         RowBox[{"vol", ",", " ", "0", ",", " ", 
          RowBox[{"volume", "[", "fittedFalcon15", "]"}]}], "}"}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", " ", 
        RowBox[{"AxesOrigin", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", "falcon15Data", "]"}]}], "]"}]}]}], 
  "]"}]}], "Input",ExpressionUUID->"75d52255-108d-4798-acbd-aa1ba60ba044"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pipettes and Pipette Tips", \
"Subsection",ExpressionUUID->"df46b03a-45a2-4596-b58b-627507f0eca5"],

Cell["\<\
Our modelling of pipette tips is less complete than that of tubes. We\
\[CloseCurlyQuote]ve completed the work for p50 pipettes with their (usual) \
300\[Mu]L Opentrons tips attached, but work on other models and tips remains \
incomplete.\
\>", "Text",ExpressionUUID->"d029cf90-8836-4373-bc62-f578f0a1c048"],

Cell[CellGroupData[{

Cell["p50", \
"Subsubsection",ExpressionUUID->"66309444-0725-436f-9234-3f3d0873de67"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"p50M0", " ", "=", " ", 
   RowBox[{"pipette", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"60", ",", " ", 
       RowBox[{"12.23", " ", "/", "2"}], ",", " ", 
       RowBox[{"11.34", "/", "2"}]}], "]"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"3.05", ",", " ", 
       RowBox[{"11.34", "/", "2"}], ",", " ", 
       RowBox[{"9.41", "/", "2"}]}], "]"}], ",", " ", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"what", "'"}], "s", " ", "here", " ", 
        RowBox[{"isn", "'"}], "t", " ", "actually", " ", "a", " ", "cone"}], 
       ",", " ", 
       RowBox[{"but", " ", "is", " ", "close", " ", "enough"}]}], " ", "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"cylinder", "[", 
      RowBox[{"3.32", ",", " ", 
       RowBox[{"5.11", "/", "2"}]}], 
      RowBox[{"(*", 
       RowBox[{"6.91", "/", "2"}], "*)"}], "]"}]}], "]"}]}], " ", 
  RowBox[{"(*", 
   RowBox[{"forcing", " ", "monotonicity", " ", "when", " ", "tip", " ", 
    RowBox[{"attached", ":", " ", "hack"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"plotProfile", "[", "p50M0", 
  "]"}]}], "Input",ExpressionUUID->"9fe38c6c-2890-414b-9b0a-4ffc9d41abb1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["10 \[Mu]L", \
"Subsubsection",ExpressionUUID->"825acbcd-eec7-4024-b8ae-6bcc3329ba69"],

Cell["\<\
C:\\github\\Opentrons\\opentrons\\shared-data\\labware\\definitions\\2\\\
opentrons_96_tiprack_10ul\\1.json\
\>", "Text",ExpressionUUID->"85daca9f-bbcc-4d87-b976-57eb85e2756c"],

Cell[BoxData[
 RowBox[{"opentrons$10\[Mu]l$tipM0", " ", "=", " ", 
  RowBox[{"pipetteTip", "[", 
   RowBox[{"invertedFrustum", "[", 
    RowBox[{"39.2", ",", " ", "2.5", ",", " ", "0.75"}], "]"}], 
   "]"}]}]], "Input",ExpressionUUID->"fbdef5ca-f0a8-4713-9381-6a3dffd9913b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["300 \[Mu]L", \
"Subsubsection",ExpressionUUID->"f5bbc95c-03ae-4233-af3c-5d2c25753b35"],

Cell["\<\
C:\\github\\Opentrons\\opentrons\\shared-data\\labware\\definitions\\2\\\
opentrons_96_tiprack_300ul\\1.json\
\>", "Text",ExpressionUUID->"f79fffaa-198f-4f51-a628-313f6b87a37d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"opentrons$300\[Mu]l$tipM0", " ", "=", " ", 
   RowBox[{"pipetteTip", "[", 
    RowBox[{"invertedFrustum", "[", 
     RowBox[{"59.3", ",", " ", "3", ",", " ", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"opentrons$300\[Mu]l$tipM1", " ", "=", " ", 
   RowBox[{"pipetteTip", "[", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", "flare", " ", "*)"}], " ", 
    RowBox[{
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"1.35", ",", " ", 
       RowBox[{"6.91", "/", "2"}], ",", " ", 
       RowBox[{"6.24", "/", "2"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "ribbed", " ", "*)"}], " ", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"16.07", ",", " ", 
       RowBox[{"6.24", "/", "2"}], ",", " ", 
       RowBox[{"6.11", "/", "2"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"cone", " ", "section", " ", "1"}], " ", "*)"}], " ", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
       RowBox[{
       "59.11", " ", "-", " ", "1.35", " ", "-", " ", "16.07", " ", "-", 
        "25.20"}], ",", " ", 
       RowBox[{"4.94", "/", "2"}], ",", " ", 
       RowBox[{"3.91", "/", "2"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"cone", " ", "section", " ", "2"}], " ", "*)"}], " ", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
       RowBox[{"25.20", " ", "-", " ", "17.90"}], ",", " ", 
       RowBox[{"3.91", " ", "/", "2"}], ",", " ", 
       RowBox[{"3.15", "/", "2"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"cone", " ", "section", " ", "3"}], " ", "*)"}], " ", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{
       RowBox[{"17.90", " ", "-", " ", "8.53"}], ",", " ", 
       RowBox[{"3.15", "/", " ", "2"}], ",", " ", 
       RowBox[{"2.37", " ", "/", "2"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"cone", " ", "section", " ", "4"}], " ", "*)"}], " ", 
     RowBox[{"invertedFrustum", "[", 
      RowBox[{"8.53", ",", " ", 
       RowBox[{"2.37", "/", "2"}], ",", " ", 
       RowBox[{"1.01", "/", "2"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "opentrons$300\[Mu]l$tipM1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"height", "[", "opentrons$300\[Mu]l$tipM1", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"plotProfile", "[", "opentrons$300\[Mu]l$tipM1", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"plotProfile", " ", "@", " ", 
  RowBox[{"mountTip", "[", 
   RowBox[{"p50M0", ",", " ", "opentrons$300\[Mu]l$tipM1"}], 
   "]"}]}]}], "Input",ExpressionUUID->"3bc77bfb-73d5-4148-b629-630aa0885eaa"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Collision Detection: Tips, in Tubes, Moving Laterally", \
"Section",ExpressionUUID->"ff17b704-a955-41c5-9dc9-2c3458d4c45d"],

Cell["\<\
The goal here is for a given combination of pipette, tip, and well to produce \
a closed form expression that, for any desired depth (from the bottom, aka \
\[OpenCurlyQuote]liquid depth\[CloseCurlyQuote]) gives the available radial \
clearance before contact with the side wall of the tube is made. \
\>", "Text",ExpressionUUID->"9899be27-8c70-4d7b-9da0-26eb1e86eac3"],

Cell["\<\
By a good margin, the work in this section was the hardest to develop.\
\>", "Text",ExpressionUUID->"04313165-8e34-470b-8c21-1235c5511818"],

Cell[CellGroupData[{

Cell["Utilities", \
"Subsection",ExpressionUUID->"563448e5-845b-4d94-9052-fd9ec910d2db"],

Cell[BoxData[{
 RowBox[{"Clear", "[", 
  RowBox[{
  "findLower", ",", " ", "findLowerClause", ",", " ", "findUpper", ",", " ", 
   "findUpperClause", ",", " ", "findBoundSimplify", ",", " ", "findClauses", 
   ",", " ", "findProcess"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"findBoundSimplify", "[", "clauses_", "]"}], " ", ":=", " ", 
  RowBox[{"clauses", " ", "//.", " ", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Inequality", "[", 
       RowBox[{
       "lower_", " ", ",", " ", "Less", ",", " ", "var_", " ", ",", " ", 
        "Less", ",", " ", "upper_"}], "]"}], " ", "\[RuleDelayed]", " ", 
      RowBox[{
       RowBox[{"lower", " ", "<", " ", "var"}], " ", "&&", " ", 
       RowBox[{"var", " ", "<", " ", "upper"}]}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LessEqual", " ", "\[Rule]", "  ", "Less"}], ",", " ", 
     RowBox[{"GreaterEqual", " ", "\[Rule]", " ", "Greater"}], ",", " ", 
     RowBox[{
      RowBox[{"x_", " ", ">", " ", "y_"}], " ", "\[RuleDelayed]", " ", 
      RowBox[{"y", " ", "<", " ", "x"}]}]}], "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"findClauses", "[", "clauses_List", "]"}], " ", ":=", " ", 
  "clauses"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"findClauses", "[", "clauses_And", "]"}], " ", ":=", " ", 
  RowBox[{"List", " ", "@@", " ", "clauses"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"findClauses", "[", "other_", "]"}], " ", ":=", " ", 
   RowBox[{"{", "other", "}"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"findProcess", "[", 
     RowBox[{"var_", ",", " ", "clauses_", ",", " ", "op_"}], "]"}], " ", ":=",
     " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"simplified", ",", " ", "list", ",", " ", "found"}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"simplified", " ", "=", " ", 
        RowBox[{"findBoundSimplify", "[", "clauses", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"list", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{"{", 
          RowBox[{"simplified", " ", "/.", " ", 
           RowBox[{"And", " ", "\[Rule]", " ", "List"}]}], "}"}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"found", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"op", "[", 
           RowBox[{"var", ",", " ", "#"}], "]"}], " ", "&"}], " ", "/@", " ", 
         "list"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"found", " ", "=", " ", 
        RowBox[{"Union", "[", 
         RowBox[{"Flatten", "[", "found", "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", "found"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"findLower", "[", 
   RowBox[{"var_", ",", " ", 
    RowBox[{"clauses", ":", 
     RowBox[{"(", 
      RowBox[{"_List", " ", "|", " ", "_And"}], ")"}]}]}], "]"}], " ", ":=", 
  " ", 
  RowBox[{"findProcess", "[", 
   RowBox[{"var", ",", " ", "clauses", ",", " ", "findLowerClause"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"findLower", "[", 
   RowBox[{"var_", ",", " ", "clause_"}], "]"}], " ", ":=", " ", 
  RowBox[{"findLower", "[", 
   RowBox[{"var", ",", " ", 
    RowBox[{"{", "clause", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"findUpper", "[", 
   RowBox[{"var_", ",", " ", 
    RowBox[{"clauses", ":", 
     RowBox[{"(", 
      RowBox[{"_List", " ", "|", " ", "_And"}], ")"}]}]}], "]"}], " ", ":=", 
  " ", 
  RowBox[{"findProcess", "[", 
   RowBox[{"var", ",", " ", "clauses", ",", " ", "findUpperClause"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"findUpper", "[", 
   RowBox[{"var_", ",", " ", "clause_"}], "]"}], " ", ":=", " ", 
  RowBox[{"findUpper", "[", 
   RowBox[{"var", ",", " ", 
    RowBox[{"{", "clause", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"findLowerClause", "[", 
   RowBox[{"var_", ",", " ", 
    RowBox[{"bound_", " ", "<", " ", "var_"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"{", "bound", "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"findLowerClause", "[", 
   RowBox[{"var_", ",", " ", "expr_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"printCell", "[", 
       RowBox[{"\"\<lowerFault\>\"", " ", "\[Rule]", " ", 
        RowBox[{"FullForm", "[", "expr", "]"}]}], "]"}], ";"}], "*)"}], " ", 
    RowBox[{"{", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"findUpperClause", "[", 
   RowBox[{"var_", ",", " ", 
    RowBox[{"var_", " ", "<", " ", "bound_"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"{", "bound", "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"findUpperClause", "[", 
    RowBox[{"var_", ",", " ", "expr_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", " ", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"printCell", "[", 
        RowBox[{"\"\<upperFault\>\"", " ", "\[Rule]", " ", 
         RowBox[{"FullForm", "[", "expr", "]"}]}], "]"}], ";"}], "*)"}], " ", 
     RowBox[{"{", "}"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"findLower", "[", 
    RowBox[{"z", ",", " ", 
     RowBox[{"z", " ", "<", "  ", "10"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"findUpper", "[", 
    RowBox[{"z", ",", " ", 
     RowBox[{"z", " ", "<", "  ", "10"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"findLower", "[", 
    RowBox[{"z", ",", " ", 
     RowBox[{
      RowBox[{"z", " ", ">", " ", "10"}], " ", "&&", " ", 
      RowBox[{"z", " ", "<", " ", "11"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"findUpper", "[", 
    RowBox[{"z", ",", " ", 
     RowBox[{
      RowBox[{"z", " ", ">", " ", "10"}], " ", "&&", " ", 
      RowBox[{"z", " ", "<", " ", "11"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"findLower", "[", 
    RowBox[{"z", ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"0.19409486595347666`", "<", "z"}], ",", 
       RowBox[{"z", "<", "16.674223638479965`"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"findUpper", "[", 
    RowBox[{"z", ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"0.19409486595347666`", "<", "z"}], ",", 
       RowBox[{"z", "<", "16.674223638479965`"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"findLower", "[", 
    RowBox[{"z", ",", " ", 
     RowBox[{
     "0.19409486595347666`", "<", "z", "\[LessEqual]", 
      "16.674223638479965`"}]}], " ", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", 
   RowBox[{"findUpper", "[", 
    RowBox[{"z", ",", " ", 
     RowBox[{
      RowBox[{
      "0.19409486595347666`", "<", "z", "\[LessEqual]", 
       "16.674223638479965`"}], " ", "&&", " ", 
      RowBox[{"z", " ", "<", " ", "17"}]}]}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"75c3af9d-9536-41ac-8944-bf8ec024767b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "minToPieceWise", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"minToPieceWise", "[", 
   RowBox[{"expr_", ",", " ", 
    RowBox[{"{", 
     RowBox[{"var_", ",", " ", "lower_", ",", " ", "upper_"}], "}"}]}], "]"}],
   " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Piecewise", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"expr", ",", " ", 
         RowBox[{"Simplify", "[", 
          RowBox[{
           RowBox[{"lower", " ", "\[LessEqual]", " ", "var"}], " ", "&&", " ", 
           RowBox[{"var", " ", "\[LessEqual]", " ", "upper"}]}], "]"}]}], 
        "}"}], "}"}], ",", " ", "Indeterminate"}], "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"minToPieceWise", "[", 
   RowBox[{
    RowBox[{"Min", "[", "expr_", "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"var_", ",", " ", "lower_", ",", " ", "upper_"}], "}"}]}], "]"}],
   " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Piecewise", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"expr", ",", " ", 
         RowBox[{"Simplify", "[", 
          RowBox[{
           RowBox[{"lower", " ", "\[LessEqual]", " ", "var"}], " ", "&&", " ", 
           RowBox[{"var", " ", "\[LessEqual]", " ", "upper"}]}], "]"}]}], 
        "}"}], "}"}], ",", " ", "Indeterminate"}], "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"minToPieceWise", "[", 
     RowBox[{
      RowBox[{"minExpr", ":", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"_", ",", " ", "__"}], "]"}]}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"var_", ",", " ", "lower_", ",", " ", "upper_"}], "}"}]}], 
     "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "exprs", ",", " ", "this", ",", " ", "others", ",", " ", "and", ",", 
        " ", "cond", ",", " ", "conds"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"exprs", " ", "=", " ", 
        RowBox[{"List", " ", "@@", " ", "minExpr"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"conds", "=", " ", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{"i", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"this", " ", "=", " ", 
             RowBox[{
              RowBox[{"Take", "[", 
               RowBox[{"exprs", ",", " ", 
                RowBox[{"{", "i", "}"}]}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"others", " ", "=", " ", 
             RowBox[{"Drop", "[", 
              RowBox[{"exprs", ",", " ", 
               RowBox[{"{", "i", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"and", " ", "=", " ", 
             RowBox[{
              RowBox[{"Simplify", " ", "@", " ", "And"}], " ", "@@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"this", " ", "\[LessEqual]", " ", "#"}], "&"}], "/@",
                 " ", "others"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"cond", " ", "=", " ", 
             RowBox[{"Quiet", "[", 
              RowBox[{
               RowBox[{"Reduce", "[", 
                RowBox[{
                 RowBox[{"and", " ", "&&", " ", 
                  RowBox[{"lower", " ", "\[LessEqual]", " ", "var"}], " ", "&&",
                   " ", 
                  RowBox[{"var", " ", "\[LessEqual]", " ", "upper"}]}], ",", 
                 " ", "var"}], "]"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"Reduce", "::", "ratnz"}], "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"this", ",", " ", "cond"}], "}"}]}]}], 
          "\[IndentingNewLine]", "]"}], " ", "/@", " ", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "exprs", "]"}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"PiecewiseExpand", "[", 
        RowBox[{"Piecewise", "[", 
         RowBox[{"conds", ",", " ", "Indeterminate"}], "]"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"printCell", " ", "@", " ", 
   RowBox[{"minToPieceWise", "[", 
    RowBox[{
     RowBox[{"Min", "[", 
      RowBox[{
       RowBox[{"2.38", "+", 
        RowBox[{"0.033726", " ", "depth"}]}], ",", 
       RowBox[{"0.4533", "\[VeryThinSpace]", "+", 
        RowBox[{"0.16904", " ", "depth"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "depth", ",", " ", "0.19409486595347666`", ",", " ", 
       "16.674223638479965`"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"printCell", " ", "@", " ", 
   RowBox[{"minToPieceWise", "[", 
    RowBox[{
     RowBox[{"7", " ", "+", " ", "depth"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "depth", ",", " ", "0.19409486595347666`", ",", " ", 
       "16.674223638479965`"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"printCell", " ", "@", " ", 
   RowBox[{"minToPieceWise", "[", 
    RowBox[{
     RowBox[{"Min", "[", 
      RowBox[{"7", " ", "+", " ", "depth"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "depth", ",", " ", "0.19409486595347666`", ",", " ", 
       "16.674223638479965`"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"printCell", " ", "@", " ", 
   RowBox[{"minToPieceWise", "[", 
    RowBox[{
     RowBox[{"Min", "[", 
      RowBox[{
       RowBox[{"7", " ", "+", " ", "depth"}], ",", " ", 
       RowBox[{"4", " ", "+", " ", 
        RowBox[{"2", " ", "depth"}]}], ",", " ", 
       RowBox[{"3", " ", "+", " ", 
        RowBox[{"3", "depth"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "depth", ",", " ", "0.19409486595347666`", ",", " ", 
       "16.674223638479965`"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"fe240e7b-a4f3-45a2-87ef-a6f3529ef1fc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"piecesOf", "[", "p_Piecewise", "]"}], " ", ":=", " ", 
   RowBox[{"p", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"trueOf", "[", "p_Piecewise", "]"}], " ", ":=", " ", 
   RowBox[{"p", "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"condsOf", "[", "p_Piecewise", "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"piecesOf", "[", "p", "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"exprsOf", "[", "p_Piecewise", "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"piecesOf", "[", "p", "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"7a4297cf-8fc9-4cab-a4de-8c7075b1789f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "reduces", " ", "the", " ", "conditions", " ", "in", " ", "a", " ", 
    "Piecewise"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"reducePiecewise", "[", 
     RowBox[{"piecewise_Piecewise", ",", " ", "var_"}], "]"}], " ", ":=", " ",
     "\[IndentingNewLine]", 
    RowBox[{"Piecewise", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
          RowBox[{"Quiet", "[", 
           RowBox[{
            RowBox[{"Reduce", "[", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}], ",", " ", "var", ",", " ", 
              "Reals"}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"Reduce", "::", "ratnz"}], "}"}]}], "]"}]}], "}"}], " ", 
        "&"}], "/@", 
       RowBox[{"piecesOf", "[", "piecewise", "]"}]}], ",", " ", 
      RowBox[{"trueOf", "[", "piecewise", "]"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"reducePiecewise", "[", 
     RowBox[{"other_", ",", " ", "var_"}], "]"}], " ", ":=", " ", 
    "other"}]}]}]], \
"Input",ExpressionUUID->"af52b5f7-e4f8-411f-bcf5-f87c71d1f3e9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"simplifyPiecewise", "[", 
   RowBox[{"piecewise_Piecewise", ",", " ", "var_", ",", " ", "assumpts_"}], 
   "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"simplify", ",", " ", "result"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"simplify", "[", "expr_", "]"}], " ", ":=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{"expr", ",", " ", "assumpts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"reducePiecewise", "[", 
       RowBox[{"piecewise", ",", " ", "var"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"Piecewise", "[", " ", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", " ", 
           RowBox[{
            RowBox[{"simplify", " ", "@", " ", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], " ", "}"}], "&"}], "/@", " ", 
         RowBox[{"piecesOf", "[", "result", "]"}]}], ",", " ", 
        RowBox[{"simplify", " ", "@", " ", 
         RowBox[{"trueOf", "[", "result", "]"}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"PiecewiseExpand", "[", 
       RowBox[{"result", ",", " ", "assumpts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"result", " ", "/.", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"0.", " ", "\[Rule]", " ", "0"}], ",", " ", 
         RowBox[{"1.", " ", "\[Rule]", " ", "1"}], " ", ",", " ", 
         RowBox[{
          RowBox[{"-", "1."}], " ", "\[Rule]", " ", 
          RowBox[{"-", "1"}]}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"simplify", "[", "result", "]"}]}], ";", "\[IndentingNewLine]", 
     "result"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"simplifyPiecewise", "[", 
   RowBox[{"other_", ",", " ", "var_", ",", " ", "assumpts_"}], "]"}], " ", ":=",
   " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"simplify", ",", " ", "result"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"simplify", "[", "expr_", "]"}], " ", ":=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{"expr", ",", " ", "assumpts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"simplify", "[", "other", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"PiecewiseExpand", "[", 
       RowBox[{"result", ",", " ", "assumpts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"result", " ", "/.", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"0.", " ", "\[Rule]", " ", "0"}], ",", " ", 
         RowBox[{"1.", " ", "\[Rule]", " ", "1"}], " ", ",", " ", 
         RowBox[{
          RowBox[{"-", "1."}], " ", "\[Rule]", " ", 
          RowBox[{"-", "1"}]}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"simplify", "[", "result", "]"}]}], ";", "\[IndentingNewLine]", 
     "result"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",ExpressionUUID->"e5e7ac3b-2284-4e03-898c-29a324f9e73c"],

Cell[BoxData[{
 RowBox[{"Clear", "[", 
  RowBox[{"minValue", ",", " ", "maxValue"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"maxValue", "[", 
    RowBox[{
    "expr_", ",", " ", "range_", ",", " ", "assumpts_", ",", " ", "var_", ",",
      " ", 
     RowBox[{"default_", " ", ":", " ", 
      RowBox[{"-", "Infinity"}]}]}], "]"}], " ", ":=", " ", 
   RowBox[{"PiecewiseExpand", "[", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"minValue", "[", 
       RowBox[{
        RowBox[{"-", "expr"}], ",", " ", "range", ",", " ", "assumpts", ",", 
        " ", "var", ",", " ", 
        RowBox[{"-", "default"}]}], "]"}]}], ",", " ", "assumpts"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"minValue", "[", 
   RowBox[{
   "expr_", ",", " ", "range_", ",", " ", "assumpts_", ",", " ", "var_", ",", 
    " ", 
    RowBox[{"default_", " ", ":", " ", "Infinity"}]}], "]"}], " ", ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "constraints", ",", " ", "genExpr", ",", " ", "genAssumpts", ",", " ", 
      "genRules", ",", " ", "genConstraints", ",", " ", "genRulesOrder", ",", 
      " ", "min", ",", " ", "eqn", ",", " ", "solns", ",", " ", 
      "adjustInfinities"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"adjustInfinities", "[", "e_", "]"}], " ", ":=", " ", 
      RowBox[{"e", "/.", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Infinity", " ", "|", " ", 
          RowBox[{"DirectedInfinity", "[", "1", "]"}]}], ")"}], " ", 
        "\[Rule]", " ", "default"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"constraints", " ", "=", " ", 
      RowBox[{"range", " ", "&&", " ", "assumpts"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"genExpr", ",", " ", "genConstraints"}], "}"}], ",", " ", 
        "genRules", ",", " ", "genRulesOrder"}], "}"}], " ", "=", " ", 
      RowBox[{"genericize", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"expr", ",", " ", "constraints"}], "}"}], ",", " ", 
        "InexactNumberQ"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"MinValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"genExpr", ",", " ", "genConstraints"}], "}"}], ",", " ", 
        "var"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"adjustInfinities", "[", "min", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"min", " ", "/.", " ", "genRules"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"PiecewiseExpand", "[", 
       RowBox[{"min", ",", " ", "assumpts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{"min", ",", " ", "assumpts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"adjustInfinities", "[", "min", "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"maxValue", "[", 
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
      RowBox[{
       RowBox[{"depth", "\[GreaterEqual]", "0"}], "&&", 
       RowBox[{"depth", "\[LessEqual]", "37.8"}], "&&", 
       RowBox[{"z", "\[GreaterEqual]", "depth"}], "&&", 
       RowBox[{"z", "\[LessEqual]", "37.8"}]}], ",", " ", "z", ",", " ", 
      "Indeterminate"}], "]"}], " ", "&"}], "/@", " ", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"z", ",", " ", 
       RowBox[{"z", "\[LessEqual]", "0.194095"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"z", ",", " ", 
       RowBox[{
        RowBox[{"z", "\[LessEqual]", "16.6742"}], "&&", 
        RowBox[{
         RowBox[{"8.53", "+", "depth"}], "\[GreaterEqual]", "z"}]}]}], 
      "}"}]}], "\[IndentingNewLine]", "}"}]}], " ", "//", " ", 
  "Column"}], "\[IndentingNewLine]", 
 RowBox[{"minValue", "[", 
  RowBox[{"z", ",", " ", 
   RowBox[{
    RowBox[{"z", "\[LessEqual]", "0"}], "&&", 
    RowBox[{"depth", "\[GreaterEqual]", "0"}], "&&", 
    RowBox[{"depth", "\[LessEqual]", "118.07`"}], "&&", 
    RowBox[{"z", "\[GreaterEqual]", "depth"}], "&&", 
    RowBox[{"z", "\[LessEqual]", "118.07`"}]}], ",", " ", 
   RowBox[{
    RowBox[{"depth", "\[GreaterEqual]", "0"}], "&&", 
    RowBox[{"depth", "\[LessEqual]", "118.07`"}], "&&", 
    RowBox[{"z", "\[GreaterEqual]", "depth"}], "&&", 
    RowBox[{"z", "\[LessEqual]", "118.07`"}]}], ",", " ", "z", ",", " ", 
   "Indeterminate"}], 
  "]"}]}], "Input",ExpressionUUID->"5d8567c0-1b5c-4911-bcc1-6925fb8a2ac5"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "makeExplicitConditions", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"makeExplicitConditions", "[", 
   RowBox[{"expr_Piecewise", ",", " ", "assumpts_", ",", " ", "default_"}], 
   "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "allConds", ",", " ", "findTrueCond", ",", " ", "trueCond", ",", " ", 
      "result"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"allConds", "[", 
       RowBox[{"p_Piecewise", ",", " ", "ass_"}], "]"}], " ", ":=", " ", 
      RowBox[{"Simplify", "[", 
       RowBox[{
        RowBox[{"Or", " ", "@@", " ", 
         RowBox[{"condsOf", "[", "p", "]"}]}], ",", " ", "ass"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"findTrueCond", "[", 
       RowBox[{"pieces_", ",", " ", "ass_"}], "]"}], " ", ":=", " ", 
      RowBox[{"Simplify", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"Or", " ", "@@", " ", 
          RowBox[{"(", 
           RowBox[{"pieces", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}]}], "]"}], ",", 
        " ", "ass"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"findTrueCond", "[", 
       RowBox[{"p_Piecewise", ",", " ", "ass_"}], "]"}], " ", ":=", " ", 
      RowBox[{"Simplify", "[", 
       RowBox[{
        RowBox[{"Not", "[", 
         RowBox[{"allConds", "[", 
          RowBox[{"p", ",", "ass"}], "]"}], "]"}], ",", " ", "ass"}], "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"trueCond", " ", "=", " ", 
      RowBox[{"findTrueCond", "[", 
       RowBox[{"expr", ",", " ", "assumpts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"result", " ", "=", " ", 
      RowBox[{"Piecewise", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"piecesOf", "[", "expr", "]"}], " ", "~", "Join", "~", " ", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"trueOf", "[", "expr", "]"}], ",", " ", "trueCond"}], 
           "}"}], "}"}]}], ",", " ", "Indeterminate"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "result"}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"0849e749-8a26-4cf8-a397-e44d210c044d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Main Event", \
"Subsection",ExpressionUUID->"d8a66d1c-299f-43f2-a1cc-7804e5eff54b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "minClearanceFromDepth", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"minClearanceFromDepth", "[", 
    RowBox[{"tube_", ",", " ", "tip_", ",", " ", 
     RowBox[{"depth_", "?", "NumericQ"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "tubeHeight", ",", " ", "assumpts", ",", " ", "expr", ",", "z"}], "}"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tubeHeight", " ", "=", " ", 
       RowBox[{"height", "[", "tube", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"assumpts", " ", "=", " ", 
       RowBox[{
        RowBox[{"assumptions", "[", "tube", "]"}], " ", "&&", " ", 
        RowBox[{"assumptions", "[", "tip", "]"}], " ", "&&", " ", 
        RowBox[{"depth", " ", "\[GreaterEqual]", " ", "0"}], "  ", "&&", " ", 
        RowBox[{"depth", " ", "\[LessEqual]", " ", "tubeHeight"}], " ", "&&", 
        " ", 
        RowBox[{"z", " ", "\[GreaterEqual]", " ", "depth"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"expr", " ", "=", " ", 
       RowBox[{
        RowBox[{"radiusFromDepth", "[", 
         RowBox[{"tube", ",", " ", "z"}], "]"}], " ", "-", " ", 
        RowBox[{"outsideRadiusFromDepth", "[", 
         RowBox[{"tip", ",", " ", 
          RowBox[{"z", "-", "depth"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"expr", " ", "=", " ", 
       RowBox[{"PiecewiseExpand", "[", 
        RowBox[{"expr", ",", "assumpts", ",", " ", "Reals"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"printCell", "[", 
         RowBox[{"Plot", "[", 
          RowBox[{"expr", ",", " ", 
           RowBox[{"{", 
            RowBox[{"z", ",", " ", "depth", ",", " ", "tubeHeight"}], "}"}], 
           ",", " ", 
           RowBox[{"AxesLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<z\>\"", ",", " ", "\"\<clearance\>\""}], "}"}]}], 
           ",", " ", 
           RowBox[{"AxesOrigin", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
           RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", " ", 
           RowBox[{"PlotLabel", "\[Rule]", 
            RowBox[{"StringForm", "[", 
             RowBox[{
             "\"\<Clearance as function of z with depth=``\>\"", ",", 
              "depth"}], "]"}]}]}], "]"}], "]"}], ";"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{
        RowBox[{"MinValue", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"expr", ",", " ", 
            RowBox[{
             RowBox[{"depth", " ", "\[LessEqual]", " ", "z"}], " ", "&&", " ", 
             RowBox[{"z", " ", "\[LessEqual]", " ", "tubeHeight"}]}]}], "}"}],
           ",", " ", "z"}], "]"}], ",", " ", "assumpts"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"minClearanceFromDepth", "[", 
   RowBox[{"tube_", ",", " ", "tip_", ",", " ", "depth_Symbol"}], "]"}], " ", 
  ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "tubeHeight", ",", " ", "expr", ",", " ", "zDepthAssumpts", ",", " ", 
      "tubeTipAssumpts", ",", "  ", "assumpts", ",", " ", "z", ",", " ", 
      "newConds", ",", " ", "plotRegion", ",", " ", "lowers", ",", " ", 
      "uppers", ",", " ", "applyZ", ",", " ", "allSolns", ",", " ", 
      "extremas", ",", " ", "mins", ",", " ", "min", ",", " ", "bound"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"plotRegion", "[", 
       RowBox[{"region_", ",", " ", 
        RowBox[{"upper_:", "tubeHeight"}]}], "]"}], " ", ":=", " ", 
      RowBox[{"RegionPlot", "[", 
       RowBox[{"region", ",", " ", 
        RowBox[{"{", 
         RowBox[{"depth", ",", " ", "0", ",", " ", "upper"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"z", ",", " ", "0", ",", " ", "upper"}], "}"}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", "150"}], ",", " ", 
        RowBox[{"BoundaryStyle", "\[Rule]", "Thick"}], ",", " ", 
        RowBox[{"GridLines", "\[Rule]", "Automatic"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"tubeHeight", " ", "=", " ", 
      RowBox[{"height", "[", "tube", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tubeTipAssumpts", " ", "=", " ", 
      RowBox[{
       RowBox[{"assumptions", "[", "tube", "]"}], " ", "&&", " ", 
       RowBox[{"assumptions", "[", "tip", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"zDepthAssumpts", " ", "=", " ", 
      RowBox[{
       RowBox[{"depth", " ", "\[GreaterEqual]", " ", "0"}], "  ", "&&", " ", 
       RowBox[{"depth", " ", "\[LessEqual]", " ", "tubeHeight"}], " ", "&&", 
       " ", 
       RowBox[{"z", " ", "\[GreaterEqual]", " ", "depth"}], "  ", "&&", " ", 
       RowBox[{"z", " ", "\[LessEqual]", " ", "tubeHeight"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"assumpts", " ", "=", " ", 
      RowBox[{"tubeTipAssumpts", " ", "&&", " ", "zDepthAssumpts"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "our", " ", "fundamental", " ", "clearance", " ", "expression", " ", 
       "is", " ", "the", " ", "difference", " ", "in", " ", "the", " ", 
       RowBox[{"radii", ".", " ", "The"}], " ", "pipette", " ", "tip", " ", 
       "is", " ", "above", " ", "the", " ", "bottom", " ", "of", " ", "the", 
       " ", "tube", " ", 
       RowBox[{"by", " ", "'"}], 
       RowBox[{"depth", "'"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"expr", " ", "=", " ", 
      RowBox[{
       RowBox[{"radiusFromDepth", "[", 
        RowBox[{"tube", ",", " ", "z"}], "]"}], " ", "-", " ", 
       RowBox[{"outsideRadiusFromDepth", "[", 
        RowBox[{"tip", ",", " ", 
         RowBox[{"z", "-", "depth"}]}], "]"}]}]}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "simplify", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"expr", " ", "=", " ", 
      RowBox[{"simplifyPiecewise", "[", 
       RowBox[{"expr", ",", " ", "depth", ",", " ", 
        RowBox[{"tubeTipAssumpts", " ", "&&", " ", "zDepthAssumpts"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Make", " ", "all", " ", "conditions", " ", "explicit", " ", "rather", 
       " ", "than", " ", "implicit"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"expr", " ", "=", " ", 
      RowBox[{"makeExplicitConditions", "[", 
       RowBox[{"expr", ",", " ", 
        RowBox[{"tubeTipAssumpts", " ", "&&", " ", "zDepthAssumpts"}], ",", 
        " ", "Indeterminate"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Manifest", " ", "z"}], " ", "\[GreaterEqual]", " ", 
       RowBox[{
       "depth", " ", "etc", " ", "in", " ", "the", " ", "conditions"}]}], " ",
       "*)"}], "\[IndentingNewLine]", 
     RowBox[{"newConds", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"#", " ", "&&", " ", "zDepthAssumpts"}], " ", "&"}], "/@", 
       "  ", 
       RowBox[{"condsOf", "[", "expr", "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"expr", " ", "=", " ", 
      RowBox[{"Piecewise", "[", 
       RowBox[{
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"exprsOf", " ", "@", " ", "expr"}], ",", " ", "newConds"}],
           "}"}], "]"}], ",", " ", 
        RowBox[{"trueOf", "[", "expr", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"cellPrint", " ", "@", " ", 
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"plotRegion", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"condsOf", "[", "expr", "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}], ",", " ", "0.2"}], "]"}], 
            ","}], "*)"}], 
          RowBox[{"Row", "[", 
           RowBox[{"plotRegion", " ", "/@", " ", 
            RowBox[{"condsOf", "[", "expr", "]"}]}], "]"}], "}"}], "]"}]}], 
       ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "figure", " ", "out", " ", "lower", " ", "and", " ", "upper", " ", 
        "bounds", " ", "for", " ", "z", " ", "in", " ", "each", " ", "of", 
        " ", "the", " ", 
        RowBox[{"pieces", ".", " ", "'"}], 
        RowBox[{"Indeterminiate", "'"}], " ", "helps", " ", "nuke", " ", 
        RowBox[{"Complex", "[", "]"}]}], ",", " ", "Infinity", ",", " ", 
       "etc"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"lowers", "  ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"minValue", "[", 
         RowBox[{
         "z", ",", " ", "#", ",", " ", "assumpts", ",", " ", "z", ",", " ", 
          "Indeterminate"}], "]"}], "&"}], " ", "/@", " ", 
       RowBox[{"condsOf", "[", "expr", "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"uppers", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"maxValue", "[", 
         RowBox[{
         "z", ",", " ", "#", ",", " ", "assumpts", ",", " ", "z", ",", " ", 
          "Indeterminate"}], "]"}], " ", "&"}], " ", "/@", " ", 
       RowBox[{"condsOf", "[", "expr", "]"}]}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "pair", " ", "those", " ", "with", " ", "the", " ", "corresponding", 
       " ", "expressions"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"lowers", " ", "=", " ", 
      RowBox[{"pairUp", "[", 
       RowBox[{
        RowBox[{"exprsOf", "[", "expr", "]"}], ",", " ", "lowers"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"uppers", " ", "=", " ", 
      RowBox[{"pairUp", "[", 
       RowBox[{
        RowBox[{"exprsOf", "[", "expr", "]"}], ",", " ", "uppers"}], "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "apply", " ", "those", " ", "expressions", " ", "at", " ", "the", " ", 
       "lower", " ", "and", " ", "upper", " ", "bounds"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"applyZ", "[", 
       RowBox[{"zExpr_", ",", " ", 
        RowBox[{"HoldPattern", " ", "@", " ", 
         RowBox[{"Piecewise", "[", 
          RowBox[{"pieces_", ",", " ", "true_"}], "]"}]}]}], "]"}], " ", ":=",
       " ", 
      RowBox[{"Piecewise", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Simplify", "[", 
             RowBox[{"zExpr", " ", "/.", " ", 
              RowBox[{"z", " ", "\[Rule]", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}]}], "]"}], ",", " ", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], " ", "/@", " ", 
         "pieces"}], ",", " ", 
        RowBox[{"Simplify", "[", " ", 
         RowBox[{"zExpr", " ", "/.", " ", 
          RowBox[{"z", " ", "\[Rule]", " ", "true"}]}], "]"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"applyZ", "[", 
       RowBox[{"zExpr_", ",", " ", "other_"}], "]"}], " ", ":=", " ", 
      RowBox[{"Simplify", "[", 
       RowBox[{"zExpr", " ", "/.", " ", 
        RowBox[{"z", " ", "\[Rule]", " ", "other"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"lowers", " ", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"applyZ", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], " ", "/@", 
       " ", "lowers"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"uppers", " ", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"applyZ", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], " ", "/@", 
       " ", "uppers"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "figure", " ", "out", " ", "if", " ", "there", " ", "are", " ", "any", 
       " ", "extrema", " ", "on", " ", "the", " ", "interior", " ", "of", " ",
        "the", " ", "various", " ", "regions"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"allSolns", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Solve", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"D", "[", 
            RowBox[{"#", ",", " ", "z"}], "]"}], "\[Equal]", " ", "0"}], ",", 
          " ", "z"}], "]"}], " ", "&"}], " ", "/@", " ", 
       RowBox[{"exprsOf", "[", "expr", "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"extremas", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"solns", ",", " ", "e", ",", " ", "cond"}], "}"}], ",", 
           " ", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", "result", "}"}], ",", " ", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"result", "=", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Function", "[", 
                  RowBox[{"soln", ",", " ", "\[IndentingNewLine]", 
                   RowBox[{"If", " ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Simplify", "[", 
                    RowBox[{"cond", " ", "/.", "soln"}], "]"}], " ", 
                    "\[Equal]", " ", "False"}], ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Piecewise", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"e", " ", "/.", " ", "soln"}], ",", " ", 
                    RowBox[{"cond", "/.", " ", "soln"}]}], "}"}], "}"}], ",", 
                    " ", "Indeterminate"}], "]"}]}], "]"}]}], 
                  "\[IndentingNewLine]", "]"}], "/@", " ", "solns"}], ")"}]}],
               ";", "\[IndentingNewLine]", 
              RowBox[{"Flatten", "[", "result", "]"}]}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], "@@",
          " ", "#"}], "&"}], "/@", " ", 
       RowBox[{"pairUp", "[", 
        RowBox[{"allSolns", ",", " ", 
         RowBox[{"exprsOf", "[", "expr", "]"}], ",", " ", 
         RowBox[{"condsOf", "[", "expr", "]"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "put", " ", "lower", " ", "and", " ", "upper", " ", "together", " ", 
       "with", " ", "extremas", " ", "and", " ", "then", " ", "Min", " ", 
       "over", " ", "each", " ", "piece"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"mins", " ", "=", " ", 
      RowBox[{"pairUp", "[", 
       RowBox[{"lowers", ",", " ", "uppers"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mins", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{"mins", ",", " ", 
        RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"mins", " ", "=", " ", 
      RowBox[{"Flatten", " ", "/@", " ", "mins"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mins", " ", "=", 
      RowBox[{"(", 
       RowBox[{"Min", " ", "/@", " ", "mins"}], ")"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Infinity", " ", "is", " ", "friendlier", " ", "since", " ", 
       RowBox[{"we", "'"}], "re", " ", "using", " ", "Min"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"mins", " ", "=", " ", 
      RowBox[{"mins", " ", "/.", " ", 
       RowBox[{"{", 
        RowBox[{"Indeterminate", " ", "\[Rule]", " ", "Infinity"}], "}"}]}]}],
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Simplify", " ", "each", " ", "piece"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"mins", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"PiecewiseExpand", "[", 
         RowBox[{"#", ",", " ", "True"}], "]"}], " ", "&"}], " ", "/@", " ", 
       "mins"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"mins", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"FullSimplify", "[", 
         RowBox[{"#", ",", " ", "True"}], "]"}], "&"}], " ", "/@", " ", 
       "mins"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"mins", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"simplifyPiecewise", "[", 
         RowBox[{"#", ",", " ", "depth", ",", " ", "True"}], "]"}], "&"}], 
       " ", "/@", "mins"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"min", " ", "across", " ", "the", " ", "pieces"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"Min", " ", "@@", " ", "mins"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"PiecewiseExpand", "[", 
       RowBox[{"min", ",", " ", "True", ",", " ", "Reals"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "simplify", " ", "*)"}], " ", "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"simplifyPiecewise", "[", 
       RowBox[{"min", ",", " ", "depth", ",", " ", "True"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{"min", ",", " ", "zDepthAssumpts"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"newConds", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"#", " ", "&&", " ", 
         RowBox[{"depth", " ", "\[GreaterEqual]", " ", "0"}], "  ", "&&", " ", 
         RowBox[{"depth", " ", "\[LessEqual]", " ", "tubeHeight"}]}], " ", 
        "&"}], "/@", "  ", 
       RowBox[{"condsOf", "[", "min", "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"Piecewise", "[", 
       RowBox[{
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"exprsOf", " ", "@", " ", "min"}], ",", " ", "newConds"}], 
          "}"}], "]"}], ",", " ", 
        RowBox[{"trueOf", "[", "min", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"simplifyPiecewise", "[", 
       RowBox[{"min", ",", " ", "depth", ",", " ", 
        RowBox[{
         RowBox[{"depth", " ", "\[GreaterEqual]", " ", "0"}], "  ", "&&", " ", 
         RowBox[{"depth", " ", "\[LessEqual]", " ", "tubeHeight"}]}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "tidy", " ", "up", " ", "with", " ", "explicit", " ", "conditions"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"makeExplicitConditions", "[", 
       RowBox[{"min", ",", " ", "True", ",", " ", "Indeterminate"}], "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"clamp", " ", "to", " ", "tubeHight", " ", "above"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"Piecewise", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"Infinity", ",", " ", 
            RowBox[{"depth", " ", ">", " ", "tubeHeight"}]}], "}"}], "}"}], 
         " ", "~", "Join", "~", " ", 
         RowBox[{"piecesOf", "[", "min", "]"}], "~", "Join", "~", " ", 
         RowBox[{"{", "}"}]}], ",", " ", "Indeterminate"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"simplifyPiecewise", "[", 
       RowBox[{"min", ",", " ", "depth", ",", " ", "True"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"clamp", " ", "to", " ", "zero", " ", "below"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"Piecewise", "[", 
       RowBox[{
        RowBox[{"pairUp", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Max", "[", 
             RowBox[{"0", ",", "#"}], "]"}], "&"}], "/@", " ", 
           RowBox[{"exprsOf", "[", "min", "]"}]}], ",", " ", 
          RowBox[{"condsOf", "[", "min", "]"}]}], "]"}], ",", " ", 
        RowBox[{"trueOf", "[", "min", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"simplifyPiecewise", "[", 
       RowBox[{"min", ",", " ", "depth", ",", " ", "True"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"simplifyPiecewise", "[", 
       RowBox[{"min", ",", " ", "depth", ",", " ", "True"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"makeExplicitConditions", "[", 
       RowBox[{"min", ",", " ", "True", ",", " ", "Indeterminate"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{"min", ",", " ", 
        RowBox[{"depth", " ", "\[GreaterEqual]", " ", "0"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "sort", " ", "in", " ", "an", " ", "order", " ", "convenient", " ", 
       "for", " ", "code"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"bound", "[", "piece_", "]"}], " ", ":=", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Max", " ", "@@", " ", 
          RowBox[{"findUpper", "[", 
           RowBox[{"depth", ",", " ", 
            RowBox[{"piece", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ")"}], " ", "/.", " ", 
        RowBox[{
         RowBox[{"-", "Infinity"}], " ", "\[Rule]", " ", "Infinity"}]}], 
       ")"}]}], ";", " ", "\[IndentingNewLine]", 
     RowBox[{"min", " ", "=", " ", 
      RowBox[{"Piecewise", "[", 
       RowBox[{
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"piecesOf", "[", "min", "]"}], ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"bound", "[", "#1", "]"}], " ", "<", " ", 
            RowBox[{"bound", "[", "#2", "]"}]}], "&"}]}], "]"}], ",", " ", 
        RowBox[{"trueOf", "[", "min", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "min"}]}], 
   "\[IndentingNewLine]", 
   "]"}]}]}], "Input",ExpressionUUID->"fb0c8f22-d58d-4f6f-944f-7d773346bb38"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests", \
"Subsection",ExpressionUUID->"6fe3322c-0566-42e7-9ba3-bdd9acdc57e1"],

Cell[BoxData[{
 RowBox[{"plotProfile", " ", "@", " ", 
  "opentrons$300\[Mu]l$tipM1"}], "\[IndentingNewLine]", 
 RowBox[{"plotProfile", " ", "@", " ", 
  "fittedEppendorf1$5M1"}], "\[IndentingNewLine]", 
 RowBox[{"plotProfile", " ", "@", " ", 
  "fittedFalcon15"}], "\[IndentingNewLine]", 
 RowBox[{"plotProfile", " ", "@", " ", 
  RowBox[{"mountTip", "[", 
   RowBox[{"p50M0", ",", " ", "opentrons$300\[Mu]l$tipM1"}], 
   "]"}]}]}], "Input",ExpressionUUID->"3138e3e6-19dd-48de-9fe6-6d8733121f74"],

Cell[CellGroupData[{

Cell["fittedFalcon15", \
"Subsubsection",ExpressionUUID->"54b641cc-07ab-439d-9e80-7647fb47925d"],

Cell["\<\
The value for identically zero isn\[CloseCurlyQuote]t correct (it should be \
as in 0 <= depth < 4.21826), but good enough for us in our needs (we\
\[CloseCurlyQuote]ll adjust when we pythonize).\
\>", "Text",ExpressionUUID->"6c5c1de4-b344-4677-a38d-726d2a709514"],

Cell[BoxData[
 RowBox[{"testResult", " ", "=", " ", 
  RowBox[{"minClearanceFromDepth", "[", 
   RowBox[{"fittedFalcon15", ",", " ", 
    RowBox[{"mountTip", "[", 
     RowBox[{"p50M0", ",", " ", "opentrons$300\[Mu]l$tipM1"}], "]"}], ",", 
    " ", "depth"}], 
   "]"}]}]], "Input",ExpressionUUID->"c1e33870-dfec-4072-b34d-d4c2f03d596c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"testResult", " ", "=", " ", 
   RowBox[{"minClearanceFromDepth", "[", 
    RowBox[{"fittedFalcon15", ",", " ", 
     RowBox[{"mountTip", "[", 
      RowBox[{"p50M0", ",", " ", "opentrons$300\[Mu]l$tipM1"}], "]"}], ",", 
     " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plotfunc", "[", "volume_", "]"}], " ", ":=", " ", 
  RowBox[{"depthFromVolume", "[", 
   RowBox[{"fittedFalcon15", ",", " ", "volume"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Row", " ", "@", " ", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{"testResult", ",", " ", 
      RowBox[{"{", 
       RowBox[{"depth", ",", " ", "0", ",", " ", "118.07"}], "}"}], ",", " ", 
      RowBox[{"AxesLabel", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<depth\>\"", ",", " ", "\"\<min clearance\>\""}], "}"}]}],
       ",", " ", 
      RowBox[{
      "PlotLabel", "\[Rule]", "\"\<Min radial clearance vs tip depth\>\""}], 
      ",", " ", 
      RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", " ", 
      RowBox[{"AxesOrigin", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Plot", "[", 
     RowBox[{"testResult", ",", " ", 
      RowBox[{"{", 
       RowBox[{"depth", ",", " ", "0", ",", " ", "0.05"}], "}"}], ",", " ", 
      RowBox[{"AxesLabel", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<depth\>\"", ",", " ", "\"\<min clearance\>\""}], "}"}]}],
       ",", " ", 
      RowBox[{
      "PlotLabel", "\[Rule]", 
       "\"\<Min radial clearance vs tip depth (zoomed)\>\""}], ",", " ", 
      RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", " ", 
      RowBox[{"AxesOrigin", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"testResult", " ", "/.", " ", 
       RowBox[{"depth", " ", "\[Rule]", " ", 
        RowBox[{"plotfunc", "[", "vol", "]"}]}]}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"vol", ",", " ", "0", ",", " ", 
        RowBox[{"volume", "[", "fittedFalcon15", "]"}]}], "}"}], ",", " ", 
      RowBox[{"AxesLabel", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<volume\>\"", ",", " ", "\"\<min clearance\>\""}], 
        "}"}]}], ",", " ", 
      RowBox[{
      "PlotLabel", "\[Rule]", "\"\<Min radial clearance vs volume\>\""}], ",",
       " ", 
      RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", " ", 
      RowBox[{"AxesOrigin", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   "}"}]}]}], "Input",ExpressionUUID->"350db318-7952-41af-baaa-0d2c6370157f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["fittedEppendorf1$5M1", \
"Subsubsection",ExpressionUUID->"b0d4ed88-7eae-4f48-9cfc-c85676dcbec0"],

Cell[BoxData[
 RowBox[{"testResult", " ", "=", " ", 
  RowBox[{"minClearanceFromDepth", "[", 
   RowBox[{"fittedEppendorf1$5M1", ",", " ", 
    RowBox[{"mountTip", "[", 
     RowBox[{"p50M0", ",", " ", "opentrons$300\[Mu]l$tipM1"}], "]"}], ",", 
    " ", "depth"}], 
   "]"}]}]], "Input",ExpressionUUID->"4e57e59f-96b5-4dc3-a778-361bc03a341b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"testResult", " ", "=", " ", 
   RowBox[{"minClearanceFromDepth", "[", 
    RowBox[{"fittedEppendorf1$5M1", ",", " ", 
     RowBox[{"mountTip", "[", 
      RowBox[{"p50M0", ",", " ", "opentrons$300\[Mu]l$tipM1"}], "]"}], ",", 
     " ", "depth"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plotfunc", "[", "volume_", "]"}], " ", ":=", " ", 
  RowBox[{"depthFromVolume", "[", 
   RowBox[{"fittedEppendorf1$5M1", ",", " ", "volume"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Row", " ", "@", " ", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{"testResult", ",", " ", 
      RowBox[{"{", 
       RowBox[{"depth", ",", " ", "0", ",", " ", "37.8"}], "}"}], ",", " ", 
      RowBox[{"AxesLabel", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<depth\>\"", ",", " ", "\"\<min clearance\>\""}], "}"}]}],
       ",", " ", 
      RowBox[{
      "PlotLabel", "\[Rule]", "\"\<Min radial clearance vs tip depth\>\""}], 
      ",", " ", 
      RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", " ", 
      RowBox[{"AxesOrigin", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Plot", "[", 
     RowBox[{"testResult", ",", " ", 
      RowBox[{"{", 
       RowBox[{"depth", ",", " ", "0", ",", " ", "0.2"}], "}"}], ",", " ", 
      RowBox[{"AxesLabel", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<depth\>\"", ",", " ", "\"\<min clearance\>\""}], "}"}]}],
       ",", " ", 
      RowBox[{
      "PlotLabel", "\[Rule]", 
       "\"\<Min radial clearance vs tip depth (zoomed)\>\""}], ",", " ", 
      RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", " ", 
      RowBox[{"AxesOrigin", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"testResult", " ", "/.", " ", 
       RowBox[{"depth", " ", "\[Rule]", " ", 
        RowBox[{"plotfunc", "[", "vol", "]"}]}]}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"vol", ",", " ", "0", ",", " ", 
        RowBox[{"volume", "[", "fittedEppendorf1$5M1", "]"}]}], "}"}], ",", 
      " ", 
      RowBox[{"AxesLabel", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<volume\>\"", ",", " ", "\"\<min clearance\>\""}], 
        "}"}]}], ",", " ", 
      RowBox[{
      "PlotLabel", "\[Rule]", "\"\<Min radial clearance vs volume\>\""}], ",",
       " ", 
      RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", " ", 
      RowBox[{"AxesOrigin", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]}], 
   "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"Row", " ", "@", " ", 
  RowBox[{"{", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"radiusFromDepth", "[", 
        RowBox[{"fittedEppendorf1$5M1", ",", " ", "z"}], "]"}], ",", " ", 
       RowBox[{"outsideRadiusFromDepth", "[", 
        RowBox[{
         RowBox[{"mountTip", "[", 
          RowBox[{"p50M0", ",", " ", "opentrons$300\[Mu]l$tipM1"}], "]"}], 
         ",", 
         RowBox[{"z", " ", "-", " ", "0.025"}]}], "]"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"z", ",", " ", "0", ",", " ", "0.2"}], "}"}], ",", " ", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<z\>\"", ",", " ", "\"\<radius\>\""}], "}"}]}], ",", " ", 
     RowBox[{
     "PlotLabel", "\[Rule]", " ", "\"\<Radii with tip depth=0.025mm\>\""}], 
     ",", " ", 
     RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", " ", 
     RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], 
   "\[IndentingNewLine]", 
   "}"}]}]}], "Input",ExpressionUUID->"aeaea31d-7b5f-470d-83be-c1be78e75a58"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Python-izable Function Creation", \
"Section",ExpressionUUID->"17bde502-9c9f-436e-b428-0033d7704a2b"],

Cell["\<\
In this section, we exhibit the detailed definition of the functions which \
can be copied into Python form with the minimal amount of human editing (in \
particular, numeric constants and expressions can be literally copied and \
pasted).\
\>", "Text",ExpressionUUID->"7293cbc3-abce-4c87-bb65-f01fce08d9c1"],

Cell[CellGroupData[{

Cell["Utilities", \
"Subsection",ExpressionUUID->"88488fb1-7f52-49e5-897c-ef6b0b04efe8"],

Cell["\<\
A simple utility helps us create the text which can be copied and pasted.\
\>", "Text",ExpressionUUID->"4c84b1a8-d7d7-4820-812a-00bf0f7317aa"],

Cell[BoxData[{
 RowBox[{"Clear", "[", 
  RowBox[{
  "cFormat", ",", " ", "cubeRoot", ",", " ", "square", ",", " ", "cube", ",", 
   " ", "sqrt"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"cFormat", "[", "p_Piecewise", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "pieces", ",", " ", "default", ",", " ", "formatted", ",", " ", "op", 
       ",", " ", "rules"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"pieces", " ", "=", " ", 
       RowBox[{"p", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"default", " ", "=", " ", 
       RowBox[{"p", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"rules", " ", "=", " ", 
       RowBox[{"{", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"x_", "^", 
           RowBox[{"(", 
            RowBox[{"1", "/", "3"}], ")"}]}], " ", "\[RuleDelayed]", " ", 
          RowBox[{"cubeRoot", "[", "x", "]"}]}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"x_", "^", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "/", "3"}], ")"}]}], " ", "\[RuleDelayed]", 
          " ", 
          RowBox[{"1", " ", "/", " ", 
           RowBox[{"cubeRoot", "[", "x", "]"}]}]}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"x_", "^", "2"}], " ", "\[RuleDelayed]", " ", 
          RowBox[{"square", "[", "x", "]"}]}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"x_", "^", "3"}], " ", "\[RuleDelayed]", " ", 
          RowBox[{"cube", "[", "x", "]"}]}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Sqrt", "[", "x_", "]"}], " ", "\[RuleDelayed]", " ", 
          RowBox[{"sqrt", "[", "x", "]"}]}]}], "\[IndentingNewLine]", "}"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"op", " ", "=", " ", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "expr", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"CForm", "[", 
          RowBox[{"expr", " ", "//.", " ", "rules"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"formatted", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"op", "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", " ", 
        "pieces"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Piecewise", "[", 
       RowBox[{"formatted", ",", " ", 
        RowBox[{"op", "[", "default", "]"}]}], "]"}]}]}], "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"30c56b7b-3e33-46e9-a36e-267a7e11f17f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tubes", \
"Subsection",ExpressionUUID->"e32d00db-b6a0-4772-a84a-ffcd1e9ea7b8"],

Cell["\<\
For each of the tubes we care about, here we select the model for same that \
we find most accurate.\
\>", "Text",ExpressionUUID->"0c1ce34f-04e2-4c10-81e1-86dc39ff683a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"tubes", " ", "=", " ", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"falcon15ml", " ", "\[Rule]", " ", "fittedFalcon15"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"falcon50ml", " ", "\[Rule]", " ", "fittedFalcon50"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
        "eppendorf1$5ml", " ", "\[Rule]", " ", "fittedEppendorf1$5M1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
        "eppendorf5$0ml", " ", "\[Rule]", " ", "fittedEppendorf5$0M0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"idtTube", " ", "\[Rule]", " ", "fittedIdt"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"bioradPlateWell", " ", "\[Rule]", " ", 
         RowBox[{"(*", 
          RowBox[{"modelBioRad3", "[", "]"}], "*)"}], " ", 
         "modelledBioRad5"}]}], "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{",", " ", 
         RowBox[{"generic", " ", "\[Rule]", " ", 
          RowBox[{"toCanonical", " ", "@", " ", 
           RowBox[{"conicalTestTube", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"idTop", ",", " ", "idHip", ",", " ", "idBottom"}], 
              "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"hTop", ",", " ", "hBottom"}], "}"}]}], "]"}]}]}]}], 
        "*)"}], "\[IndentingNewLine]", "}"}], " ", "//", " ", 
      "Association"}]}], ")"}], " ", "//", " ", "Normal"}], " ", "//", " ", 
  "ColumnForm"}]], \
"Input",ExpressionUUID->"f33ae077-a49f-4b64-8cee-64fee06939c4"],

Cell["A helper function is necessary to create the output.", \
"Text",ExpressionUUID->"5d894dda-4278-4cb0-8cb1-398c7d9739f0"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "printAndPlot", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"printAndPlot", "[", "name_", "]"}], " ", ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"simplify", ",", " ", "expr", ",", " ", "tube", ",", " ", "h"}], 
     "}"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"simplify", "[", "fn_", "]"}], " ", ":=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{"fn", ",", " ", 
        RowBox[{"assumptions", "[", "tube", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"CellPrint", "[", 
      RowBox[{"TextCell", "[", 
       RowBox[{"name", ",", " ", "\"\<Subsubsection\>\""}], "]"}], "]"}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{"tubes", "[", "name", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"test", " ", "@", " ", 
      RowBox[{"parts", "[", "tube", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ToString", "[", "name", "]"}], "\[Equal]", " ", 
        "\"\<generic\>\""}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"simplify", " ", "@", " ", 
          RowBox[{"volume", "[", "tube", "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"simplify", " ", "@", " ", 
          RowBox[{"depthFromVolume", "[", 
           RowBox[{"tube", ",", " ", "vol"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"simplify", " ", "@", " ", 
          RowBox[{"volumeFromDepth", "[", 
           RowBox[{"tube", ",", " ", "depth"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"simplify", " ", "@", " ", 
          RowBox[{"radiusFromDepth", "[", 
           RowBox[{"tube", ",", " ", "depth"}], "]"}]}]}], ";"}], 
       "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"N", " ", "@", " ", 
          RowBox[{"volume", "[", "tube", "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"N", " ", "@", " ", 
          RowBox[{"volumeFromDepth", "[", 
           RowBox[{"tube", ",", 
            RowBox[{"height", "[", "tube", "]"}]}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"N", " ", "@", " ", 
          RowBox[{"height", "[", "tube", "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"N", " ", "@", " ", 
          RowBox[{"depthFromVolume", "[", 
           RowBox[{"tube", ",", 
            RowBox[{"volume", "[", "tube", "]"}]}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"N", " ", "@", " ", 
          RowBox[{"(", 
           RowBox[{"2", " ", "*", " ", 
            RowBox[{"radiusFromDepth", "[", 
             RowBox[{"tube", ",", 
              RowBox[{"height", "[", "tube", "]"}]}], "]"}]}], ")"}]}]}], ";",
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"test", " ", "@", "  ", 
         RowBox[{"N", " ", "@", " ", 
          RowBox[{"simplify", " ", "@", " ", 
           RowBox[{"depthFromVolume", "[", 
            RowBox[{"tube", ",", " ", "vol"}], "]"}]}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"cFormat", " ", "@", " ", 
          RowBox[{"simplify", " ", "@", " ", 
           RowBox[{"depthFromVolume", "[", 
            RowBox[{"tube", ",", " ", "vol"}], "]"}]}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"expr", " ", "=", " ", 
         RowBox[{"N", " ", "@", " ", 
          RowBox[{"depthFromVolume", "[", 
           RowBox[{"tube", ",", " ", "vol"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"printCell", " ", "@", " ", 
         RowBox[{"Plot", "[", 
          RowBox[{"expr", ",", " ", 
           RowBox[{"{", 
            RowBox[{"vol", ",", " ", "0", ",", " ", 
             RowBox[{"volume", "[", "tube", "]"}]}], "}"}], ",", " ", 
           RowBox[{"AxesLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], 
           ",", " ", 
           RowBox[{"PlotLabel", "\[Rule]", 
            RowBox[{
             RowBox[{"ToString", "[", "name", "]"}], " ", "<>", " ", 
             "\"\<: depth from volume\>\""}]}], ",", " ", 
           RowBox[{"AxesOrigin", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
           RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"N", " ", "@", " ", 
          RowBox[{"simplify", " ", "@", " ", 
           RowBox[{"volumeFromDepth", "[", 
            RowBox[{"tube", ",", " ", "depth"}], "]"}]}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"cFormat", " ", "@", " ", 
          RowBox[{"simplify", " ", "@", " ", 
           RowBox[{"volumeFromDepth", "[", 
            RowBox[{"tube", ",", " ", "depth"}], "]"}]}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"expr", " ", "=", " ", 
         RowBox[{"N", " ", "@", " ", 
          RowBox[{"volumeFromDepth", "[", 
           RowBox[{"tube", ",", " ", "depth"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"printCell", " ", "@", " ", 
         RowBox[{"Plot", "[", 
          RowBox[{"expr", ",", " ", 
           RowBox[{"{", 
            RowBox[{"depth", ",", " ", "0", ",", " ", 
             RowBox[{"height", "[", "tube", "]"}]}], "}"}], ",", " ", 
           RowBox[{"AxesLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<depth\>\"", ",", " ", "\"\<volume\>\""}], "}"}]}], 
           ",", " ", 
           RowBox[{"PlotLabel", "\[Rule]", 
            RowBox[{
             RowBox[{"ToString", "[", "name", "]"}], "<>", " ", 
             "\"\<: volume from depth\>\""}]}], ",", " ", 
           RowBox[{"AxesOrigin", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
           RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"N", " ", "@", " ", 
          RowBox[{"simplify", " ", "@", " ", 
           RowBox[{"radiusFromDepth", "[", 
            RowBox[{"tube", ",", " ", "depth"}], "]"}]}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"test", " ", "@", " ", 
         RowBox[{"cFormat", " ", "@", " ", 
          RowBox[{"simplify", " ", "@", " ", 
           RowBox[{"radiusFromDepth", "[", 
            RowBox[{"tube", ",", " ", "depth"}], "]"}]}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"expr", " ", "=", " ", 
         RowBox[{"N", " ", "@", " ", 
          RowBox[{"radiusFromDepth", "[", 
           RowBox[{"tube", ",", " ", "depth"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"printCell", " ", "@", " ", 
         RowBox[{"Plot", "[", 
          RowBox[{"expr", ",", " ", 
           RowBox[{"{", 
            RowBox[{"depth", ",", " ", "0", ",", " ", 
             RowBox[{"height", "[", "tube", "]"}]}], "}"}], ",", " ", 
           RowBox[{"AxesLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"\"\<depth\>\"", ",", " ", "\"\<radius\>\""}], "}"}]}], 
           ",", " ", 
           RowBox[{"PlotLabel", "\[Rule]", 
            RowBox[{
             RowBox[{"ToString", "[", "name", "]"}], "<>", " ", 
             "\"\<: radius from depth\>\""}]}], ",", " ", 
           RowBox[{"AxesOrigin", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
           RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"printAndPlot", " ", "/@", " ", 
   RowBox[{"Keys", "[", "tubes", "]"}]}], 
  ";"}]}], "Input",ExpressionUUID->"129de215-3421-42f4-8c4b-ec8a27a7a42b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pipettes", \
"Subsection",ExpressionUUID->"82b0e9ae-cc21-457f-aca4-6b5ddd413dde"],

Cell["\<\
Similarly, we define copy-pasteable radial clearance functions.\
\>", "Text",ExpressionUUID->"21002f38-300e-437e-a9e7-2a784f6c2582"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"tips", " ", "=", " ", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
        "\"\<opentrons_96_tiprack_10ul\>\"", "\[Rule]", " ", 
         "opentrons$10\[Mu]l$tipM0"}], ",", "\[IndentingNewLine]", 
        RowBox[{
        "\"\<opentrons_96_tiprack_300ul\>\"", " ", "\[Rule]", " ", 
         "opentrons$300\[Mu]l$tipM1"}]}], "\[IndentingNewLine]", "}"}], "//", 
      " ", "Association"}]}], ")"}], " ", "//", " ", "Normal"}], " ", "//", 
  " ", "ColumnForm"}]], \
"Input",ExpressionUUID->"f7c64fca-343b-410c-8a94-d6f0c572c2b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"pipettes", " ", "=", " ", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"\"\<p50_single_v1.4\>\"", " ", "\[Rule]", " ", "p50M0"}], 
       "\[IndentingNewLine]", "}"}], "//", " ", "Association"}]}], ")"}], " ",
    "//", " ", "Normal"}], " ", "//", " ", 
  "ColumnForm"}]], \
"Input",ExpressionUUID->"b8866487-1b8b-43e7-9dcc-4d2dd6c58e3d"],

Cell[BoxData[
 RowBox[{"tipUsage", " ", "=", " ", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
    "\"\<p50_single_v1.4\>\"", ",", " ", "\"\<opentrons_96_tiprack_300ul\>\"",
      ",", " ", 
     RowBox[{"{", 
      RowBox[{
      "falcon15ml", ",", " ", "falcon50ml", ",", " ", "eppendorf1$5ml", ",", 
       " ", "eppendorf5$0ml", ",", " ", "idtTube", ",", " ", 
       "bioradPlateWell"}], " ", "}"}]}], "}"}], "\[IndentingNewLine]", 
   "}"}]}]], "Input",ExpressionUUID->"bd4ada82-b130-40bf-8cfc-d86b3852429a"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "printAndPlot", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"printAndPlot", "[", 
   RowBox[{"pipetteModelName_", ",", " ", "tipName_", ",", " ", "tubeName_"}],
    "]"}], " ", ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "tube", ",", " ", "simplify", ",", "tip", ",", " ", "pip", ",", " ", 
      "mounted", ",", " ", "minClearance", ",", " ", "depth"}], "}"}], ",", 
    " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tube", " ", "=", " ", 
      RowBox[{"tubes", "[", "tubeName", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"simplify", "[", "fn_", "]"}], " ", ":=", " ", 
      RowBox[{"FullSimplify", "[", 
       RowBox[{"fn", ",", " ", 
        RowBox[{"assumptions", "[", "tube", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"CellPrint", "[", 
      RowBox[{"TextCell", "[", 
       RowBox[{
        RowBox[{"ToString", "[", 
         RowBox[{"StringForm", "[", 
          RowBox[{
          "\"\<``: ``: ``\>\"", ",", " ", "pipetteModelName", ",", " ", 
           "tipName", ",", " ", "tubeName"}], "]"}], "]"}], ",", " ", 
        "\"\<Subsubsection\>\""}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"pip", " ", "=", " ", 
      RowBox[{"pipettes", "[", "pipetteModelName", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tip", " ", "=", " ", 
      RowBox[{"tips", "[", "tipName", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"mounted", " ", "=", " ", 
      RowBox[{"mountTip", "[", 
       RowBox[{"pip", ",", " ", "tip"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"minClearance", " ", "=", " ", 
      RowBox[{"minClearanceFromDepth", "[", 
       RowBox[{"tube", ",", " ", "mounted", ",", " ", "depth"}], "]"}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"test", " ", "@", "  ", 
      RowBox[{"N", " ", "@", " ", 
       RowBox[{"simplify", " ", "@", " ", "minClearance"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"test", " ", "@", " ", 
      RowBox[{"cFormat", " ", "@", " ", 
       RowBox[{"simplify", " ", "@", " ", "minClearance"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"cellPrint", " ", "@", " ", 
      RowBox[{"plotProfile", "[", "mounted", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cellPrint", " ", "@", " ", 
      RowBox[{"plotProfile", "[", "tube", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"cellPrint", " ", "@", " ", 
      RowBox[{"Plot", "[", 
       RowBox[{"minClearance", ",", " ", 
        RowBox[{"{", 
         RowBox[{"depth", ",", " ", "0", ",", " ", 
          RowBox[{"height", "[", "tube", "]"}]}], "}"}], ",", " ", 
        RowBox[{
        "PlotLabel", "\[Rule]", "\"\<min radial clearance vs depth\>\""}], 
        ",", " ", 
        RowBox[{"AxesOrigin", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
        RowBox[{"AxesLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<depth\>\"", ",", " ", "\"\<clearance\>\""}], "}"}]}]}],
        "]"}]}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"printAndPlot", "[", 
   RowBox[{"{", 
    RowBox[{
    "pipetteModelName_", ",", " ", "tipName_", ",", " ", "tubeNames__List"}], 
    "}"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"printAndPlot", "[", 
     RowBox[{"pipetteModelName", ",", " ", "tipName", ",", " ", "#"}], "]"}], 
    "&"}], " ", "/@", " ", "tubeNames"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"printAndPlot", " ", "/@", " ", "tipUsage"}], 
  ";"}]}], "Input",ExpressionUUID->"1afd22c8-6d0d-44c0-904c-90efa397470f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comparing Models of Tubes", \
"Subsection",ExpressionUUID->"195ff429-0478-417d-b861-6534fedbe351"],

Cell["\<\
As a matter mostly of historical interest (at this point), we compare \
alternative models of several of our tubes.\
\>", "Text",ExpressionUUID->"81261348-8d79-42a4-af8c-d5d1bc885b3e"],

Cell[CellGroupData[{

Cell["Comparing 1.5 mL Eppendorf Tube Models", \
"Subsubsection",ExpressionUUID->"08646d75-ff52-4893-a3f0-b7a583ac24c0"],

Cell["The fitted Eppendorf model clearly is better.", \
"Text",ExpressionUUID->"01a0a397-eabd-4c51-a1b0-051679643163"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example2", " ", "=", " ", "fittedEppendorf1$5M0"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"example3", " ", "=", " ", "fittedEppendorf1$5M1"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "example2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "example3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"expr2", " ", "=", " ", 
  RowBox[{"depthFromVolume", "[", 
   RowBox[{"example2", ",", " ", "v"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"expr3", " ", "=", " ", 
  RowBox[{"depthFromVolume", "[", 
   RowBox[{"example3", ",", " ", "v"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Row", " ", "@", 
  RowBox[{"{", " ", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expr2", ",", " ", "expr3"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"v", ",", " ", "0", ",", " ", 
        RowBox[{"volume", "[", "example3", "]"}]}], "}"}], ",", " ", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", 
      " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"expr2", " ", "-", " ", "expr2"}], ",", " ", 
        RowBox[{"expr3", " ", "-", " ", "expr2"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"v", ",", " ", "0", ",", " ", 
        RowBox[{"volume", "[", "example3", "]"}]}], "}"}], ",", " ", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<volume\>\"", ",", " ", "\"\<\[CapitalDelta]depth\>\""}], 
        "}"}]}], ",", " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", " ", 
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"{", "eppendorf15Data", "}"}], ",", " ", 
        RowBox[{"AxesLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<vol\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", 
        " ", 
        RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
        RowBox[{"AxesOrigin", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"depthFromVolume", "[", 
           RowBox[{"example2", ",", " ", "v"}], "]"}], ",", " ", 
          RowBox[{"depthFromVolume", "[", 
           RowBox[{"example3", ",", " ", "v"}], "]"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"v", ",", " ", "0", ",", " ", 
          RowBox[{"volume", "[", "example3", "]"}]}], "}"}]}], "]"}]}], 
     "]"}]}], "}"}]}]}], \
"Input",ExpressionUUID->"40c32bcd-1ef5-4258-830f-887814d9c061"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comparing IDT Tube Models", \
"Subsubsection",ExpressionUUID->"2a4191bb-328c-47da-b016-436b37e7bf10"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example2", " ", "=", " ", 
   RowBox[{"tubes", "[", "idtTube", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "example2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"expr2", " ", "=", " ", 
  RowBox[{"depthFromVolume", "[", 
   RowBox[{"example2", ",", " ", "v"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Row", " ", "@", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", "expr2", "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"v", ",", " ", "0", ",", " ", 
        RowBox[{"volume", "[", "example2", "]"}]}], "}"}], ",", " ", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", 
      " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expr2", " ", "-", " ", "expr2"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"v", ",", " ", "0", ",", " ", 
        RowBox[{"volume", "[", "example2", "]"}]}], "}"}], ",", " ", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<volume\>\"", ",", " ", "\"\<\[CapitalDelta]depth\>\""}], 
        "}"}]}], ",", " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", " ", 
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"{", "idtData", "}"}], ",", " ", 
        RowBox[{"AxesLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<vol\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", 
        " ", 
        RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
        RowBox[{"AxesOrigin", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"depthFromVolume", "[", 
          RowBox[{"example2", ",", " ", "v"}], "]"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"v", ",", " ", "0", ",", " ", 
          RowBox[{"volume", "[", "example2", "]"}]}], "}"}]}], "]"}]}], 
     "]"}]}], "}"}]}]}], \
"Input",ExpressionUUID->"7a302e25-3286-4ef8-93a9-8e27b3fc0297"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comparing Bio-rad Plate models", \
"Subsubsection",ExpressionUUID->"77a5f172-eb26-48cd-9ecf-7b19a514709b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"examplem1", " ", "=", " ", 
   RowBox[{"modelBioRad1", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"examplem2", " ", "=", " ", 
   RowBox[{"modelBioRad2", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"examplem3", " ", "=", " ", 
   RowBox[{"modelBioRad3", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"ignored", ",", " ", "examplem5"}], "}"}], " ", "=", " ", 
   RowBox[{"modelBioRad5", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "examplem1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "examplem2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "examplem3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "examplem5"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"exprm1", " ", "=", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"examplem1", ",", " ", "v"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"exprm2", " ", "=", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"examplem2", ",", " ", "v"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"exprm3", " ", "=", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"examplem3", ",", " ", "v"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"exprm5", " ", "=", " ", 
   RowBox[{"depthFromVolume", "[", 
    RowBox[{"examplem5", ",", " ", "v"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Row", " ", "@", 
  RowBox[{"{", " ", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "exprm1", ",", " ", "exprm2", ",", " ", "exprm3", ",", " ", "exprm5"}],
        "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"v", ",", " ", "0", ",", " ", "200"}], "}"}], ",", " ", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", 
      " ", 
      RowBox[{"PlotLegends", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<m1\>\"", ",", " ", "\"\<m2\>\"", ",", " ", "\"\<m3\>\"", ",", 
         " ", "\"\<m5\>\""}], "}"}]}], ",", " ", 
      RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"exprm3", " ", "-", " ", "exprm1"}], ",", " ", 
        RowBox[{"exprm3", " ", "-", " ", "exprm2"}], ",", " ", 
        RowBox[{"exprm3", " ", "-", " ", "exprm3"}], ",", " ", 
        RowBox[{"exprm3", " ", "-", " ", "exprm5"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"v", ",", " ", "0", ",", " ", 
        RowBox[{"volume", "[", "examplem3", "]"}]}], "}"}], ",", " ", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<volume\>\"", ",", " ", "\"\<\[CapitalDelta]depth\>\""}], 
        "}"}]}], ",", 
      RowBox[{"PlotLegends", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
        "\"\<m3 - m1\>\"", ",", " ", "\"\<m3 - m2\>\"", ",", " ", 
         "\"\<m3 - m3\>\"", ",", " ", "\"\<m3 - m5\>\""}], "}"}]}], ",", " ", 
      RowBox[{"PlotRange", " ", "\[Rule]", " ", "All"}], ",", " ", 
      RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]}], 
   "}"}]}]}], "Input",ExpressionUUID->"9219ffb6-41dc-4617-b29e-4ccafdd6cad4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comparing 15mL Falcon Tube models", \
"Subsubsection",ExpressionUUID->"dc086512-1d89-4e6d-9fec-34251511fa77"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"example2", " ", "=", " ", 
   RowBox[{"tubes", "[", "falcon15ml", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", " ", "@", " ", "example2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"expr2", " ", "=", " ", 
  RowBox[{"depthFromVolume", "[", 
   RowBox[{"example2", ",", " ", "v"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Row", " ", "@", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", "expr2", "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"v", ",", " ", "0", ",", " ", 
        RowBox[{"volume", "[", "example2", "]"}]}], "}"}], ",", " ", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<volume\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", 
      " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"expr2", "-", "expr2"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"v", ",", " ", "0", ",", " ", 
        RowBox[{"volume", "[", "example2", "]"}]}], "}"}], ",", " ", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<volume\>\"", ",", " ", "\"\<\[CapitalDelta]depth\>\""}], 
        "}"}]}], ",", " ", 
      RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", " ", 
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"{", "falconData", "}"}], ",", " ", 
        RowBox[{"AxesLabel", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<vol\>\"", ",", " ", "\"\<depth\>\""}], "}"}]}], ",", 
        " ", 
        RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
        RowBox[{"AxesOrigin", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"depthFromVolume", "[", 
          RowBox[{"example2", ",", " ", "v"}], "]"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"v", ",", " ", "0", ",", " ", 
          RowBox[{"volume", "[", "example2", "]"}]}], "}"}]}], "]"}]}], 
     "]"}]}], "}"}]}]}], \
"Input",ExpressionUUID->"1546305e-1880-4a2c-ab31-aa655fdcb3a8"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1848, 1037},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
PrintingCopies->1,
PrintingPageRange->{32000, 32000},
PrintingOptions->{"Magnification"->1.,
"PageSize"->{588, 768},
"PaperOrientation"->"Portrait",
"PaperSize"->{612, 792},
"PrintingMargins"->18},
PrivateNotebookOptions->{"FileOutlineCache"->False},
CellContext->Notebook,
CellLabelAutoDelete->True,
TrackCellChangeTimes->False,
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Report"}, "StandardReport.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData["Graphics"], MenuSortingValue -> 10000, Background -> None], 
   Cell[
    StyleData[All, "Printout"], Magnification -> 0.5]}, Visible -> False, 
  FrontEndVersion -> "12.0 for Microsoft Windows (64-bit) (April 8, 2019)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]

